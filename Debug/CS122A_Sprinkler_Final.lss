
CS122A_Sprinkler_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000282  00800100  00004b4c  00004be0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004b4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  00800382  00800382  00004e62  2**0
                  ALLOC
  3 .stab         00002748  00000000  00000000  00004e64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000095f  00000000  00000000  000075ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000168  00000000  00000000  00007f10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030d9  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ef  00000000  00000000  0000b151  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000132d  00000000  00000000  0000ba40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000107c  00000000  00000000  0000cd70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000af9  00000000  00000000  0000ddec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004fc4  00000000  00000000  0000e8e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000138a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__ctors_end>
       4:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
       8:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
       c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      10:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      14:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      18:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      1c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      20:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      24:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      28:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      2c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      30:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      34:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      38:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      3c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      40:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      44:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      48:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      4c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      50:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      54:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      58:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      5c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      60:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      64:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      68:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      6c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      70:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      74:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      78:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      7c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      80:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      84:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      88:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>

0000008c <font>:
      8c:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
      9c:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
      ac:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
      bc:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
      cc:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
      dc:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
      ec:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
      fc:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     10c:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     11c:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     12c:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     13c:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     14c:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     15c:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     16c:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     17c:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     18c:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     19c:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     1ac:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     1bc:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     1cc:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     1dc:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     1ec:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     1fc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     20c:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     21c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     22c:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     23c:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     24c:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     25c:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     26c:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     27c:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     28c:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     29c:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     2ac:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     2bc:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     2cc:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     2dc:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     2ec:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     2fc:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     30c:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     31c:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     32c:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     33c:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     34c:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     35c:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     36c:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     37c:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     38c:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     39c:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     3ac:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     3bc:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     3cc:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     3dc:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     3ec:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     3fc:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     40c:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     41c:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     42c:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     43c:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     44c:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     45c:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     46c:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     47c:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     48c:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     49c:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     4ac:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     4bc:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     4cc:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     4dc:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     4ec:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     4fc:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     50c:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     51c:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     52c:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     53c:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     54c:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     55c:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     56c:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     57c:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

0000058c <__ctors_end>:
     58c:	11 24       	eor	r1, r1
     58e:	1f be       	out	0x3f, r1	; 63
     590:	cf ef       	ldi	r28, 0xFF	; 255
     592:	d0 e4       	ldi	r29, 0x40	; 64
     594:	de bf       	out	0x3e, r29	; 62
     596:	cd bf       	out	0x3d, r28	; 61

00000598 <__do_copy_data>:
     598:	13 e0       	ldi	r17, 0x03	; 3
     59a:	a0 e0       	ldi	r26, 0x00	; 0
     59c:	b1 e0       	ldi	r27, 0x01	; 1
     59e:	ec e4       	ldi	r30, 0x4C	; 76
     5a0:	fb e4       	ldi	r31, 0x4B	; 75
     5a2:	00 e0       	ldi	r16, 0x00	; 0
     5a4:	0b bf       	out	0x3b, r16	; 59
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <__do_copy_data+0x14>
     5a8:	07 90       	elpm	r0, Z+
     5aa:	0d 92       	st	X+, r0
     5ac:	a2 38       	cpi	r26, 0x82	; 130
     5ae:	b1 07       	cpc	r27, r17
     5b0:	d9 f7       	brne	.-10     	; 0x5a8 <__do_copy_data+0x10>

000005b2 <__do_clear_bss>:
     5b2:	14 e0       	ldi	r17, 0x04	; 4
     5b4:	a2 e8       	ldi	r26, 0x82	; 130
     5b6:	b3 e0       	ldi	r27, 0x03	; 3
     5b8:	01 c0       	rjmp	.+2      	; 0x5bc <.do_clear_bss_start>

000005ba <.do_clear_bss_loop>:
     5ba:	1d 92       	st	X+, r1

000005bc <.do_clear_bss_start>:
     5bc:	ae 3a       	cpi	r26, 0xAE	; 174
     5be:	b1 07       	cpc	r27, r17
     5c0:	e1 f7       	brne	.-8      	; 0x5ba <.do_clear_bss_loop>
     5c2:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <main>
     5c6:	0c 94 a4 25 	jmp	0x4b48	; 0x4b48 <_exit>

000005ca <__bad_interrupt>:
     5ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005ce <expectPulse>:

//Date Storage
uint8_t data[5] = {0,0,0,0,0};

uint32_t expectPulse(bool level) 
{	
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
	uint32_t count = 0;
	// On AVR platforms use direct GPIO port access as it's much faster and better
	// for catching pulses that are 10's of microseconds in length:
	while ((PINC & 0x01) == level) 
	{
		if (count++ >= maxcycles)
     5d2:	40 91 76 03 	lds	r20, 0x0376
     5d6:	50 91 77 03 	lds	r21, 0x0377
     5da:	60 91 78 03 	lds	r22, 0x0378
     5de:	70 91 79 03 	lds	r23, 0x0379
//Date Storage
uint8_t data[5] = {0,0,0,0,0};

uint32_t expectPulse(bool level) 
{	
	uint32_t count = 0;
     5e2:	00 e0       	ldi	r16, 0x00	; 0
     5e4:	10 e0       	ldi	r17, 0x00	; 0
     5e6:	98 01       	movw	r18, r16
	// On AVR platforms use direct GPIO port access as it's much faster and better
	// for catching pulses that are 10's of microseconds in length:
	while ((PINC & 0x01) == level) 
     5e8:	e8 2f       	mov	r30, r24
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	0c c0       	rjmp	.+24     	; 0x606 <expectPulse+0x38>
	{
		if (count++ >= maxcycles)
     5ee:	d9 01       	movw	r26, r18
     5f0:	c8 01       	movw	r24, r16
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	a1 1d       	adc	r26, r1
     5f6:	b1 1d       	adc	r27, r1
     5f8:	04 17       	cp	r16, r20
     5fa:	15 07       	cpc	r17, r21
     5fc:	26 07       	cpc	r18, r22
     5fe:	37 07       	cpc	r19, r23
     600:	50 f4       	brcc	.+20     	; 0x616 <expectPulse+0x48>
     602:	8c 01       	movw	r16, r24
     604:	9d 01       	movw	r18, r26
uint32_t expectPulse(bool level) 
{	
	uint32_t count = 0;
	// On AVR platforms use direct GPIO port access as it's much faster and better
	// for catching pulses that are 10's of microseconds in length:
	while ((PINC & 0x01) == level) 
     606:	86 b1       	in	r24, 0x06	; 6
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	81 70       	andi	r24, 0x01	; 1
     60c:	90 70       	andi	r25, 0x00	; 0
     60e:	8e 17       	cp	r24, r30
     610:	9f 07       	cpc	r25, r31
     612:	69 f3       	breq	.-38     	; 0x5ee <expectPulse+0x20>
     614:	03 c0       	rjmp	.+6      	; 0x61c <expectPulse+0x4e>
	{
		if (count++ >= maxcycles)
		{
			return 0; // Exceeded timeout, fail.
     616:	00 e0       	ldi	r16, 0x00	; 0
     618:	10 e0       	ldi	r17, 0x00	; 0
     61a:	98 01       	movw	r18, r16
		}
	}					

	return count;
}
     61c:	60 2f       	mov	r22, r16
     61e:	71 2f       	mov	r23, r17
     620:	82 2f       	mov	r24, r18
     622:	93 2f       	mov	r25, r19
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	08 95       	ret

0000062a <ReadTemp>:
 

int ReadTemp ()
{
     62a:	8f 92       	push	r8
     62c:	9f 92       	push	r9
     62e:	af 92       	push	r10
     630:	bf 92       	push	r11
     632:	cf 92       	push	r12
     634:	df 92       	push	r13
     636:	ef 92       	push	r14
     638:	ff 92       	push	r15
     63a:	0f 93       	push	r16
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
     646:	c0 54       	subi	r28, 0x40	; 64
     648:	d1 40       	sbci	r29, 0x01	; 1
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
	//clear 40 bits for data 
	data[0] = data[1] = data[2] = data[3] = data[4];
     654:	80 91 8f 03 	lds	r24, 0x038F
     658:	80 93 8e 03 	sts	0x038E, r24
     65c:	80 93 8d 03 	sts	0x038D, r24
     660:	80 93 8c 03 	sts	0x038C, r24
     664:	80 93 8b 03 	sts	0x038B, r24
	
	// Go into high impedence state to let pull-up raise data line level and
	// start the reading process.
	//Set DDRB For OutPut
	DDRC = DDRC | 0x01;
     668:	38 9a       	sbi	0x07, 0	; 7
	// Go into high impedence state to let pull-up raise data line level and
	// start the reading process.
	PORTC = PORTC | 0x01;
     66a:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     66c:	83 e2       	ldi	r24, 0x23	; 35
     66e:	94 ef       	ldi	r25, 0xF4	; 244
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	f1 f7       	brne	.-4      	; 0x670 <ReadTemp+0x46>
     674:	00 c0       	rjmp	.+0      	; 0x676 <ReadTemp+0x4c>
     676:	00 00       	nop
	_delay_ms(250);
	
	 // First set data line low for 20 milliseconds.
	 DDRC = DDRC| 0x01;
     678:	38 9a       	sbi	0x07, 0	; 7
	 PORTC = PORTC & 0xFE;
     67a:	40 98       	cbi	0x08, 0	; 8
     67c:	a7 e8       	ldi	r26, 0x87	; 135
     67e:	b3 e1       	ldi	r27, 0x13	; 19
     680:	11 97       	sbiw	r26, 0x01	; 1
     682:	f1 f7       	brne	.-4      	; 0x680 <ReadTemp+0x56>
     684:	00 c0       	rjmp	.+0      	; 0x686 <ReadTemp+0x5c>
     686:	00 00       	nop
	 _delay_ms(20);
	 
	 uint32_t cycles[80];
	 
	 // End the start signal by setting data line high for 40 microseconds.
	 PORTC = PORTC | 0x01;
     688:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     68a:	bd e0       	ldi	r27, 0x0D	; 13
     68c:	ba 95       	dec	r27
     68e:	f1 f7       	brne	.-4      	; 0x68c <ReadTemp+0x62>
     690:	00 00       	nop
	 _delay_us(40);
	 
	  // Now start reading the data line to get the value from the DHT sensor.
	  DDRC = DDRC & 0xFE;
     692:	38 98       	cbi	0x07, 0	; 7
     694:	e3 e0       	ldi	r30, 0x03	; 3
     696:	ea 95       	dec	r30
     698:	f1 f7       	brne	.-4      	; 0x696 <ReadTemp+0x6c>
     69a:	00 00       	nop
	  // Delay a bit to let sensor pull data line low
	  _delay_us(10);
	  
	   // First expect a low signal for ~80 microseconds followed by a high signal
	   // for ~80 microseconds again.
	   if (expectPulse(LOW) == 0) {
     69c:	80 91 90 03 	lds	r24, 0x0390
     6a0:	0e 94 e7 02 	call	0x5ce	; 0x5ce <expectPulse>
     6a4:	dc 01       	movw	r26, r24
     6a6:	cb 01       	movw	r24, r22
     6a8:	00 97       	sbiw	r24, 0x00	; 0
     6aa:	a1 05       	cpc	r26, r1
     6ac:	b1 05       	cpc	r27, r1
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <ReadTemp+0x88>
     6b0:	a6 c0       	rjmp	.+332    	; 0x7fe <ReadTemp+0x1d4>
		   
		   return false;
	   }
	   
	   if (expectPulse(HIGH) == 0) {
     6b2:	80 91 7a 03 	lds	r24, 0x037A
     6b6:	0e 94 e7 02 	call	0x5ce	; 0x5ce <expectPulse>
     6ba:	dc 01       	movw	r26, r24
     6bc:	cb 01       	movw	r24, r22
     6be:	00 97       	sbiw	r24, 0x00	; 0
     6c0:	a1 05       	cpc	r26, r1
     6c2:	b1 05       	cpc	r27, r1
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <ReadTemp+0x9e>
     6c6:	9e c0       	rjmp	.+316    	; 0x804 <ReadTemp+0x1da>
     6c8:	8e 01       	movw	r16, r28
     6ca:	0f 5f       	subi	r16, 0xFF	; 255
     6cc:	1f 4f       	sbci	r17, 0xFF	; 255

	return count;
}
 

int ReadTemp ()
     6ce:	0f 2e       	mov	r0, r31
     6d0:	f1 e4       	ldi	r31, 0x41	; 65
     6d2:	ef 2e       	mov	r14, r31
     6d4:	f1 e0       	ldi	r31, 0x01	; 1
     6d6:	ff 2e       	mov	r15, r31
     6d8:	f0 2d       	mov	r31, r0
     6da:	ec 0e       	add	r14, r28
     6dc:	fd 1e       	adc	r15, r29
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed all
    // the pulses are read into a array and then examined in a later step.
    for (int i=0; i<80; i+=2)
	{
	    cycles[i]   = expectPulse(LOW);
     6de:	80 91 90 03 	lds	r24, 0x0390
     6e2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <expectPulse>
     6e6:	dc 01       	movw	r26, r24
     6e8:	cb 01       	movw	r24, r22
     6ea:	f8 01       	movw	r30, r16
     6ec:	80 83       	st	Z, r24
     6ee:	91 83       	std	Z+1, r25	; 0x01
     6f0:	a2 83       	std	Z+2, r26	; 0x02
     6f2:	b3 83       	std	Z+3, r27	; 0x03
	    cycles[i+1] = expectPulse(HIGH);
     6f4:	80 91 7a 03 	lds	r24, 0x037A
     6f8:	0e 94 e7 02 	call	0x5ce	; 0x5ce <expectPulse>
     6fc:	dc 01       	movw	r26, r24
     6fe:	cb 01       	movw	r24, r22
     700:	f8 01       	movw	r30, r16
     702:	84 83       	std	Z+4, r24	; 0x04
     704:	95 83       	std	Z+5, r25	; 0x05
     706:	a6 83       	std	Z+6, r26	; 0x06
     708:	b7 83       	std	Z+7, r27	; 0x07
     70a:	08 5f       	subi	r16, 0xF8	; 248
     70c:	1f 4f       	sbci	r17, 0xFF	; 255
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed all
    // the pulses are read into a array and then examined in a later step.
    for (int i=0; i<80; i+=2)
     70e:	0e 15       	cp	r16, r14
     710:	1f 05       	cpc	r17, r15
     712:	29 f7       	brne	.-54     	; 0x6de <ReadTemp+0xb4>

	// Inspect pulses and determine which ones are 0 (high state cycle count < low
	// state cycle count), or 1 (high state cycle count > low state cycle count).
	for (int i=0; i<40; ++i) 
	{
		uint32_t lowCycles  = cycles[2*i];
     714:	49 81       	ldd	r20, Y+1	; 0x01
     716:	5a 81       	ldd	r21, Y+2	; 0x02
     718:	6b 81       	ldd	r22, Y+3	; 0x03
     71a:	7c 81       	ldd	r23, Y+4	; 0x04
		uint32_t highCycles = cycles[2*i+1];
     71c:	0d 81       	ldd	r16, Y+5	; 0x05
     71e:	1e 81       	ldd	r17, Y+6	; 0x06
     720:	2f 81       	ldd	r18, Y+7	; 0x07
     722:	38 85       	ldd	r19, Y+8	; 0x08
		
		if ((lowCycles == 0) || (highCycles == 0)) 
     724:	41 15       	cp	r20, r1
     726:	51 05       	cpc	r21, r1
     728:	61 05       	cpc	r22, r1
     72a:	71 05       	cpc	r23, r1
     72c:	09 f4       	brne	.+2      	; 0x730 <ReadTemp+0x106>
     72e:	6d c0       	rjmp	.+218    	; 0x80a <ReadTemp+0x1e0>
     730:	01 15       	cp	r16, r1
     732:	11 05       	cpc	r17, r1
     734:	21 05       	cpc	r18, r1
     736:	31 05       	cpc	r19, r1
     738:	09 f4       	brne	.+2      	; 0x73c <ReadTemp+0x112>
     73a:	6a c0       	rjmp	.+212    	; 0x810 <ReadTemp+0x1e6>
     73c:	0f 2e       	mov	r0, r31
     73e:	f9 e0       	ldi	r31, 0x09	; 9
     740:	8f 2e       	mov	r8, r31
     742:	99 24       	eor	r9, r9
     744:	f0 2d       	mov	r31, r0
     746:	8c 0e       	add	r8, r28
     748:	9d 1e       	adc	r9, r29
     74a:	e0 e0       	ldi	r30, 0x00	; 0
     74c:	f0 e0       	ldi	r31, 0x00	; 0
		{
			return 0;
		}
		
		data[i/8] <<= 1;
     74e:	0f 2e       	mov	r0, r31
     750:	fb e8       	ldi	r31, 0x8B	; 139
     752:	af 2e       	mov	r10, r31
     754:	f3 e0       	ldi	r31, 0x03	; 3
     756:	bf 2e       	mov	r11, r31
     758:	f0 2d       	mov	r31, r0
     75a:	1c c0       	rjmp	.+56     	; 0x794 <ReadTemp+0x16a>

	// Inspect pulses and determine which ones are 0 (high state cycle count < low
	// state cycle count), or 1 (high state cycle count > low state cycle count).
	for (int i=0; i<40; ++i) 
	{
		uint32_t lowCycles  = cycles[2*i];
     75c:	d4 01       	movw	r26, r8
     75e:	4d 91       	ld	r20, X+
     760:	5d 91       	ld	r21, X+
     762:	6d 91       	ld	r22, X+
     764:	7c 91       	ld	r23, X
     766:	13 97       	sbiw	r26, 0x03	; 3
		uint32_t highCycles = cycles[2*i+1];
     768:	14 96       	adiw	r26, 0x04	; 4
     76a:	0d 91       	ld	r16, X+
     76c:	1d 91       	ld	r17, X+
     76e:	2d 91       	ld	r18, X+
     770:	3c 91       	ld	r19, X
     772:	17 97       	sbiw	r26, 0x07	; 7
		
		if ((lowCycles == 0) || (highCycles == 0)) 
     774:	41 15       	cp	r20, r1
     776:	51 05       	cpc	r21, r1
     778:	61 05       	cpc	r22, r1
     77a:	71 05       	cpc	r23, r1
     77c:	09 f4       	brne	.+2      	; 0x780 <ReadTemp+0x156>
     77e:	4b c0       	rjmp	.+150    	; 0x816 <ReadTemp+0x1ec>
     780:	88 e0       	ldi	r24, 0x08	; 8
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	88 0e       	add	r8, r24
     786:	99 1e       	adc	r9, r25
     788:	01 15       	cp	r16, r1
     78a:	11 05       	cpc	r17, r1
     78c:	21 05       	cpc	r18, r1
     78e:	31 05       	cpc	r19, r1
     790:	09 f4       	brne	.+2      	; 0x794 <ReadTemp+0x16a>
     792:	44 c0       	rjmp	.+136    	; 0x81c <ReadTemp+0x1f2>
		{
			return 0;
		}
		
		data[i/8] <<= 1;
     794:	cf 01       	movw	r24, r30
     796:	ff 23       	and	r31, r31
     798:	0c f4       	brge	.+2      	; 0x79c <ReadTemp+0x172>
     79a:	07 96       	adiw	r24, 0x07	; 7
     79c:	6c 01       	movw	r12, r24
     79e:	d5 94       	asr	r13
     7a0:	c7 94       	ror	r12
     7a2:	d5 94       	asr	r13
     7a4:	c7 94       	ror	r12
     7a6:	d5 94       	asr	r13
     7a8:	c7 94       	ror	r12
     7aa:	c5 01       	movw	r24, r10
     7ac:	8c 0d       	add	r24, r12
     7ae:	9d 1d       	adc	r25, r13
     7b0:	dc 01       	movw	r26, r24
     7b2:	ec 90       	ld	r14, X
     7b4:	ee 0c       	add	r14, r14
     7b6:	ec 92       	st	X, r14
		// Now compare the low and high cycle times to see if the bit is a 0 or 1.
		if (highCycles > lowCycles)
     7b8:	40 17       	cp	r20, r16
     7ba:	51 07       	cpc	r21, r17
     7bc:	62 07       	cpc	r22, r18
     7be:	73 07       	cpc	r23, r19
     7c0:	18 f4       	brcc	.+6      	; 0x7c8 <ReadTemp+0x19e>
		{
			// High cycles are greater than 50us low cycle count, must be a 1.
			data[i/8] |= 1;
     7c2:	8e 2d       	mov	r24, r14
     7c4:	81 60       	ori	r24, 0x01	; 1
     7c6:	8c 93       	st	X, r24
	    cycles[i+1] = expectPulse(HIGH);
    }

	// Inspect pulses and determine which ones are 0 (high state cycle count < low
	// state cycle count), or 1 (high state cycle count > low state cycle count).
	for (int i=0; i<40; ++i) 
     7c8:	31 96       	adiw	r30, 0x01	; 1
     7ca:	e8 32       	cpi	r30, 0x28	; 40
     7cc:	f1 05       	cpc	r31, r1
     7ce:	31 f6       	brne	.-116    	; 0x75c <ReadTemp+0x132>
		// Else high cycles are less than (or equal to, a weird case) the 50us low
		// cycle count so this must be a zero.  Nothing needs to be changed in the
		// stored data.
	}
	  // Check we read 40 bits and that the checksum matches.
	  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF))
     7d0:	80 91 8f 03 	lds	r24, 0x038F
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	eb e8       	ldi	r30, 0x8B	; 139
     7d8:	f3 e0       	ldi	r31, 0x03	; 3
     7da:	40 81       	ld	r20, Z
     7dc:	21 81       	ldd	r18, Z+1	; 0x01
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	24 0f       	add	r18, r20
     7e2:	31 1d       	adc	r19, r1
     7e4:	42 81       	ldd	r20, Z+2	; 0x02
     7e6:	24 0f       	add	r18, r20
     7e8:	31 1d       	adc	r19, r1
     7ea:	43 81       	ldd	r20, Z+3	; 0x03
     7ec:	24 0f       	add	r18, r20
     7ee:	31 1d       	adc	r19, r1
     7f0:	30 70       	andi	r19, 0x00	; 0
     7f2:	82 17       	cp	r24, r18
     7f4:	93 07       	cpc	r25, r19
     7f6:	a9 f4       	brne	.+42     	; 0x822 <ReadTemp+0x1f8>
	  {
		  return 2;
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	14 c0       	rjmp	.+40     	; 0x826 <ReadTemp+0x1fc>
	  
	   // First expect a low signal for ~80 microseconds followed by a high signal
	   // for ~80 microseconds again.
	   if (expectPulse(LOW) == 0) {
		   
		   return false;
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	11 c0       	rjmp	.+34     	; 0x826 <ReadTemp+0x1fc>
	   }
	   
	   if (expectPulse(HIGH) == 0) {
		   	   
			return false;
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e c0       	rjmp	.+28     	; 0x826 <ReadTemp+0x1fc>
		uint32_t lowCycles  = cycles[2*i];
		uint32_t highCycles = cycles[2*i+1];
		
		if ((lowCycles == 0) || (highCycles == 0)) 
		{
			return 0;
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0b c0       	rjmp	.+22     	; 0x826 <ReadTemp+0x1fc>
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	08 c0       	rjmp	.+16     	; 0x826 <ReadTemp+0x1fc>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	05 c0       	rjmp	.+10     	; 0x826 <ReadTemp+0x1fc>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	02 c0       	rjmp	.+4      	; 0x826 <ReadTemp+0x1fc>
	  {
		  return 2;
	  }
	  else 
	  {
		  return 0;
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
	  }
 }
     826:	c0 5c       	subi	r28, 0xC0	; 192
     828:	de 4f       	sbci	r29, 0xFE	; 254
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	ff 90       	pop	r15
     83e:	ef 90       	pop	r14
     840:	df 90       	pop	r13
     842:	cf 90       	pop	r12
     844:	bf 90       	pop	r11
     846:	af 90       	pop	r10
     848:	9f 90       	pop	r9
     84a:	8f 90       	pop	r8
     84c:	08 95       	ret

0000084e <convertCtoF>:
 
float convertCtoF(float c) 
{
	return c * 1.8 + 32;
     84e:	26 e6       	ldi	r18, 0x66	; 102
     850:	36 e6       	ldi	r19, 0x66	; 102
     852:	46 ee       	ldi	r20, 0xE6	; 230
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	52 e4       	ldi	r21, 0x42	; 66
     862:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <__addsf3>
}
     866:	46 2f       	mov	r20, r22
     868:	57 2f       	mov	r21, r23
     86a:	68 2f       	mov	r22, r24
     86c:	79 2f       	mov	r23, r25
     86e:	cb 01       	movw	r24, r22
     870:	ba 01       	movw	r22, r20
     872:	08 95       	ret

00000874 <readTemperature>:
 

readTemperature(bool S) 
{
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	d8 2f       	mov	r29, r24
	float f = 0;
	f = data[2] & 0x7F;
     882:	c0 91 8d 03 	lds	r28, 0x038D
     886:	6c 2f       	mov	r22, r28
     888:	6f 77       	andi	r22, 0x7F	; 127
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 06 20 	call	0x400c	; 0x400c <__floatsisf>
	f *= 256;
     894:	46 2f       	mov	r20, r22
     896:	57 2f       	mov	r21, r23
     898:	68 2f       	mov	r22, r24
     89a:	79 2f       	mov	r23, r25
     89c:	cb 01       	movw	r24, r22
     89e:	ba 01       	movw	r22, r20
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	40 e8       	ldi	r20, 0x80	; 128
     8a6:	53 e4       	ldi	r21, 0x43	; 67
     8a8:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
     8ac:	e6 2e       	mov	r14, r22
     8ae:	f7 2e       	mov	r15, r23
     8b0:	18 2f       	mov	r17, r24
     8b2:	09 2f       	mov	r16, r25
	f += data[3];
     8b4:	60 91 8e 03 	lds	r22, 0x038E
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 06 20 	call	0x400c	; 0x400c <__floatsisf>
     8c2:	51 2f       	mov	r21, r17
     8c4:	40 2f       	mov	r20, r16
     8c6:	0e 2d       	mov	r16, r14
     8c8:	1f 2d       	mov	r17, r15
     8ca:	25 2f       	mov	r18, r21
     8cc:	34 2f       	mov	r19, r20
     8ce:	a9 01       	movw	r20, r18
     8d0:	98 01       	movw	r18, r16
     8d2:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <__addsf3>
	f *= 0.1;
     8d6:	46 2f       	mov	r20, r22
     8d8:	57 2f       	mov	r21, r23
     8da:	68 2f       	mov	r22, r24
     8dc:	79 2f       	mov	r23, r25
     8de:	cb 01       	movw	r24, r22
     8e0:	ba 01       	movw	r22, r20
     8e2:	2d ec       	ldi	r18, 0xCD	; 205
     8e4:	3c ec       	ldi	r19, 0xCC	; 204
     8e6:	4c ec       	ldi	r20, 0xCC	; 204
     8e8:	5d e3       	ldi	r21, 0x3D	; 61
     8ea:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
     8ee:	46 2f       	mov	r20, r22
     8f0:	57 2f       	mov	r21, r23
     8f2:	68 2f       	mov	r22, r24
     8f4:	79 2f       	mov	r23, r25
     8f6:	cb 01       	movw	r24, r22
     8f8:	ba 01       	movw	r22, r20
	if (data[2] & 0x80)
     8fa:	cc 23       	and	r28, r28
     8fc:	0c f4       	brge	.+2      	; 0x900 <readTemperature+0x8c>
	{
		f *= -1;
     8fe:	90 58       	subi	r25, 0x80	; 128
	}
	
	if(S) 
     900:	dd 23       	and	r29, r29
     902:	11 f0       	breq	.+4      	; 0x908 <readTemperature+0x94>
	{
		f = convertCtoF(f);
     904:	0e 94 27 04 	call	0x84e	; 0x84e <convertCtoF>
	}
			
	return f;
     908:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <__fixsfsi>
}
     90c:	86 2f       	mov	r24, r22
     90e:	97 2f       	mov	r25, r23
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	08 95       	ret

0000091e <readHumidity>:

float readHumidity ()
{
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
	float f = 0;
	f = data[0];
     926:	60 91 8b 03 	lds	r22, 0x038B
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0e 94 04 20 	call	0x4008	; 0x4008 <__floatunsisf>
	f *= 256;
     934:	46 2f       	mov	r20, r22
     936:	57 2f       	mov	r21, r23
     938:	68 2f       	mov	r22, r24
     93a:	79 2f       	mov	r23, r25
     93c:	cb 01       	movw	r24, r22
     93e:	ba 01       	movw	r22, r20
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	53 e4       	ldi	r21, 0x43	; 67
     948:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>
     94c:	16 2f       	mov	r17, r22
     94e:	d7 2f       	mov	r29, r23
     950:	c8 2f       	mov	r28, r24
     952:	09 2f       	mov	r16, r25
	f += data[1];
     954:	60 91 8c 03 	lds	r22, 0x038C
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 06 20 	call	0x400c	; 0x400c <__floatsisf>
     962:	40 2f       	mov	r20, r16
     964:	01 2f       	mov	r16, r17
     966:	1d 2f       	mov	r17, r29
     968:	2c 2f       	mov	r18, r28
     96a:	34 2f       	mov	r19, r20
     96c:	a9 01       	movw	r20, r18
     96e:	98 01       	movw	r18, r16
     970:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <__addsf3>
	f *= 0.1;
     974:	46 2f       	mov	r20, r22
     976:	57 2f       	mov	r21, r23
     978:	68 2f       	mov	r22, r24
     97a:	79 2f       	mov	r23, r25
     97c:	cb 01       	movw	r24, r22
     97e:	ba 01       	movw	r22, r20
     980:	2d ec       	ldi	r18, 0xCD	; 205
     982:	3c ec       	ldi	r19, 0xCC	; 204
     984:	4c ec       	ldi	r20, 0xCC	; 204
     986:	5d e3       	ldi	r21, 0x3D	; 61
     988:	0e 94 92 20 	call	0x4124	; 0x4124 <__mulsf3>

	return f;
}
     98c:	46 2f       	mov	r20, r22
     98e:	57 2f       	mov	r21, r23
     990:	68 2f       	mov	r22, r24
     992:	79 2f       	mov	r23, r25
     994:	cb 01       	movw	r24, r22
     996:	ba 01       	movw	r22, r20
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	08 95       	ret

000009a2 <initUSART>:
//Parameter: usartNum specifies which USART is being initialized
//			 If usartNum != 1, default to USART0
//Returns: None
void initUSART(unsigned char usartNum)
{
	if (usartNum != 1) {
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	81 f0       	breq	.+32     	; 0x9c6 <initUSART+0x24>
		// Turn on the reception circuitry of USART0
		// Turn on receiver and transmitter
		// Use 8-bit character sizes 
		UCSR0B |= (1 << RXEN0)  | (1 << TXEN0);
     9a6:	e1 ec       	ldi	r30, 0xC1	; 193
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	88 61       	ori	r24, 0x18	; 24
     9ae:	80 83       	st	Z, r24
		UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
     9b0:	e2 ec       	ldi	r30, 0xC2	; 194
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	86 60       	ori	r24, 0x06	; 6
     9b8:	80 83       	st	Z, r24
		// Load lower 8-bits of the baud rate value into the low byte of the UBRR0 register
		UBRR0L = BAUD_PRESCALE;
     9ba:	83 e3       	ldi	r24, 0x33	; 51
     9bc:	80 93 c4 00 	sts	0x00C4, r24
		// Load upper 8-bits of the baud rate value into the high byte of the UBRR0 register
		UBRR0H = (BAUD_PRESCALE >> 8);
     9c0:	10 92 c5 00 	sts	0x00C5, r1
     9c4:	08 95       	ret
	}
	else {
		// Turn on the reception circuitry for USART1
		// Turn on receiver and transmitter
		// Use 8-bit character sizes
		UCSR1B |= (1 << RXEN1)  | (1 << TXEN1);
     9c6:	e9 ec       	ldi	r30, 0xC9	; 201
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	88 61       	ori	r24, 0x18	; 24
     9ce:	80 83       	st	Z, r24
		UCSR1C |= (1 << UCSZ10) | (1 << UCSZ11);
     9d0:	ea ec       	ldi	r30, 0xCA	; 202
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	80 81       	ld	r24, Z
     9d6:	86 60       	ori	r24, 0x06	; 6
     9d8:	80 83       	st	Z, r24
		// Load lower 8-bits of the baud rate value into the low byte of the UBRR1 register
		UBRR1L = BAUD_PRESCALE;
     9da:	83 e3       	ldi	r24, 0x33	; 51
     9dc:	80 93 cc 00 	sts	0x00CC, r24
		// Load upper 8-bits of the baud rate value into the high byte of the UBRR1 register
		UBRR1H = (BAUD_PRESCALE >> 8);
     9e0:	10 92 cd 00 	sts	0x00CD, r1
     9e4:	08 95       	ret

000009e6 <USART_IsSendReady>:
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
     9e6:	81 30       	cpi	r24, 0x01	; 1
     9e8:	21 f0       	breq	.+8      	; 0x9f2 <USART_IsSendReady+0xc>
     9ea:	80 91 c0 00 	lds	r24, 0x00C0
     9ee:	80 72       	andi	r24, 0x20	; 32
     9f0:	08 95       	ret
     9f2:	80 91 c8 00 	lds	r24, 0x00C8
     9f6:	80 72       	andi	r24, 0x20	; 32
}
     9f8:	08 95       	ret

000009fa <USART_HasTransmitted>:
//Functionality - checks if USART has successfully transmitted data
//Parameter: usartNum specifies which USART is being checked
//Returns: 1 if true else 0
unsigned char USART_HasTransmitted(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << TXC0)) : (UCSR1A & (1 << TXC1));
     9fa:	81 30       	cpi	r24, 0x01	; 1
     9fc:	21 f0       	breq	.+8      	; 0xa06 <USART_HasTransmitted+0xc>
     9fe:	80 91 c0 00 	lds	r24, 0x00C0
     a02:	80 74       	andi	r24, 0x40	; 64
     a04:	08 95       	ret
     a06:	80 91 c8 00 	lds	r24, 0x00C8
     a0a:	80 74       	andi	r24, 0x40	; 64
}
     a0c:	08 95       	ret

00000a0e <USART_HasReceived>:
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
     a0e:	81 30       	cpi	r24, 0x01	; 1
     a10:	21 f0       	breq	.+8      	; 0xa1a <USART_HasReceived+0xc>
     a12:	80 91 c0 00 	lds	r24, 0x00C0
     a16:	80 78       	andi	r24, 0x80	; 128
     a18:	08 95       	ret
     a1a:	80 91 c8 00 	lds	r24, 0x00C8
     a1e:	80 78       	andi	r24, 0x80	; 128
}
     a20:	08 95       	ret

00000a22 <USART_Flush>:
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
     a22:	81 30       	cpi	r24, 0x01	; 1
     a24:	29 f4       	brne	.+10     	; 0xa30 <USART_Flush+0xe>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
     a26:	80 91 c8 00 	lds	r24, 0x00C8
     a2a:	88 23       	and	r24, r24
     a2c:	84 f0       	brlt	.+32     	; 0xa4e <USART_Flush+0x2c>
     a2e:	08 95       	ret
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
     a30:	80 91 c0 00 	lds	r24, 0x00C0
     a34:	88 23       	and	r24, r24
     a36:	ac f4       	brge	.+42     	; 0xa62 <USART_Flush+0x40>
     a38:	a6 ec       	ldi	r26, 0xC6	; 198
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	e0 ec       	ldi	r30, 0xC0	; 192
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	8c 91       	ld	r24, X
     a42:	80 93 91 03 	sts	0x0391, r24
     a46:	80 81       	ld	r24, Z
     a48:	88 23       	and	r24, r24
     a4a:	d4 f3       	brlt	.-12     	; 0xa40 <USART_Flush+0x1e>
     a4c:	08 95       	ret
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
     a4e:	ae ec       	ldi	r26, 0xCE	; 206
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	e8 ec       	ldi	r30, 0xC8	; 200
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	8c 91       	ld	r24, X
     a58:	80 93 91 03 	sts	0x0391, r24
     a5c:	80 81       	ld	r24, Z
     a5e:	88 23       	and	r24, r24
     a60:	d4 f3       	brlt	.-12     	; 0xa56 <USART_Flush+0x34>
     a62:	08 95       	ret

00000a64 <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
     a64:	61 30       	cpi	r22, 0x01	; 1
     a66:	41 f0       	breq	.+16     	; 0xa78 <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
     a68:	e0 ec       	ldi	r30, 0xC0	; 192
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	90 81       	ld	r25, Z
     a6e:	95 ff       	sbrs	r25, 5
     a70:	fd cf       	rjmp	.-6      	; 0xa6c <USART_Send+0x8>
		UDR0 = sendMe;
     a72:	80 93 c6 00 	sts	0x00C6, r24
     a76:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
     a78:	e8 ec       	ldi	r30, 0xC8	; 200
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	90 81       	ld	r25, Z
     a7e:	95 ff       	sbrs	r25, 5
     a80:	fd cf       	rjmp	.-6      	; 0xa7c <USART_Send+0x18>
		UDR1 = sendMe;
     a82:	80 93 ce 00 	sts	0x00CE, r24
     a86:	08 95       	ret

00000a88 <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
     a88:	81 30       	cpi	r24, 0x01	; 1
     a8a:	41 f0       	breq	.+16     	; 0xa9c <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
     a8c:	e0 ec       	ldi	r30, 0xC0	; 192
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	88 23       	and	r24, r24
     a94:	ec f7       	brge	.-6      	; 0xa90 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
     a96:	80 91 c6 00 	lds	r24, 0x00C6
     a9a:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
     a9c:	e8 ec       	ldi	r30, 0xC8	; 200
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	80 81       	ld	r24, Z
     aa2:	88 23       	and	r24, r24
     aa4:	ec f7       	brge	.-6      	; 0xaa0 <USART_Receive+0x18>
		return UDR1;
     aa6:	80 91 ce 00 	lds	r24, 0x00CE
	}
}
     aaa:	08 95       	ret

00000aac <SPI_MasterInit>:
#define RES 1			// reset pin
void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output, all others input */
	//PORTB = (1<<DDRB5)|(1<<DDRB7);
	DDRB = 0xFF;
     aac:	8f ef       	ldi	r24, 0xFF	; 255
     aae:	84 b9       	out	0x04, r24	; 4
	
	// initialization for 1284
	PORTB |= (1 << 0) | (1 << 1);
     ab0:	85 b1       	in	r24, 0x05	; 5
     ab2:	83 60       	ori	r24, 0x03	; 3
     ab4:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << 5) | (1 << 7);
     ab6:	85 b1       	in	r24, 0x05	; 5
     ab8:	80 6a       	ori	r24, 0xA0	; 160
     aba:	85 b9       	out	0x05, r24	; 5
	//initialization for 328p
	//PORTB |= (1 << 0) | (1 << 1);
	//PORTB |= (1 << 3) | (1 << 5);
	
	/* Enable SPI, Master, set clock rate fck/2 */
	SPCR = (1<<SPE)|(1<<MSTR)|(0<<SPR1)|(0 << SPR0);
     abc:	80 e5       	ldi	r24, 0x50	; 80
     abe:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1 << SPI2X);
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	8d bd       	out	0x2d, r24	; 45
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ac4:	87 ea       	ldi	r24, 0xA7	; 167
     ac6:	91 e6       	ldi	r25, 0x61	; 97
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	f1 f7       	brne	.-4      	; 0xac8 <SPI_MasterInit+0x1c>
     acc:	00 c0       	rjmp	.+0      	; 0xace <SPI_MasterInit+0x22>
     ace:	00 00       	nop
	_delay_ms(100);
}
     ad0:	08 95       	ret

00000ad2 <SoftwareReset>:

void SoftwareReset(){
	RSPORT |= (1 << RES);
     ad2:	29 9a       	sbi	0x05, 1	; 5
     ad4:	81 ee       	ldi	r24, 0xE1	; 225
     ad6:	94 e0       	ldi	r25, 0x04	; 4
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <SoftwareReset+0x6>
     adc:	00 c0       	rjmp	.+0      	; 0xade <SoftwareReset+0xc>
     ade:	00 00       	nop
	_delay_ms(5);
	RSPORT &= ~(1 << RES);
     ae0:	29 98       	cbi	0x05, 1	; 5
     ae2:	87 e8       	ldi	r24, 0x87	; 135
     ae4:	93 e1       	ldi	r25, 0x13	; 19
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <SoftwareReset+0x14>
     aea:	00 c0       	rjmp	.+0      	; 0xaec <SoftwareReset+0x1a>
     aec:	00 00       	nop
	_delay_ms(20);
	RSPORT |= (1 << RES);
     aee:	29 9a       	sbi	0x05, 1	; 5
     af0:	8b e7       	ldi	r24, 0x7B	; 123
     af2:	92 e9       	ldi	r25, 0x92	; 146
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	f1 f7       	brne	.-4      	; 0xaf4 <SoftwareReset+0x22>
     af8:	00 c0       	rjmp	.+0      	; 0xafa <SoftwareReset+0x28>
     afa:	00 00       	nop
	_delay_ms(150);
}
     afc:	08 95       	ret

00000afe <writedata>:
}



void writedata(uint8_t c) {
	RSPORT |= (1 << RS);
     afe:	28 9a       	sbi	0x05, 0	; 5
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     b00:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF))) ;
     b02:	0d b4       	in	r0, 0x2d	; 45
     b04:	07 fe       	sbrs	r0, 7
     b06:	fd cf       	rjmp	.-6      	; 0xb02 <writedata+0x4>


void writedata(uint8_t c) {
	RSPORT |= (1 << RS);
	spiwrite(c);
}
     b08:	08 95       	ret

00000b0a <writecommand>:


void writecommand(uint8_t c) {
	RSPORT &= ~(1 << RS);
     b0a:	28 98       	cbi	0x05, 0	; 5
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     b0c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF))) ;
     b0e:	0d b4       	in	r0, 0x2d	; 45
     b10:	07 fe       	sbrs	r0, 7
     b12:	fd cf       	rjmp	.-6      	; 0xb0e <writecommand+0x4>


void writecommand(uint8_t c) {
	RSPORT &= ~(1 << RS);
	spiwrite(c);
}
     b14:	08 95       	ret

00000b16 <displayInit>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color);

void displayInit ()
{
	SoftwareReset();
     b16:	0e 94 69 05 	call	0xad2	; 0xad2 <SoftwareReset>
	writecommand(HX8357_SWRESET);
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>

	// setextc
	writecommand(HX8357D_SETC);
     b20:	89 eb       	ldi	r24, 0xB9	; 185
     b22:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
	writedata(0xFF);
     b26:	8f ef       	ldi	r24, 0xFF	; 255
     b28:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x83);
     b2c:	83 e8       	ldi	r24, 0x83	; 131
     b2e:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x57);
     b32:	87 e5       	ldi	r24, 0x57	; 87
     b34:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
     b38:	8f e5       	ldi	r24, 0x5F	; 95
     b3a:	9a ee       	ldi	r25, 0xEA	; 234
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	81 50       	subi	r24, 0x01	; 1
     b40:	90 40       	sbci	r25, 0x00	; 0
     b42:	a0 40       	sbci	r26, 0x00	; 0
     b44:	e1 f7       	brne	.-8      	; 0xb3e <displayInit+0x28>
     b46:	00 c0       	rjmp	.+0      	; 0xb48 <displayInit+0x32>
     b48:	00 00       	nop
	_delay_ms(300);
	// setRGB which also enables SDO
	writecommand(HX8357_SETRGB);
     b4a:	83 eb       	ldi	r24, 0xB3	; 179
     b4c:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
	writedata(0x80);  //enable SDO pin!
     b50:	80 e8       	ldi	r24, 0x80	; 128
     b52:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	//    writedata(0x00);  //disable SDO pin!
	writedata(0x0);
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x06);
     b5c:	86 e0       	ldi	r24, 0x06	; 6
     b5e:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x06);
     b62:	86 e0       	ldi	r24, 0x06	; 6
     b64:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>

	writecommand(HX8357D_SETCOM);
     b68:	86 eb       	ldi	r24, 0xB6	; 182
     b6a:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
	writedata(0x25);  // -1.52V
     b6e:	85 e2       	ldi	r24, 0x25	; 37
     b70:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	
	writecommand(HX8357_SETOSC);
     b74:	80 eb       	ldi	r24, 0xB0	; 176
     b76:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
	writedata(0x68);  // Normal mode 70Hz, Idle mode 55 Hz
     b7a:	88 e6       	ldi	r24, 0x68	; 104
     b7c:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	
	writecommand(HX8357_SETPANEL); //Set Panel
     b80:	8c ec       	ldi	r24, 0xCC	; 204
     b82:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
	writedata(0x05);  // BGR, Gate direction swapped
     b86:	85 e0       	ldi	r24, 0x05	; 5
     b88:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	
	writecommand(HX8357_SETPWR1);
     b8c:	81 eb       	ldi	r24, 0xB1	; 177
     b8e:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
	writedata(0x00);  // Not deep standby
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x15);  //BT
     b98:	85 e1       	ldi	r24, 0x15	; 21
     b9a:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x1C);  //VSPR
     b9e:	8c e1       	ldi	r24, 0x1C	; 28
     ba0:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x1C);  //VSNR
     ba4:	8c e1       	ldi	r24, 0x1C	; 28
     ba6:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x83);  //AP
     baa:	83 e8       	ldi	r24, 0x83	; 131
     bac:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0xAA);  //FS
     bb0:	8a ea       	ldi	r24, 0xAA	; 170
     bb2:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	
	writecommand(HX8357D_SETSTBA);
     bb6:	80 ec       	ldi	r24, 0xC0	; 192
     bb8:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
	writedata(0x50);  //OPON normal
     bbc:	80 e5       	ldi	r24, 0x50	; 80
     bbe:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x50);  //OPON idle
     bc2:	80 e5       	ldi	r24, 0x50	; 80
     bc4:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x01);  //STBA
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x3C);  //STBA
     bce:	8c e3       	ldi	r24, 0x3C	; 60
     bd0:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x1E);  //STBA
     bd4:	8e e1       	ldi	r24, 0x1E	; 30
     bd6:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x08);  //GEN
     bda:	88 e0       	ldi	r24, 0x08	; 8
     bdc:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	
	writecommand(HX8357D_SETCYC);
     be0:	84 eb       	ldi	r24, 0xB4	; 180
     be2:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
	writedata(0x02);  //NW 0x02
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x40);  //RTN
     bec:	80 e4       	ldi	r24, 0x40	; 64
     bee:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x00);  //DIV
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x2A);  //DUM
     bf8:	8a e2       	ldi	r24, 0x2A	; 42
     bfa:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x2A);  //DUM
     bfe:	8a e2       	ldi	r24, 0x2A	; 42
     c00:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x0D);  //GDON
     c04:	8d e0       	ldi	r24, 0x0D	; 13
     c06:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x78);  //GDOFF
     c0a:	88 e7       	ldi	r24, 0x78	; 120
     c0c:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	
	writecommand(HX8357D_SETGAMMA);
     c10:	80 ee       	ldi	r24, 0xE0	; 224
     c12:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
	writedata(0x02);
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x0A);
     c1c:	8a e0       	ldi	r24, 0x0A	; 10
     c1e:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x11);
     c22:	81 e1       	ldi	r24, 0x11	; 17
     c24:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x1d);
     c28:	8d e1       	ldi	r24, 0x1D	; 29
     c2a:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x23);
     c2e:	83 e2       	ldi	r24, 0x23	; 35
     c30:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x35);
     c34:	85 e3       	ldi	r24, 0x35	; 53
     c36:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x41);
     c3a:	81 e4       	ldi	r24, 0x41	; 65
     c3c:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x4b);
     c40:	8b e4       	ldi	r24, 0x4B	; 75
     c42:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x4b);
     c46:	8b e4       	ldi	r24, 0x4B	; 75
     c48:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x42);
     c4c:	82 e4       	ldi	r24, 0x42	; 66
     c4e:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x3A);
     c52:	8a e3       	ldi	r24, 0x3A	; 58
     c54:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x27);
     c58:	87 e2       	ldi	r24, 0x27	; 39
     c5a:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x1B);
     c5e:	8b e1       	ldi	r24, 0x1B	; 27
     c60:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x08);
     c64:	88 e0       	ldi	r24, 0x08	; 8
     c66:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x09);
     c6a:	89 e0       	ldi	r24, 0x09	; 9
     c6c:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x03);
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x02);
     c76:	82 e0       	ldi	r24, 0x02	; 2
     c78:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x0A);
     c7c:	8a e0       	ldi	r24, 0x0A	; 10
     c7e:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x11);
     c82:	81 e1       	ldi	r24, 0x11	; 17
     c84:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x1d);
     c88:	8d e1       	ldi	r24, 0x1D	; 29
     c8a:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x23);
     c8e:	83 e2       	ldi	r24, 0x23	; 35
     c90:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x35);
     c94:	85 e3       	ldi	r24, 0x35	; 53
     c96:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x41);
     c9a:	81 e4       	ldi	r24, 0x41	; 65
     c9c:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x4b);
     ca0:	8b e4       	ldi	r24, 0x4B	; 75
     ca2:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x4b);
     ca6:	8b e4       	ldi	r24, 0x4B	; 75
     ca8:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x42);
     cac:	82 e4       	ldi	r24, 0x42	; 66
     cae:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x3A);
     cb2:	8a e3       	ldi	r24, 0x3A	; 58
     cb4:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x27);
     cb8:	87 e2       	ldi	r24, 0x27	; 39
     cba:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x1B);
     cbe:	8b e1       	ldi	r24, 0x1B	; 27
     cc0:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x08);
     cc4:	88 e0       	ldi	r24, 0x08	; 8
     cc6:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x09);
     cca:	89 e0       	ldi	r24, 0x09	; 9
     ccc:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x03);
     cd0:	83 e0       	ldi	r24, 0x03	; 3
     cd2:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x00);
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x01);
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	
	writecommand(HX8357_COLMOD);
     ce2:	8a e3       	ldi	r24, 0x3A	; 58
     ce4:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
	writedata(0x55);  // 16 bit
     ce8:	85 e5       	ldi	r24, 0x55	; 85
     cea:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	
	writecommand(HX8357_MADCTL);
     cee:	86 e3       	ldi	r24, 0x36	; 54
     cf0:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
	writedata(0xC0);
     cf4:	80 ec       	ldi	r24, 0xC0	; 192
     cf6:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	
	writecommand(HX8357_TEON);  // TE off
     cfa:	85 e3       	ldi	r24, 0x35	; 53
     cfc:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
	writedata(0x00);
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	
	writecommand(HX8357_TEARLINE);  // tear line
     d06:	84 e4       	ldi	r24, 0x44	; 68
     d08:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
	writedata(0x00);
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(0x02);
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	
	writecommand(HX8357_SLPOUT); //Exit Sleep
     d18:	81 e1       	ldi	r24, 0x11	; 17
     d1a:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
     d1e:	ab e7       	ldi	r26, 0x7B	; 123
     d20:	b2 e9       	ldi	r27, 0x92	; 146
     d22:	11 97       	sbiw	r26, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <displayInit+0x20c>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <displayInit+0x212>
     d28:	00 00       	nop
	_delay_ms(150);
	
	writecommand(HX8357_DISPON);  // display on
     d2a:	89 e2       	ldi	r24, 0x29	; 41
     d2c:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
     d30:	83 ed       	ldi	r24, 0xD3	; 211
     d32:	90 e3       	ldi	r25, 0x30	; 48
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <displayInit+0x21e>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <displayInit+0x224>
     d3a:	00 00       	nop
     d3c:	a7 ea       	ldi	r26, 0xA7	; 167
     d3e:	b1 e6       	ldi	r27, 0x61	; 97
     d40:	11 97       	sbiw	r26, 0x01	; 1
     d42:	f1 f7       	brne	.-4      	; 0xd40 <displayInit+0x22a>
     d44:	00 c0       	rjmp	.+0      	; 0xd46 <displayInit+0x230>
     d46:	00 00       	nop
	_delay_ms(50);
	_delay_ms(100);
	writecommand(HX8357B_NORON);  // normal display on
     d48:	83 e1       	ldi	r24, 0x13	; 19
     d4a:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
     d4e:	83 ec       	ldi	r24, 0xC3	; 195
     d50:	99 e0       	ldi	r25, 0x09	; 9
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	f1 f7       	brne	.-4      	; 0xd52 <displayInit+0x23c>
     d56:	00 c0       	rjmp	.+0      	; 0xd58 <displayInit+0x242>
     d58:	00 00       	nop
	_delay_ms(10);
	
}
     d5a:	08 95       	ret

00000d5c <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
     d5c:	cf 92       	push	r12
     d5e:	df 92       	push	r13
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	f8 2e       	mov	r15, r24
     d6e:	e9 2e       	mov	r14, r25
     d70:	c6 2f       	mov	r28, r22
     d72:	d7 2f       	mov	r29, r23
     d74:	14 2f       	mov	r17, r20
     d76:	05 2f       	mov	r16, r21
     d78:	c2 2e       	mov	r12, r18
     d7a:	d3 2e       	mov	r13, r19

	writecommand(HX8357_CASET); // Column addr set
     d7c:	8a e2       	ldi	r24, 0x2A	; 42
     d7e:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
	writedata(x0 >> 8);
     d82:	8e 2d       	mov	r24, r14
     d84:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(x0 & 0xFF);     // XSTART
     d88:	8f 2d       	mov	r24, r15
     d8a:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(x1 >> 8);
     d8e:	80 2f       	mov	r24, r16
     d90:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(x1 & 0xFF);     // XEND
     d94:	81 2f       	mov	r24, r17
     d96:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>

	writecommand(HX8357_PASET); // Row addr set
     d9a:	8b e2       	ldi	r24, 0x2B	; 43
     d9c:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
	writedata(y0>>8);
     da0:	8d 2f       	mov	r24, r29
     da2:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(y0);     // YSTART
     da6:	8c 2f       	mov	r24, r28
     da8:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(y1>>8);
     dac:	8d 2d       	mov	r24, r13
     dae:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>
	writedata(y1);     // YEND
     db2:	8c 2d       	mov	r24, r12
     db4:	0e 94 7f 05 	call	0xafe	; 0xafe <writedata>

	writecommand(HX8357_RAMWR); // write to RAM
     db8:	8c e2       	ldi	r24, 0x2C	; 44
     dba:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
}
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	08 95       	ret

00000dd0 <drawPixel>:
	
		fillRect(0, 0, width, height, color);
	
}

void drawPixel(int16_t x, int16_t y, uint16_t color) {
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	d4 2f       	mov	r29, r20
     dd6:	c5 2f       	mov	r28, r21
	//if((x < 0) ||(x >= width) || (y < 0) || (y >= height)) return;

	setAddrWindow(x,y,x+1,y+1);
     dd8:	ac 01       	movw	r20, r24
     dda:	4f 5f       	subi	r20, 0xFF	; 255
     ddc:	5f 4f       	sbci	r21, 0xFF	; 255
     dde:	9b 01       	movw	r18, r22
     de0:	2f 5f       	subi	r18, 0xFF	; 255
     de2:	3f 4f       	sbci	r19, 0xFF	; 255
     de4:	0e 94 ae 06 	call	0xd5c	; 0xd5c <setAddrWindow>
	
	//RSPORT |= (1 << RS);
	RSPORT |= (1 << RS);
     de8:	28 9a       	sbi	0x05, 0	; 5
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     dea:	ce bd       	out	0x2e, r28	; 46
	while (!(SPSR & (1 << SPIF))) ;
     dec:	0d b4       	in	r0, 0x2d	; 45
     dee:	07 fe       	sbrs	r0, 7
     df0:	fd cf       	rjmp	.-6      	; 0xdec <drawPixel+0x1c>
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     df2:	de bd       	out	0x2e, r29	; 46
	while (!(SPSR & (1 << SPIF))) ;
     df4:	0d b4       	in	r0, 0x2d	; 45
     df6:	07 fe       	sbrs	r0, 7
     df8:	fd cf       	rjmp	.-6      	; 0xdf4 <drawPixel+0x24>

	spiwrite(color >> 8);
	spiwrite(color);

}
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <drawFastVLine>:

void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	fc 01       	movw	r30, r24
     e0a:	8a 01       	movw	r16, r20
     e0c:	d2 2f       	mov	r29, r18
     e0e:	c3 2f       	mov	r28, r19
	// Rudimentary clipping
	if((x >= width) || (y >= height)) return;
     e10:	21 e0       	ldi	r18, 0x01	; 1
     e12:	80 34       	cpi	r24, 0x40	; 64
     e14:	92 07       	cpc	r25, r18
     e16:	6c f5       	brge	.+90     	; 0xe72 <drawFastVLine+0x72>
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	60 3e       	cpi	r22, 0xE0	; 224
     e1c:	78 07       	cpc	r23, r24
     e1e:	4c f5       	brge	.+82     	; 0xe72 <drawFastVLine+0x72>
	if((y+h-1) >= height) h = height-y;
     e20:	cb 01       	movw	r24, r22
     e22:	84 0f       	add	r24, r20
     e24:	95 1f       	adc	r25, r21
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	21 e0       	ldi	r18, 0x01	; 1
     e2a:	80 3e       	cpi	r24, 0xE0	; 224
     e2c:	92 07       	cpc	r25, r18
     e2e:	2c f0       	brlt	.+10     	; 0xe3a <drawFastVLine+0x3a>
     e30:	80 ee       	ldi	r24, 0xE0	; 224
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	8c 01       	movw	r16, r24
     e36:	06 1b       	sub	r16, r22
     e38:	17 0b       	sbc	r17, r23
	setAddrWindow(x, y, x, y+h-1);
     e3a:	9b 01       	movw	r18, r22
     e3c:	20 0f       	add	r18, r16
     e3e:	31 1f       	adc	r19, r17
     e40:	21 50       	subi	r18, 0x01	; 1
     e42:	30 40       	sbci	r19, 0x00	; 0
     e44:	8e 2f       	mov	r24, r30
     e46:	9f 2f       	mov	r25, r31
     e48:	4e 2f       	mov	r20, r30
     e4a:	5f 2f       	mov	r21, r31
     e4c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <setAddrWindow>

	uint8_t hi = color >> 8, lo = color;
	RSPORT |= (1 << RS);
     e50:	28 9a       	sbi	0x05, 0	; 5

	while (h--) {
     e52:	0a c0       	rjmp	.+20     	; 0xe68 <drawFastVLine+0x68>
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     e54:	ce bd       	out	0x2e, r28	; 46
	while (!(SPSR & (1 << SPIF))) ;
     e56:	0d b4       	in	r0, 0x2d	; 45
     e58:	07 fe       	sbrs	r0, 7
     e5a:	fd cf       	rjmp	.-6      	; 0xe56 <drawFastVLine+0x56>
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     e5c:	de bd       	out	0x2e, r29	; 46
	while (!(SPSR & (1 << SPIF))) ;
     e5e:	0d b4       	in	r0, 0x2d	; 45
     e60:	07 fe       	sbrs	r0, 7
     e62:	fd cf       	rjmp	.-6      	; 0xe5e <drawFastVLine+0x5e>
     e64:	01 50       	subi	r16, 0x01	; 1
     e66:	10 40       	sbci	r17, 0x00	; 0
     e68:	01 15       	cp	r16, r1
     e6a:	11 05       	cpc	r17, r1
     e6c:	99 f7       	brne	.-26     	; 0xe54 <drawFastVLine+0x54>
		spiwrite(hi);
		spiwrite(lo);
	}
	RSPORT |= (0 << RS);
     e6e:	85 b1       	in	r24, 0x05	; 5
     e70:	85 b9       	out	0x05, r24	; 5
}
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	08 95       	ret

00000e7c <drawFastHLine>:

void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	fb 01       	movw	r30, r22
     e86:	8a 01       	movw	r16, r20
     e88:	d2 2f       	mov	r29, r18
     e8a:	c3 2f       	mov	r28, r19

    // Rudimentary clipping
    if((x >= width) || (y >= height)) return;
     e8c:	21 e0       	ldi	r18, 0x01	; 1
     e8e:	80 34       	cpi	r24, 0x40	; 64
     e90:	92 07       	cpc	r25, r18
     e92:	64 f5       	brge	.+88     	; 0xeec <drawFastHLine+0x70>
     e94:	41 e0       	ldi	r20, 0x01	; 1
     e96:	60 3e       	cpi	r22, 0xE0	; 224
     e98:	74 07       	cpc	r23, r20
     e9a:	44 f5       	brge	.+80     	; 0xeec <drawFastHLine+0x70>
    if((x+w-1) >= width)  w = width-x;
     e9c:	9c 01       	movw	r18, r24
     e9e:	20 0f       	add	r18, r16
     ea0:	31 1f       	adc	r19, r17
     ea2:	21 50       	subi	r18, 0x01	; 1
     ea4:	30 40       	sbci	r19, 0x00	; 0
     ea6:	41 e0       	ldi	r20, 0x01	; 1
     ea8:	20 34       	cpi	r18, 0x40	; 64
     eaa:	34 07       	cpc	r19, r20
     eac:	2c f0       	brlt	.+10     	; 0xeb8 <drawFastHLine+0x3c>
     eae:	20 e4       	ldi	r18, 0x40	; 64
     eb0:	31 e0       	ldi	r19, 0x01	; 1
     eb2:	89 01       	movw	r16, r18
     eb4:	08 1b       	sub	r16, r24
     eb6:	19 0b       	sbc	r17, r25
    setAddrWindow(x, y, x+w-1, y);
     eb8:	ac 01       	movw	r20, r24
     eba:	40 0f       	add	r20, r16
     ebc:	51 1f       	adc	r21, r17
     ebe:	41 50       	subi	r20, 0x01	; 1
     ec0:	50 40       	sbci	r21, 0x00	; 0
     ec2:	6e 2f       	mov	r22, r30
     ec4:	7f 2f       	mov	r23, r31
     ec6:	2e 2f       	mov	r18, r30
     ec8:	3f 2f       	mov	r19, r31
     eca:	0e 94 ae 06 	call	0xd5c	; 0xd5c <setAddrWindow>

    uint8_t hi = color >> 8, lo = color;
    RSPORT |= (1 << RS);
     ece:	28 9a       	sbi	0x05, 0	; 5
    while (w--) {
     ed0:	0a c0       	rjmp	.+20     	; 0xee6 <drawFastHLine+0x6a>
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     ed2:	ce bd       	out	0x2e, r28	; 46
	while (!(SPSR & (1 << SPIF))) ;
     ed4:	0d b4       	in	r0, 0x2d	; 45
     ed6:	07 fe       	sbrs	r0, 7
     ed8:	fd cf       	rjmp	.-6      	; 0xed4 <drawFastHLine+0x58>
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     eda:	de bd       	out	0x2e, r29	; 46
	while (!(SPSR & (1 << SPIF))) ;
     edc:	0d b4       	in	r0, 0x2d	; 45
     ede:	07 fe       	sbrs	r0, 7
     ee0:	fd cf       	rjmp	.-6      	; 0xedc <drawFastHLine+0x60>
     ee2:	01 50       	subi	r16, 0x01	; 1
     ee4:	10 40       	sbci	r17, 0x00	; 0
     ee6:	01 15       	cp	r16, r1
     ee8:	11 05       	cpc	r17, r1
     eea:	99 f7       	brne	.-26     	; 0xed2 <drawFastHLine+0x56>
        spiwrite(hi);
        spiwrite(lo);
    }
}
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	08 95       	ret

00000ef6 <fillRect>:

// fill a rectangle
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h,uint16_t color) {
     ef6:	ef 92       	push	r14
     ef8:	ff 92       	push	r15
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	fc 01       	movw	r30, r24
     f04:	ea 01       	movw	r28, r20
     f06:	79 01       	movw	r14, r18
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= width) || (y >= height)) return;
     f08:	21 e0       	ldi	r18, 0x01	; 1
     f0a:	80 34       	cpi	r24, 0x40	; 64
     f0c:	92 07       	cpc	r25, r18
     f0e:	0c f0       	brlt	.+2      	; 0xf12 <fillRect+0x1c>
     f10:	4a c0       	rjmp	.+148    	; 0xfa6 <fillRect+0xb0>
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	60 3e       	cpi	r22, 0xE0	; 224
     f16:	78 07       	cpc	r23, r24
     f18:	0c f0       	brlt	.+2      	; 0xf1c <fillRect+0x26>
     f1a:	45 c0       	rjmp	.+138    	; 0xfa6 <fillRect+0xb0>
	if((x + w - 1) >= width)  w = width  - x;
     f1c:	cf 01       	movw	r24, r30
     f1e:	84 0f       	add	r24, r20
     f20:	95 1f       	adc	r25, r21
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	21 e0       	ldi	r18, 0x01	; 1
     f26:	80 34       	cpi	r24, 0x40	; 64
     f28:	92 07       	cpc	r25, r18
     f2a:	24 f0       	brlt	.+8      	; 0xf34 <fillRect+0x3e>
     f2c:	c0 e4       	ldi	r28, 0x40	; 64
     f2e:	d1 e0       	ldi	r29, 0x01	; 1
     f30:	ce 1b       	sub	r28, r30
     f32:	df 0b       	sbc	r29, r31
	if((y + h - 1) >= height) h = height - y;
     f34:	cb 01       	movw	r24, r22
     f36:	8e 0d       	add	r24, r14
     f38:	9f 1d       	adc	r25, r15
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	21 e0       	ldi	r18, 0x01	; 1
     f3e:	80 3e       	cpi	r24, 0xE0	; 224
     f40:	92 07       	cpc	r25, r18
     f42:	2c f0       	brlt	.+10     	; 0xf4e <fillRect+0x58>
     f44:	80 ee       	ldi	r24, 0xE0	; 224
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	7c 01       	movw	r14, r24
     f4a:	e6 1a       	sub	r14, r22
     f4c:	f7 0a       	sbc	r15, r23

	setAddrWindow(x, y, x+w-1, y+h-1);
     f4e:	cf 01       	movw	r24, r30
     f50:	8c 0f       	add	r24, r28
     f52:	9d 1f       	adc	r25, r29
     f54:	ac 01       	movw	r20, r24
     f56:	41 50       	subi	r20, 0x01	; 1
     f58:	50 40       	sbci	r21, 0x00	; 0
     f5a:	9b 01       	movw	r18, r22
     f5c:	2e 0d       	add	r18, r14
     f5e:	3f 1d       	adc	r19, r15
     f60:	21 50       	subi	r18, 0x01	; 1
     f62:	30 40       	sbci	r19, 0x00	; 0
     f64:	cf 01       	movw	r24, r30
     f66:	0e 94 ae 06 	call	0xd5c	; 0xd5c <setAddrWindow>

	uint8_t hi = color >> 8, lo = color;
	RSPORT |= (1 << RS);
     f6a:	28 9a       	sbi	0x05, 0	; 5

	for(y=h; y>0; y--) {
     f6c:	1e 14       	cp	r1, r14
     f6e:	1f 04       	cpc	r1, r15
     f70:	a4 f0       	brlt	.+40     	; 0xf9a <fillRect+0xa4>
     f72:	19 c0       	rjmp	.+50     	; 0xfa6 <fillRect+0xb0>
		for(x=w; x>0; x--) {
     f74:	83 2f       	mov	r24, r19
     f76:	92 2f       	mov	r25, r18
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     f78:	1e bd       	out	0x2e, r17	; 46
	while (!(SPSR & (1 << SPIF))) ;
     f7a:	0d b4       	in	r0, 0x2d	; 45
     f7c:	07 fe       	sbrs	r0, 7
     f7e:	fd cf       	rjmp	.-6      	; 0xf7a <fillRect+0x84>
	RSPORT |= (1 << RES);
	_delay_ms(150);
}

inline void spiwrite(uint8_t c) {
	SPDR = c;
     f80:	0e bd       	out	0x2e, r16	; 46
	while (!(SPSR & (1 << SPIF))) ;
     f82:	0d b4       	in	r0, 0x2d	; 45
     f84:	07 fe       	sbrs	r0, 7
     f86:	fd cf       	rjmp	.-6      	; 0xf82 <fillRect+0x8c>
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	b1 f7       	brne	.-20     	; 0xf78 <fillRect+0x82>
	setAddrWindow(x, y, x+w-1, y+h-1);

	uint8_t hi = color >> 8, lo = color;
	RSPORT |= (1 << RS);

	for(y=h; y>0; y--) {
     f8c:	08 94       	sec
     f8e:	e1 08       	sbc	r14, r1
     f90:	f1 08       	sbc	r15, r1
     f92:	e1 14       	cp	r14, r1
     f94:	f1 04       	cpc	r15, r1
     f96:	19 f4       	brne	.+6      	; 0xf9e <fillRect+0xa8>
     f98:	06 c0       	rjmp	.+12     	; 0xfa6 <fillRect+0xb0>
		for(x=w; x>0; x--) {
     f9a:	3c 2f       	mov	r19, r28
     f9c:	2d 2f       	mov	r18, r29
     f9e:	1c 16       	cp	r1, r28
     fa0:	1d 06       	cpc	r1, r29
     fa2:	44 f3       	brlt	.-48     	; 0xf74 <fillRect+0x7e>
     fa4:	f3 cf       	rjmp	.-26     	; 0xf8c <fillRect+0x96>
			spiwrite(hi);
			spiwrite(lo);
		}
	}
}
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	08 95       	ret

00000fb4 <fillScreen>:

inline uint16_t color565(uint8_t r, uint8_t g, uint8_t b) {
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

void fillScreen(uint16_t color) {
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	8c 01       	movw	r16, r24
	
		fillRect(0, 0, width, height, color);
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	40 e4       	ldi	r20, 0x40	; 64
     fc4:	51 e0       	ldi	r21, 0x01	; 1
     fc6:	20 ee       	ldi	r18, 0xE0	; 224
     fc8:	31 e0       	ldi	r19, 0x01	; 1
     fca:	0e 94 7b 07 	call	0xef6	; 0xef6 <fillRect>
	
}
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	08 95       	ret

00000fd4 <drawChar>:
			spiwrite(lo);
		}
	}
}
// draw a character
void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size) {
     fd4:	2f 92       	push	r2
     fd6:	3f 92       	push	r3
     fd8:	4f 92       	push	r4
     fda:	5f 92       	push	r5
     fdc:	6f 92       	push	r6
     fde:	7f 92       	push	r7
     fe0:	8f 92       	push	r8
     fe2:	9f 92       	push	r9
     fe4:	af 92       	push	r10
     fe6:	bf 92       	push	r11
     fe8:	cf 92       	push	r12
     fea:	df 92       	push	r13
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	2c 97       	sbiw	r28, 0x0c	; 12
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	9a 83       	std	Y+2, r25	; 0x02
    100a:	89 83       	std	Y+1, r24	; 0x01
    100c:	7c 83       	std	Y+4, r23	; 0x04
    100e:	6b 83       	std	Y+3, r22	; 0x03
    1010:	49 01       	movw	r8, r18
	for (uint8_t i =0; i<5; i++ ) {
		uint8_t line = pgm_read_byte(font+(c*5)+i);
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	ca 01       	movw	r24, r20
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	9c 01       	movw	r18, r24
    1020:	24 0f       	add	r18, r20
    1022:	35 1f       	adc	r19, r21
    1024:	38 87       	std	Y+8, r19	; 0x08
    1026:	2f 83       	std	Y+7, r18	; 0x07
    1028:	0f 2e       	mov	r0, r31
    102a:	f5 e0       	ldi	r31, 0x05	; 5
    102c:	5f 2e       	mov	r5, r31
    102e:	f0 2d       	mov	r31, r0
		}
	}
}
// draw a character
void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size) {
	for (uint8_t i =0; i<5; i++ ) {
    1030:	44 24       	eor	r4, r4
		for (uint8_t j = 0; j<8; j++) {
			if (line & 0x1) {
				if (size == 1) // default size
				drawPixel(x+i, y+j, color);
				else {  // big size
					fillRect(x+i*size, y+j*size, size, size, color);
    1032:	40 2f       	mov	r20, r16
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	5e 83       	std	Y+6, r21	; 0x06
    1038:	4d 83       	std	Y+5, r20	; 0x05
			spiwrite(lo);
		}
	}
}
// draw a character
void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size) {
    103a:	5a 01       	movw	r10, r20
    103c:	5b 81       	ldd	r21, Y+3	; 0x03
    103e:	59 87       	std	Y+9, r21	; 0x09
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	8a 87       	std	Y+10, r24	; 0x0a
	for (uint8_t i =0; i<5; i++ ) {
		uint8_t line = pgm_read_byte(font+(c*5)+i);
    1044:	24 2d       	mov	r18, r4
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	8f 81       	ldd	r24, Y+7	; 0x07
    104a:	98 85       	ldd	r25, Y+8	; 0x08
    104c:	82 0f       	add	r24, r18
    104e:	93 1f       	adc	r25, r19
    1050:	84 57       	subi	r24, 0x74	; 116
    1052:	9f 4f       	sbci	r25, 0xFF	; 255
    1054:	fc 01       	movw	r30, r24
    1056:	14 91       	lpm	r17, Z
		for (uint8_t j = 0; j<8; j++) {
			if (line & 0x1) {
				if (size == 1) // default size
				drawPixel(x+i, y+j, color);
				else {  // big size
					fillRect(x+i*size, y+j*size, size, size, color);
    1058:	4d 81       	ldd	r20, Y+5	; 0x05
    105a:	5e 81       	ldd	r21, Y+6	; 0x06
    105c:	24 9f       	mul	r18, r20
    105e:	c0 01       	movw	r24, r0
    1060:	25 9f       	mul	r18, r21
    1062:	90 0d       	add	r25, r0
    1064:	34 9f       	mul	r19, r20
    1066:	90 0d       	add	r25, r0
    1068:	11 24       	eor	r1, r1
    106a:	69 80       	ldd	r6, Y+1	; 0x01
    106c:	7a 80       	ldd	r7, Y+2	; 0x02
    106e:	68 0e       	add	r6, r24
    1070:	79 1e       	adc	r7, r25
			spiwrite(lo);
		}
	}
}
// draw a character
void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size) {
    1072:	c9 84       	ldd	r12, Y+9	; 0x09
    1074:	da 84       	ldd	r13, Y+10	; 0x0a
    1076:	ee 24       	eor	r14, r14
    1078:	ff 24       	eor	r15, r15
	for (uint8_t i =0; i<5; i++ ) {
		uint8_t line = pgm_read_byte(font+(c*5)+i);
		for (uint8_t j = 0; j<8; j++) {
			if (line & 0x1) {
				if (size == 1) // default size
				drawPixel(x+i, y+j, color);
    107a:	29 80       	ldd	r2, Y+1	; 0x01
    107c:	3a 80       	ldd	r3, Y+2	; 0x02
    107e:	22 0e       	add	r2, r18
    1080:	33 1e       	adc	r3, r19
    1082:	1b 87       	std	Y+11, r17	; 0x0b
    1084:	0c 87       	std	Y+12, r16	; 0x0c
// draw a character
void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size) {
	for (uint8_t i =0; i<5; i++ ) {
		uint8_t line = pgm_read_byte(font+(c*5)+i);
		for (uint8_t j = 0; j<8; j++) {
			if (line & 0x1) {
    1086:	5b 85       	ldd	r21, Y+11	; 0x0b
    1088:	50 ff       	sbrs	r21, 0
    108a:	13 c0       	rjmp	.+38     	; 0x10b2 <drawChar+0xde>
				if (size == 1) // default size
    108c:	8c 85       	ldd	r24, Y+12	; 0x0c
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	49 f4       	brne	.+18     	; 0x10a4 <drawChar+0xd0>
			spiwrite(lo);
		}
	}
}
// draw a character
void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size) {
    1092:	6b 81       	ldd	r22, Y+3	; 0x03
    1094:	7c 81       	ldd	r23, Y+4	; 0x04
    1096:	6e 0d       	add	r22, r14
    1098:	7f 1d       	adc	r23, r15
	for (uint8_t i =0; i<5; i++ ) {
		uint8_t line = pgm_read_byte(font+(c*5)+i);
		for (uint8_t j = 0; j<8; j++) {
			if (line & 0x1) {
				if (size == 1) // default size
				drawPixel(x+i, y+j, color);
    109a:	c1 01       	movw	r24, r2
    109c:	a4 01       	movw	r20, r8
    109e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
    10a2:	07 c0       	rjmp	.+14     	; 0x10b2 <drawChar+0xde>
				else {  // big size
					fillRect(x+i*size, y+j*size, size, size, color);
    10a4:	c3 01       	movw	r24, r6
    10a6:	b6 01       	movw	r22, r12
    10a8:	a5 01       	movw	r20, r10
    10aa:	95 01       	movw	r18, r10
    10ac:	84 01       	movw	r16, r8
    10ae:	0e 94 7b 07 	call	0xef6	; 0xef6 <fillRect>
				}
			}
			line >>= 1;
    10b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    10b4:	96 95       	lsr	r25
    10b6:	9b 87       	std	Y+11, r25	; 0x0b
    10b8:	08 94       	sec
    10ba:	e1 1c       	adc	r14, r1
    10bc:	f1 1c       	adc	r15, r1
    10be:	ca 0c       	add	r12, r10
    10c0:	db 1c       	adc	r13, r11
}
// draw a character
void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size) {
	for (uint8_t i =0; i<5; i++ ) {
		uint8_t line = pgm_read_byte(font+(c*5)+i);
		for (uint8_t j = 0; j<8; j++) {
    10c2:	e8 e0       	ldi	r30, 0x08	; 8
    10c4:	ee 16       	cp	r14, r30
    10c6:	f1 04       	cpc	r15, r1
    10c8:	f1 f6       	brne	.-68     	; 0x1086 <drawChar+0xb2>
    10ca:	0c 85       	ldd	r16, Y+12	; 0x0c
		}
	}
}
// draw a character
void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint8_t size) {
	for (uint8_t i =0; i<5; i++ ) {
    10cc:	43 94       	inc	r4
    10ce:	5a 94       	dec	r5
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <drawChar+0x100>
    10d2:	b8 cf       	rjmp	.-144    	; 0x1044 <drawChar+0x70>
				}
			}
			line >>= 1;
		}
	}
}
    10d4:	2c 96       	adiw	r28, 0x0c	; 12
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	ff 90       	pop	r15
    10ea:	ef 90       	pop	r14
    10ec:	df 90       	pop	r13
    10ee:	cf 90       	pop	r12
    10f0:	bf 90       	pop	r11
    10f2:	af 90       	pop	r10
    10f4:	9f 90       	pop	r9
    10f6:	8f 90       	pop	r8
    10f8:	7f 90       	pop	r7
    10fa:	6f 90       	pop	r6
    10fc:	5f 90       	pop	r5
    10fe:	4f 90       	pop	r4
    1100:	3f 90       	pop	r3
    1102:	2f 90       	pop	r2
    1104:	08 95       	ret

00001106 <drawString>:

void drawString(uint16_t x, uint16_t y, char *c, uint16_t color, uint8_t size) {
    1106:	6f 92       	push	r6
    1108:	7f 92       	push	r7
    110a:	8f 92       	push	r8
    110c:	9f 92       	push	r9
    110e:	af 92       	push	r10
    1110:	bf 92       	push	r11
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	ec 01       	movw	r28, r24
    1124:	6b 01       	movw	r12, r22
    1126:	49 01       	movw	r8, r18
    1128:	10 2f       	mov	r17, r16
	while (c[0] != 0) {
		drawChar(x, y, c[0], color, size);
		x += size*6;
    112a:	80 2f       	mov	r24, r16
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9c 01       	movw	r18, r24
    1130:	22 0f       	add	r18, r18
    1132:	33 1f       	adc	r19, r19
    1134:	82 0f       	add	r24, r18
    1136:	93 1f       	adc	r25, r19
    1138:	5c 01       	movw	r10, r24
    113a:	aa 0c       	add	r10, r10
    113c:	bb 1c       	adc	r11, r11
    113e:	e4 2e       	mov	r14, r20
    1140:	f5 2e       	mov	r15, r21
		c++;
		if (x + 5 >= width) {
			y += 10;
			x = 0;
    1142:	66 24       	eor	r6, r6
    1144:	77 24       	eor	r7, r7
		}
	}
}

void drawString(uint16_t x, uint16_t y, char *c, uint16_t color, uint8_t size) {
	while (c[0] != 0) {
    1146:	13 c0       	rjmp	.+38     	; 0x116e <drawString+0x68>
		drawChar(x, y, c[0], color, size);
    1148:	ce 01       	movw	r24, r28
    114a:	b6 01       	movw	r22, r12
    114c:	94 01       	movw	r18, r8
    114e:	01 2f       	mov	r16, r17
    1150:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <drawChar>
		x += size*6;
    1154:	ca 0d       	add	r28, r10
    1156:	db 1d       	adc	r29, r11
		c++;
		if (x + 5 >= width) {
    1158:	ce 01       	movw	r24, r28
    115a:	05 96       	adiw	r24, 0x05	; 5
    115c:	21 e0       	ldi	r18, 0x01	; 1
    115e:	80 34       	cpi	r24, 0x40	; 64
    1160:	92 07       	cpc	r25, r18
    1162:	28 f0       	brcs	.+10     	; 0x116e <drawString+0x68>
			y += 10;
    1164:	8a e0       	ldi	r24, 0x0A	; 10
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	c8 0e       	add	r12, r24
    116a:	d9 1e       	adc	r13, r25
			x = 0;
    116c:	e3 01       	movw	r28, r6
		}
	}
}

void drawString(uint16_t x, uint16_t y, char *c, uint16_t color, uint8_t size) {
	while (c[0] != 0) {
    116e:	f7 01       	movw	r30, r14
    1170:	41 91       	ld	r20, Z+
    1172:	7f 01       	movw	r14, r30
    1174:	44 23       	and	r20, r20
    1176:	41 f7       	brne	.-48     	; 0x1148 <drawString+0x42>
		if (x + 5 >= width) {
			y += 10;
			x = 0;
		}
	}
}
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	ff 90       	pop	r15
    1182:	ef 90       	pop	r14
    1184:	df 90       	pop	r13
    1186:	cf 90       	pop	r12
    1188:	bf 90       	pop	r11
    118a:	af 90       	pop	r10
    118c:	9f 90       	pop	r9
    118e:	8f 90       	pop	r8
    1190:	7f 90       	pop	r7
    1192:	6f 90       	pop	r6
    1194:	08 95       	ret

00001196 <invertDisplay>:

void invertDisplay (bool i) 
{
	writecommand(i ? HX8357_INVON : HX8357_INVOFF);
    1196:	88 23       	and	r24, r24
    1198:	11 f0       	breq	.+4      	; 0x119e <invertDisplay+0x8>
    119a:	81 e2       	ldi	r24, 0x21	; 33
    119c:	01 c0       	rjmp	.+2      	; 0x11a0 <invertDisplay+0xa>
    119e:	80 e2       	ldi	r24, 0x20	; 32
    11a0:	0e 94 85 05 	call	0xb0a	; 0xb0a <writecommand>
}
    11a4:	08 95       	ret

000011a6 <drawCircle>:

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
    11a6:	2f 92       	push	r2
    11a8:	3f 92       	push	r3
    11aa:	4f 92       	push	r4
    11ac:	5f 92       	push	r5
    11ae:	6f 92       	push	r6
    11b0:	7f 92       	push	r7
    11b2:	8f 92       	push	r8
    11b4:	9f 92       	push	r9
    11b6:	af 92       	push	r10
    11b8:	bf 92       	push	r11
    11ba:	cf 92       	push	r12
    11bc:	df 92       	push	r13
    11be:	ef 92       	push	r14
    11c0:	ff 92       	push	r15
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <drawCircle+0x26>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <drawCircle+0x28>
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <drawCircle+0x2a>
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	4c 01       	movw	r8, r24
    11d6:	5b 01       	movw	r10, r22
    11d8:	7a 01       	movw	r14, r20
    11da:	69 01       	movw	r12, r18
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x = 0;
	int16_t y = r;

	drawPixel(x0  , y0+r, color);
    11dc:	64 0f       	add	r22, r20
    11de:	75 1f       	adc	r23, r21
    11e0:	a9 01       	movw	r20, r18
    11e2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
	drawPixel(x0  , y0-r, color);
    11e6:	b5 01       	movw	r22, r10
    11e8:	6e 19       	sub	r22, r14
    11ea:	7f 09       	sbc	r23, r15
    11ec:	c4 01       	movw	r24, r8
    11ee:	a6 01       	movw	r20, r12
    11f0:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
	drawPixel(x0+r, y0  , color);
    11f4:	c4 01       	movw	r24, r8
    11f6:	8e 0d       	add	r24, r14
    11f8:	9f 1d       	adc	r25, r15
    11fa:	b5 01       	movw	r22, r10
    11fc:	a6 01       	movw	r20, r12
    11fe:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
	drawPixel(x0-r, y0  , color);
    1202:	c4 01       	movw	r24, r8
    1204:	8e 19       	sub	r24, r14
    1206:	9f 09       	sbc	r25, r15
    1208:	b5 01       	movw	r22, r10
    120a:	a6 01       	movw	r20, r12
    120c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>

	while (x<y) {
    1210:	1e 14       	cp	r1, r14
    1212:	1f 04       	cpc	r1, r15
    1214:	0c f0       	brlt	.+2      	; 0x1218 <drawCircle+0x72>
    1216:	7c c0       	rjmp	.+248    	; 0x1310 <drawCircle+0x16a>
{
	writecommand(i ? HX8357_INVON : HX8357_INVOFF);
}

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
	int16_t f = 1 - r;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	3c 01       	movw	r6, r24
    121e:	6e 18       	sub	r6, r14
    1220:	7f 08       	sbc	r7, r15
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
    1222:	88 27       	eor	r24, r24
    1224:	99 27       	eor	r25, r25
    1226:	8e 19       	sub	r24, r14
    1228:	9f 09       	sbc	r25, r15
    122a:	9c 01       	movw	r18, r24
    122c:	22 0f       	add	r18, r18
    122e:	33 1f       	adc	r19, r19
    1230:	3c 83       	std	Y+4, r19	; 0x04
    1232:	2b 83       	std	Y+3, r18	; 0x03
	int16_t x = 0;
    1234:	00 e0       	ldi	r16, 0x00	; 0
    1236:	10 e0       	ldi	r17, 0x00	; 0
	writecommand(i ? HX8357_INVON : HX8357_INVOFF);
}

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
	int16_t f = 1 - r;
	int16_t ddF_x = 1;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	9a 83       	std	Y+2, r25	; 0x02
    123e:	89 83       	std	Y+1, r24	; 0x01
	drawPixel(x0  , y0-r, color);
	drawPixel(x0+r, y0  , color);
	drawPixel(x0-r, y0  , color);

	while (x<y) {
		if (f >= 0) {
    1240:	77 20       	and	r7, r7
    1242:	54 f0       	brlt	.+20     	; 0x1258 <drawCircle+0xb2>
			y--;
    1244:	08 94       	sec
    1246:	e1 08       	sbc	r14, r1
    1248:	f1 08       	sbc	r15, r1
			ddF_y += 2;
    124a:	eb 81       	ldd	r30, Y+3	; 0x03
    124c:	fc 81       	ldd	r31, Y+4	; 0x04
    124e:	32 96       	adiw	r30, 0x02	; 2
    1250:	fc 83       	std	Y+4, r31	; 0x04
    1252:	eb 83       	std	Y+3, r30	; 0x03
			f += ddF_y;
    1254:	6e 0e       	add	r6, r30
    1256:	7f 1e       	adc	r7, r31
		}
		x++;
    1258:	0f 5f       	subi	r16, 0xFF	; 255
    125a:	1f 4f       	sbci	r17, 0xFF	; 255
		ddF_x += 2;
    125c:	29 81       	ldd	r18, Y+1	; 0x01
    125e:	3a 81       	ldd	r19, Y+2	; 0x02
    1260:	2e 5f       	subi	r18, 0xFE	; 254
    1262:	3f 4f       	sbci	r19, 0xFF	; 255
    1264:	3a 83       	std	Y+2, r19	; 0x02
    1266:	29 83       	std	Y+1, r18	; 0x01
		f += ddF_x;
    1268:	62 0e       	add	r6, r18
    126a:	73 1e       	adc	r7, r19
void invertDisplay (bool i) 
{
	writecommand(i ? HX8357_INVON : HX8357_INVOFF);
}

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
    126c:	28 01       	movw	r4, r16
    126e:	48 0c       	add	r4, r8
    1270:	59 1c       	adc	r5, r9
		}
		x++;
		ddF_x += 2;
		f += ddF_x;

		drawPixel(x0 + x, y0 + y, color);
    1272:	c5 01       	movw	r24, r10
    1274:	8e 0d       	add	r24, r14
    1276:	9f 1d       	adc	r25, r15
    1278:	9e 83       	std	Y+6, r25	; 0x06
    127a:	8d 83       	std	Y+5, r24	; 0x05
    127c:	c2 01       	movw	r24, r4
    127e:	6d 81       	ldd	r22, Y+5	; 0x05
    1280:	7e 81       	ldd	r23, Y+6	; 0x06
    1282:	a6 01       	movw	r20, r12
    1284:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
void invertDisplay (bool i) 
{
	writecommand(i ? HX8357_INVON : HX8357_INVOFF);
}

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
    1288:	14 01       	movw	r2, r8
    128a:	20 1a       	sub	r2, r16
    128c:	31 0a       	sbc	r3, r17
		x++;
		ddF_x += 2;
		f += ddF_x;

		drawPixel(x0 + x, y0 + y, color);
		drawPixel(x0 - x, y0 + y, color);
    128e:	c1 01       	movw	r24, r2
    1290:	6d 81       	ldd	r22, Y+5	; 0x05
    1292:	7e 81       	ldd	r23, Y+6	; 0x06
    1294:	a6 01       	movw	r20, r12
    1296:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
		drawPixel(x0 + x, y0 - y, color);
    129a:	f5 01       	movw	r30, r10
    129c:	ee 19       	sub	r30, r14
    129e:	ff 09       	sbc	r31, r15
    12a0:	fe 83       	std	Y+6, r31	; 0x06
    12a2:	ed 83       	std	Y+5, r30	; 0x05
    12a4:	c2 01       	movw	r24, r4
    12a6:	bf 01       	movw	r22, r30
    12a8:	a6 01       	movw	r20, r12
    12aa:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
		drawPixel(x0 - x, y0 - y, color);
    12ae:	c1 01       	movw	r24, r2
    12b0:	6d 81       	ldd	r22, Y+5	; 0x05
    12b2:	7e 81       	ldd	r23, Y+6	; 0x06
    12b4:	a6 01       	movw	r20, r12
    12b6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
		drawPixel(x0 + y, y0 + x, color);
    12ba:	24 01       	movw	r4, r8
    12bc:	4e 0c       	add	r4, r14
    12be:	5f 1c       	adc	r5, r15
void invertDisplay (bool i) 
{
	writecommand(i ? HX8357_INVON : HX8357_INVOFF);
}

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
    12c0:	98 01       	movw	r18, r16
    12c2:	2a 0d       	add	r18, r10
    12c4:	3b 1d       	adc	r19, r11
    12c6:	3e 83       	std	Y+6, r19	; 0x06
    12c8:	2d 83       	std	Y+5, r18	; 0x05

		drawPixel(x0 + x, y0 + y, color);
		drawPixel(x0 - x, y0 + y, color);
		drawPixel(x0 + x, y0 - y, color);
		drawPixel(x0 - x, y0 - y, color);
		drawPixel(x0 + y, y0 + x, color);
    12ca:	c2 01       	movw	r24, r4
    12cc:	b9 01       	movw	r22, r18
    12ce:	a6 01       	movw	r20, r12
    12d0:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
		drawPixel(x0 - y, y0 + x, color);
    12d4:	14 01       	movw	r2, r8
    12d6:	2e 18       	sub	r2, r14
    12d8:	3f 08       	sbc	r3, r15
    12da:	c1 01       	movw	r24, r2
    12dc:	6d 81       	ldd	r22, Y+5	; 0x05
    12de:	7e 81       	ldd	r23, Y+6	; 0x06
    12e0:	a6 01       	movw	r20, r12
    12e2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
void invertDisplay (bool i) 
{
	writecommand(i ? HX8357_INVON : HX8357_INVOFF);
}

void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
    12e6:	c5 01       	movw	r24, r10
    12e8:	80 1b       	sub	r24, r16
    12ea:	91 0b       	sbc	r25, r17
    12ec:	9e 83       	std	Y+6, r25	; 0x06
    12ee:	8d 83       	std	Y+5, r24	; 0x05
		drawPixel(x0 - x, y0 + y, color);
		drawPixel(x0 + x, y0 - y, color);
		drawPixel(x0 - x, y0 - y, color);
		drawPixel(x0 + y, y0 + x, color);
		drawPixel(x0 - y, y0 + x, color);
		drawPixel(x0 + y, y0 - x, color);
    12f0:	c2 01       	movw	r24, r4
    12f2:	6d 81       	ldd	r22, Y+5	; 0x05
    12f4:	7e 81       	ldd	r23, Y+6	; 0x06
    12f6:	a6 01       	movw	r20, r12
    12f8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
		drawPixel(x0 - y, y0 - x, color);
    12fc:	c1 01       	movw	r24, r2
    12fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1300:	7e 81       	ldd	r23, Y+6	; 0x06
    1302:	a6 01       	movw	r20, r12
    1304:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
	drawPixel(x0  , y0+r, color);
	drawPixel(x0  , y0-r, color);
	drawPixel(x0+r, y0  , color);
	drawPixel(x0-r, y0  , color);

	while (x<y) {
    1308:	0e 15       	cp	r16, r14
    130a:	1f 05       	cpc	r17, r15
    130c:	0c f4       	brge	.+2      	; 0x1310 <drawCircle+0x16a>
    130e:	98 cf       	rjmp	.-208    	; 0x1240 <drawCircle+0x9a>
		drawPixel(x0 + y, y0 + x, color);
		drawPixel(x0 - y, y0 + x, color);
		drawPixel(x0 + y, y0 - x, color);
		drawPixel(x0 - y, y0 - x, color);
	}
}
    1310:	26 96       	adiw	r28, 0x06	; 6
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	df 90       	pop	r13
    132a:	cf 90       	pop	r12
    132c:	bf 90       	pop	r11
    132e:	af 90       	pop	r10
    1330:	9f 90       	pop	r9
    1332:	8f 90       	pop	r8
    1334:	7f 90       	pop	r7
    1336:	6f 90       	pop	r6
    1338:	5f 90       	pop	r5
    133a:	4f 90       	pop	r4
    133c:	3f 90       	pop	r3
    133e:	2f 90       	pop	r2
    1340:	08 95       	ret

00001342 <drawCircleHelper>:

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color) {
    1342:	2f 92       	push	r2
    1344:	3f 92       	push	r3
    1346:	4f 92       	push	r4
    1348:	5f 92       	push	r5
    134a:	6f 92       	push	r6
    134c:	7f 92       	push	r7
    134e:	8f 92       	push	r8
    1350:	9f 92       	push	r9
    1352:	af 92       	push	r10
    1354:	bf 92       	push	r11
    1356:	cf 92       	push	r12
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	2e 97       	sbiw	r28, 0x0e	; 14
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	9a 83       	std	Y+2, r25	; 0x02
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	7c 83       	std	Y+4, r23	; 0x04
    137c:	6b 83       	std	Y+3, r22	; 0x03
    137e:	28 01       	movw	r4, r16
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x     = 0;
	int16_t y     = r;

	while (x<y) {
    1380:	14 16       	cp	r1, r20
    1382:	15 06       	cpc	r1, r21
    1384:	0c f0       	brlt	.+2      	; 0x1388 <drawCircleHelper+0x46>
    1386:	c2 c0       	rjmp	.+388    	; 0x150c <drawCircleHelper+0x1ca>
		drawPixel(x0 - y, y0 - x, color);
	}
}

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color) {
	int16_t f     = 1 - r;
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	7c 01       	movw	r14, r24
    138e:	e4 1a       	sub	r14, r20
    1390:	f5 0a       	sbc	r15, r21
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
    1392:	88 27       	eor	r24, r24
    1394:	99 27       	eor	r25, r25
    1396:	84 1b       	sub	r24, r20
    1398:	95 0b       	sbc	r25, r21
    139a:	1c 01       	movw	r2, r24
    139c:	22 0c       	add	r2, r2
    139e:	33 1c       	adc	r3, r3
		drawPixel(x0 + y, y0 - x, color);
		drawPixel(x0 - y, y0 - x, color);
	}
}

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color) {
    13a0:	6b 01       	movw	r12, r22
    13a2:	08 94       	sec
    13a4:	c1 08       	sbc	r12, r1
    13a6:	d1 08       	sbc	r13, r1
    13a8:	a9 80       	ldd	r10, Y+1	; 0x01
    13aa:	ba 80       	ldd	r11, Y+2	; 0x02
    13ac:	08 94       	sec
    13ae:	a1 08       	sbc	r10, r1
    13b0:	b1 08       	sbc	r11, r1
    13b2:	4b 01       	movw	r8, r22
    13b4:	08 94       	sec
    13b6:	81 1c       	adc	r8, r1
    13b8:	91 1c       	adc	r9, r1
    13ba:	69 80       	ldd	r6, Y+1	; 0x01
    13bc:	7a 80       	ldd	r7, Y+2	; 0x02
    13be:	08 94       	sec
    13c0:	61 1c       	adc	r6, r1
    13c2:	71 1c       	adc	r7, r1
	int16_t f     = 1 - r;
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x     = 0;
	int16_t y     = r;
    13c4:	5e 87       	std	Y+14, r21	; 0x0e
    13c6:	4d 87       	std	Y+13, r20	; 0x0d

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color) {
	int16_t f     = 1 - r;
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x     = 0;
    13c8:	00 e0       	ldi	r16, 0x00	; 0
    13ca:	10 e0       	ldi	r17, 0x00	; 0
			f     += ddF_y;
		}
		x++;
		ddF_x += 2;
		f     += ddF_x;
		if (cornername & 0x4) {
    13cc:	82 2f       	mov	r24, r18
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	9c 01       	movw	r18, r24
    13d2:	24 70       	andi	r18, 0x04	; 4
    13d4:	30 70       	andi	r19, 0x00	; 0
    13d6:	3e 83       	std	Y+6, r19	; 0x06
    13d8:	2d 83       	std	Y+5, r18	; 0x05
			drawPixel(x0 + x, y0 + y, color);
			drawPixel(x0 + y, y0 + x, color);
		}
		if (cornername & 0x2) {
    13da:	fc 01       	movw	r30, r24
    13dc:	e2 70       	andi	r30, 0x02	; 2
    13de:	f0 70       	andi	r31, 0x00	; 0
    13e0:	f8 87       	std	Y+8, r31	; 0x08
    13e2:	ef 83       	std	Y+7, r30	; 0x07
			drawPixel(x0 + x, y0 - y, color);
			drawPixel(x0 + y, y0 - x, color);
		}
		if (cornername & 0x8) {
    13e4:	9c 01       	movw	r18, r24
    13e6:	28 70       	andi	r18, 0x08	; 8
    13e8:	30 70       	andi	r19, 0x00	; 0
    13ea:	3a 87       	std	Y+10, r19	; 0x0a
    13ec:	29 87       	std	Y+9, r18	; 0x09
			drawPixel(x0 - y, y0 + x, color);
			drawPixel(x0 - x, y0 + y, color);
		}
		if (cornername & 0x1) {
    13ee:	fc 01       	movw	r30, r24
    13f0:	e1 70       	andi	r30, 0x01	; 1
    13f2:	f0 70       	andi	r31, 0x00	; 0
    13f4:	fc 87       	std	Y+12, r31	; 0x0c
    13f6:	eb 87       	std	Y+11, r30	; 0x0b
	int16_t ddF_y = -2 * r;
	int16_t x     = 0;
	int16_t y     = r;

	while (x<y) {
		if (f >= 0) {
    13f8:	ff 20       	and	r15, r15
    13fa:	64 f0       	brlt	.+24     	; 0x1414 <drawCircleHelper+0xd2>
			y--;
    13fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    13fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    1400:	21 50       	subi	r18, 0x01	; 1
    1402:	30 40       	sbci	r19, 0x00	; 0
    1404:	3e 87       	std	Y+14, r19	; 0x0e
    1406:	2d 87       	std	Y+13, r18	; 0x0d
			ddF_y += 2;
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	28 0e       	add	r2, r24
    140e:	39 1e       	adc	r3, r25
			f     += ddF_y;
    1410:	e2 0c       	add	r14, r2
    1412:	f3 1c       	adc	r15, r3
		}
		x++;
    1414:	0f 5f       	subi	r16, 0xFF	; 255
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
		drawPixel(x0 + y, y0 - x, color);
		drawPixel(x0 - y, y0 - x, color);
	}
}

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color) {
    1418:	c8 01       	movw	r24, r16
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	01 96       	adiw	r24, 0x01	; 1
			ddF_y += 2;
			f     += ddF_y;
		}
		x++;
		ddF_x += 2;
		f     += ddF_x;
    1420:	e8 0e       	add	r14, r24
    1422:	f9 1e       	adc	r15, r25
		if (cornername & 0x4) {
    1424:	ed 81       	ldd	r30, Y+5	; 0x05
    1426:	fe 81       	ldd	r31, Y+6	; 0x06
    1428:	30 97       	sbiw	r30, 0x00	; 0
    142a:	a1 f0       	breq	.+40     	; 0x1454 <drawCircleHelper+0x112>
			drawPixel(x0 + x, y0 + y, color);
    142c:	6b 81       	ldd	r22, Y+3	; 0x03
    142e:	7c 81       	ldd	r23, Y+4	; 0x04
    1430:	2d 85       	ldd	r18, Y+13	; 0x0d
    1432:	3e 85       	ldd	r19, Y+14	; 0x0e
    1434:	62 0f       	add	r22, r18
    1436:	73 1f       	adc	r23, r19
    1438:	c3 01       	movw	r24, r6
    143a:	a2 01       	movw	r20, r4
    143c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
			drawPixel(x0 + y, y0 + x, color);
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	ed 85       	ldd	r30, Y+13	; 0x0d
    1446:	fe 85       	ldd	r31, Y+14	; 0x0e
    1448:	8e 0f       	add	r24, r30
    144a:	9f 1f       	adc	r25, r31
    144c:	b4 01       	movw	r22, r8
    144e:	a2 01       	movw	r20, r4
    1450:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
		}
		if (cornername & 0x2) {
    1454:	2f 81       	ldd	r18, Y+7	; 0x07
    1456:	38 85       	ldd	r19, Y+8	; 0x08
    1458:	21 15       	cp	r18, r1
    145a:	31 05       	cpc	r19, r1
    145c:	a1 f0       	breq	.+40     	; 0x1486 <drawCircleHelper+0x144>
			drawPixel(x0 + x, y0 - y, color);
    145e:	6b 81       	ldd	r22, Y+3	; 0x03
    1460:	7c 81       	ldd	r23, Y+4	; 0x04
    1462:	8d 85       	ldd	r24, Y+13	; 0x0d
    1464:	9e 85       	ldd	r25, Y+14	; 0x0e
    1466:	68 1b       	sub	r22, r24
    1468:	79 0b       	sbc	r23, r25
    146a:	c3 01       	movw	r24, r6
    146c:	a2 01       	movw	r20, r4
    146e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
			drawPixel(x0 + y, y0 - x, color);
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	ed 85       	ldd	r30, Y+13	; 0x0d
    1478:	fe 85       	ldd	r31, Y+14	; 0x0e
    147a:	8e 0f       	add	r24, r30
    147c:	9f 1f       	adc	r25, r31
    147e:	b6 01       	movw	r22, r12
    1480:	a2 01       	movw	r20, r4
    1482:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
		}
		if (cornername & 0x8) {
    1486:	29 85       	ldd	r18, Y+9	; 0x09
    1488:	3a 85       	ldd	r19, Y+10	; 0x0a
    148a:	21 15       	cp	r18, r1
    148c:	31 05       	cpc	r19, r1
    148e:	a1 f0       	breq	.+40     	; 0x14b8 <drawCircleHelper+0x176>
			drawPixel(x0 - y, y0 + x, color);
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	9a 81       	ldd	r25, Y+2	; 0x02
    1494:	ed 85       	ldd	r30, Y+13	; 0x0d
    1496:	fe 85       	ldd	r31, Y+14	; 0x0e
    1498:	8e 1b       	sub	r24, r30
    149a:	9f 0b       	sbc	r25, r31
    149c:	b4 01       	movw	r22, r8
    149e:	a2 01       	movw	r20, r4
    14a0:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
			drawPixel(x0 - x, y0 + y, color);
    14a4:	6b 81       	ldd	r22, Y+3	; 0x03
    14a6:	7c 81       	ldd	r23, Y+4	; 0x04
    14a8:	2d 85       	ldd	r18, Y+13	; 0x0d
    14aa:	3e 85       	ldd	r19, Y+14	; 0x0e
    14ac:	62 0f       	add	r22, r18
    14ae:	73 1f       	adc	r23, r19
    14b0:	c5 01       	movw	r24, r10
    14b2:	a2 01       	movw	r20, r4
    14b4:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
		}
		if (cornername & 0x1) {
    14b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    14ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	a1 f0       	breq	.+40     	; 0x14e8 <drawCircleHelper+0x1a6>
			drawPixel(x0 - y, y0 - x, color);
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	9a 81       	ldd	r25, Y+2	; 0x02
    14c4:	ed 85       	ldd	r30, Y+13	; 0x0d
    14c6:	fe 85       	ldd	r31, Y+14	; 0x0e
    14c8:	8e 1b       	sub	r24, r30
    14ca:	9f 0b       	sbc	r25, r31
    14cc:	b6 01       	movw	r22, r12
    14ce:	a2 01       	movw	r20, r4
    14d0:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
			drawPixel(x0 - x, y0 - y, color);
    14d4:	6b 81       	ldd	r22, Y+3	; 0x03
    14d6:	7c 81       	ldd	r23, Y+4	; 0x04
    14d8:	2d 85       	ldd	r18, Y+13	; 0x0d
    14da:	3e 85       	ldd	r19, Y+14	; 0x0e
    14dc:	62 1b       	sub	r22, r18
    14de:	73 0b       	sbc	r23, r19
    14e0:	c5 01       	movw	r24, r10
    14e2:	a2 01       	movw	r20, r4
    14e4:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
    14e8:	08 94       	sec
    14ea:	c1 08       	sbc	r12, r1
    14ec:	d1 08       	sbc	r13, r1
    14ee:	08 94       	sec
    14f0:	a1 08       	sbc	r10, r1
    14f2:	b1 08       	sbc	r11, r1
    14f4:	08 94       	sec
    14f6:	81 1c       	adc	r8, r1
    14f8:	91 1c       	adc	r9, r1
    14fa:	08 94       	sec
    14fc:	61 1c       	adc	r6, r1
    14fe:	71 1c       	adc	r7, r1
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x     = 0;
	int16_t y     = r;

	while (x<y) {
    1500:	8d 85       	ldd	r24, Y+13	; 0x0d
    1502:	9e 85       	ldd	r25, Y+14	; 0x0e
    1504:	08 17       	cp	r16, r24
    1506:	19 07       	cpc	r17, r25
    1508:	0c f4       	brge	.+2      	; 0x150c <drawCircleHelper+0x1ca>
    150a:	76 cf       	rjmp	.-276    	; 0x13f8 <drawCircleHelper+0xb6>
		if (cornername & 0x1) {
			drawPixel(x0 - y, y0 - x, color);
			drawPixel(x0 - x, y0 - y, color);
		}
	}
}
    150c:	2e 96       	adiw	r28, 0x0e	; 14
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	cd bf       	out	0x3d, r28	; 61
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	ff 90       	pop	r15
    1522:	ef 90       	pop	r14
    1524:	df 90       	pop	r13
    1526:	cf 90       	pop	r12
    1528:	bf 90       	pop	r11
    152a:	af 90       	pop	r10
    152c:	9f 90       	pop	r9
    152e:	8f 90       	pop	r8
    1530:	7f 90       	pop	r7
    1532:	6f 90       	pop	r6
    1534:	5f 90       	pop	r5
    1536:	4f 90       	pop	r4
    1538:	3f 90       	pop	r3
    153a:	2f 90       	pop	r2
    153c:	08 95       	ret

0000153e <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) {
    153e:	2f 92       	push	r2
    1540:	3f 92       	push	r3
    1542:	4f 92       	push	r4
    1544:	5f 92       	push	r5
    1546:	6f 92       	push	r6
    1548:	7f 92       	push	r7
    154a:	8f 92       	push	r8
    154c:	9f 92       	push	r9
    154e:	af 92       	push	r10
    1550:	bf 92       	push	r11
    1552:	cf 92       	push	r12
    1554:	df 92       	push	r13
    1556:	ef 92       	push	r14
    1558:	ff 92       	push	r15
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	2a 97       	sbiw	r28, 0x0a	; 10
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	2c 01       	movw	r4, r24
    1574:	7e 83       	std	Y+6, r23	; 0x06
    1576:	6d 83       	std	Y+5, r22	; 0x05
    1578:	18 87       	std	Y+8, r17	; 0x08
    157a:	0f 83       	std	Y+7, r16	; 0x07
    157c:	17 01       	movw	r2, r14
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x     = 0;
	int16_t y     = r;

	while (x<y) {
    157e:	14 16       	cp	r1, r20
    1580:	15 06       	cpc	r1, r21
    1582:	0c f0       	brlt	.+2      	; 0x1586 <fillCircleHelper+0x48>
    1584:	91 c0       	rjmp	.+290    	; 0x16a8 <fillCircleHelper+0x16a>
	}
}

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) {

	int16_t f     = 1 - r;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	8c 01       	movw	r16, r24
    158c:	04 1b       	sub	r16, r20
    158e:	15 0b       	sbc	r17, r21
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
    1590:	88 27       	eor	r24, r24
    1592:	99 27       	eor	r25, r25
    1594:	84 1b       	sub	r24, r20
    1596:	95 0b       	sbc	r25, r21
    1598:	3c 01       	movw	r6, r24
    159a:	66 0c       	add	r6, r6
    159c:	77 1c       	adc	r7, r7
			drawPixel(x0 - x, y0 - y, color);
		}
	}
}

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) {
    159e:	5b 01       	movw	r10, r22
    15a0:	08 94       	sec
    15a2:	a1 08       	sbc	r10, r1
    15a4:	b1 08       	sbc	r11, r1
    15a6:	8f 80       	ldd	r8, Y+7	; 0x07
    15a8:	98 84       	ldd	r9, Y+8	; 0x08
    15aa:	83 e0       	ldi	r24, 0x03	; 3
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	88 0e       	add	r8, r24
    15b0:	99 1e       	adc	r9, r25

	int16_t f     = 1 - r;
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x     = 0;
	int16_t y     = r;
    15b2:	5a 87       	std	Y+10, r21	; 0x0a
    15b4:	49 87       	std	Y+9, r20	; 0x09
void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) {

	int16_t f     = 1 - r;
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x     = 0;
    15b6:	ee 24       	eor	r14, r14
    15b8:	ff 24       	eor	r15, r15
}

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) {

	int16_t f     = 1 - r;
	int16_t ddF_x = 1;
    15ba:	cc 24       	eor	r12, r12
    15bc:	dd 24       	eor	r13, r13
    15be:	c3 94       	inc	r12
		}
		x++;
		ddF_x += 2;
		f     += ddF_x;

		if (cornername & 0x1) {
    15c0:	82 2f       	mov	r24, r18
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	fc 01       	movw	r30, r24
    15c6:	e1 70       	andi	r30, 0x01	; 1
    15c8:	f0 70       	andi	r31, 0x00	; 0
    15ca:	fa 83       	std	Y+2, r31	; 0x02
    15cc:	e9 83       	std	Y+1, r30	; 0x01
			drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
			drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
		}
		if (cornername & 0x2) {
    15ce:	9c 01       	movw	r18, r24
    15d0:	22 70       	andi	r18, 0x02	; 2
    15d2:	30 70       	andi	r19, 0x00	; 0
    15d4:	3c 83       	std	Y+4, r19	; 0x04
    15d6:	2b 83       	std	Y+3, r18	; 0x03
	int16_t ddF_y = -2 * r;
	int16_t x     = 0;
	int16_t y     = r;

	while (x<y) {
		if (f >= 0) {
    15d8:	11 23       	and	r17, r17
    15da:	5c f0       	brlt	.+22     	; 0x15f2 <fillCircleHelper+0xb4>
			y--;
    15dc:	89 85       	ldd	r24, Y+9	; 0x09
    15de:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	9a 87       	std	Y+10, r25	; 0x0a
    15e4:	89 87       	std	Y+9, r24	; 0x09
			ddF_y += 2;
    15e6:	e2 e0       	ldi	r30, 0x02	; 2
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	6e 0e       	add	r6, r30
    15ec:	7f 1e       	adc	r7, r31
			f     += ddF_y;
    15ee:	06 0d       	add	r16, r6
    15f0:	17 1d       	adc	r17, r7
		}
		x++;
    15f2:	08 94       	sec
    15f4:	e1 1c       	adc	r14, r1
    15f6:	f1 1c       	adc	r15, r1
		ddF_x += 2;
    15f8:	22 e0       	ldi	r18, 0x02	; 2
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	c2 0e       	add	r12, r18
    15fe:	d3 1e       	adc	r13, r19
		f     += ddF_x;
    1600:	0c 0d       	add	r16, r12
    1602:	1d 1d       	adc	r17, r13

		if (cornername & 0x1) {
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	9a 81       	ldd	r25, Y+2	; 0x02
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	f1 f0       	breq	.+60     	; 0x1648 <fillCircleHelper+0x10a>
			drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
    160c:	6d 81       	ldd	r22, Y+5	; 0x05
    160e:	7e 81       	ldd	r23, Y+6	; 0x06
    1610:	e9 85       	ldd	r30, Y+9	; 0x09
    1612:	fa 85       	ldd	r31, Y+10	; 0x0a
    1614:	6e 1b       	sub	r22, r30
    1616:	7f 0b       	sbc	r23, r31
    1618:	af 01       	movw	r20, r30
    161a:	44 0f       	add	r20, r20
    161c:	55 1f       	adc	r21, r21
    161e:	4f 5f       	subi	r20, 0xFF	; 255
    1620:	5f 4f       	sbci	r21, 0xFF	; 255
    1622:	2f 81       	ldd	r18, Y+7	; 0x07
    1624:	38 85       	ldd	r19, Y+8	; 0x08
    1626:	42 0f       	add	r20, r18
    1628:	53 1f       	adc	r21, r19
    162a:	c7 01       	movw	r24, r14
    162c:	84 0d       	add	r24, r4
    162e:	95 1d       	adc	r25, r5
    1630:	91 01       	movw	r18, r2
    1632:	0e 94 00 07 	call	0xe00	; 0xe00 <drawFastVLine>
			drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
    1636:	89 85       	ldd	r24, Y+9	; 0x09
    1638:	9a 85       	ldd	r25, Y+10	; 0x0a
    163a:	84 0d       	add	r24, r4
    163c:	95 1d       	adc	r25, r5
    163e:	b5 01       	movw	r22, r10
    1640:	a4 01       	movw	r20, r8
    1642:	91 01       	movw	r18, r2
    1644:	0e 94 00 07 	call	0xe00	; 0xe00 <drawFastVLine>
		}
		if (cornername & 0x2) {
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	f9 f0       	breq	.+62     	; 0x168e <fillCircleHelper+0x150>
			drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
    1650:	6d 81       	ldd	r22, Y+5	; 0x05
    1652:	7e 81       	ldd	r23, Y+6	; 0x06
    1654:	e9 85       	ldd	r30, Y+9	; 0x09
    1656:	fa 85       	ldd	r31, Y+10	; 0x0a
    1658:	6e 1b       	sub	r22, r30
    165a:	7f 0b       	sbc	r23, r31
    165c:	af 01       	movw	r20, r30
    165e:	44 0f       	add	r20, r20
    1660:	55 1f       	adc	r21, r21
    1662:	4f 5f       	subi	r20, 0xFF	; 255
    1664:	5f 4f       	sbci	r21, 0xFF	; 255
    1666:	2f 81       	ldd	r18, Y+7	; 0x07
    1668:	38 85       	ldd	r19, Y+8	; 0x08
    166a:	42 0f       	add	r20, r18
    166c:	53 1f       	adc	r21, r19
    166e:	c2 01       	movw	r24, r4
    1670:	8e 19       	sub	r24, r14
    1672:	9f 09       	sbc	r25, r15
    1674:	91 01       	movw	r18, r2
    1676:	0e 94 00 07 	call	0xe00	; 0xe00 <drawFastVLine>
			drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
    167a:	c2 01       	movw	r24, r4
    167c:	e9 85       	ldd	r30, Y+9	; 0x09
    167e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1680:	8e 1b       	sub	r24, r30
    1682:	9f 0b       	sbc	r25, r31
    1684:	b5 01       	movw	r22, r10
    1686:	a4 01       	movw	r20, r8
    1688:	91 01       	movw	r18, r2
    168a:	0e 94 00 07 	call	0xe00	; 0xe00 <drawFastVLine>
    168e:	08 94       	sec
    1690:	a1 08       	sbc	r10, r1
    1692:	b1 08       	sbc	r11, r1
    1694:	22 e0       	ldi	r18, 0x02	; 2
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	82 0e       	add	r8, r18
    169a:	93 1e       	adc	r9, r19
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x     = 0;
	int16_t y     = r;

	while (x<y) {
    169c:	89 85       	ldd	r24, Y+9	; 0x09
    169e:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a0:	e8 16       	cp	r14, r24
    16a2:	f9 06       	cpc	r15, r25
    16a4:	0c f4       	brge	.+2      	; 0x16a8 <fillCircleHelper+0x16a>
    16a6:	98 cf       	rjmp	.-208    	; 0x15d8 <fillCircleHelper+0x9a>
		if (cornername & 0x2) {
			drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
			drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
		}
	}
}
    16a8:	2a 96       	adiw	r28, 0x0a	; 10
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	ff 90       	pop	r15
    16be:	ef 90       	pop	r14
    16c0:	df 90       	pop	r13
    16c2:	cf 90       	pop	r12
    16c4:	bf 90       	pop	r11
    16c6:	af 90       	pop	r10
    16c8:	9f 90       	pop	r9
    16ca:	8f 90       	pop	r8
    16cc:	7f 90       	pop	r7
    16ce:	6f 90       	pop	r6
    16d0:	5f 90       	pop	r5
    16d2:	4f 90       	pop	r4
    16d4:	3f 90       	pop	r3
    16d6:	2f 90       	pop	r2
    16d8:	08 95       	ret

000016da <fillCircle>:

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
    16da:	cf 92       	push	r12
    16dc:	df 92       	push	r13
    16de:	ef 92       	push	r14
    16e0:	ff 92       	push	r15
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	8c 01       	movw	r16, r24
    16ec:	6b 01       	movw	r12, r22
    16ee:	ea 01       	movw	r28, r20
    16f0:	79 01       	movw	r14, r18
	drawFastVLine(x0, y0-r, 2*r+1, color);
    16f2:	64 1b       	sub	r22, r20
    16f4:	75 0b       	sbc	r23, r21
    16f6:	44 0f       	add	r20, r20
    16f8:	55 1f       	adc	r21, r21
    16fa:	4f 5f       	subi	r20, 0xFF	; 255
    16fc:	5f 4f       	sbci	r21, 0xFF	; 255
    16fe:	0e 94 00 07 	call	0xe00	; 0xe00 <drawFastVLine>
	fillCircleHelper(x0, y0, r, 3, 0, color);
    1702:	c8 01       	movw	r24, r16
    1704:	b6 01       	movw	r22, r12
    1706:	ae 01       	movw	r20, r28
    1708:	23 e0       	ldi	r18, 0x03	; 3
    170a:	00 e0       	ldi	r16, 0x00	; 0
    170c:	10 e0       	ldi	r17, 0x00	; 0
    170e:	0e 94 9f 0a 	call	0x153e	; 0x153e <fillCircleHelper>
}
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	ff 90       	pop	r15
    171c:	ef 90       	pop	r14
    171e:	df 90       	pop	r13
    1720:	cf 90       	pop	r12
    1722:	08 95       	ret

00001724 <drawRect>:

// Draw a rectangle
void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
    1724:	af 92       	push	r10
    1726:	bf 92       	push	r11
    1728:	cf 92       	push	r12
    172a:	df 92       	push	r13
    172c:	ef 92       	push	r14
    172e:	ff 92       	push	r15
    1730:	0f 93       	push	r16
    1732:	1f 93       	push	r17
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	ec 01       	movw	r28, r24
    173a:	7b 01       	movw	r14, r22
    173c:	6a 01       	movw	r12, r20
    173e:	59 01       	movw	r10, r18
	drawFastHLine(x, y, w, color);
    1740:	98 01       	movw	r18, r16
    1742:	0e 94 3e 07 	call	0xe7c	; 0xe7c <drawFastHLine>
	drawFastHLine(x, y+h-1, w, color);
    1746:	b7 01       	movw	r22, r14
    1748:	6a 0d       	add	r22, r10
    174a:	7b 1d       	adc	r23, r11
    174c:	61 50       	subi	r22, 0x01	; 1
    174e:	70 40       	sbci	r23, 0x00	; 0
    1750:	ce 01       	movw	r24, r28
    1752:	a6 01       	movw	r20, r12
    1754:	98 01       	movw	r18, r16
    1756:	0e 94 3e 07 	call	0xe7c	; 0xe7c <drawFastHLine>
	drawFastVLine(x, y, h, color);
    175a:	ce 01       	movw	r24, r28
    175c:	b7 01       	movw	r22, r14
    175e:	a5 01       	movw	r20, r10
    1760:	98 01       	movw	r18, r16
    1762:	0e 94 00 07 	call	0xe00	; 0xe00 <drawFastVLine>
	drawFastVLine(x+w-1, y, h, color);
    1766:	cc 0d       	add	r28, r12
    1768:	dd 1d       	adc	r29, r13
    176a:	ce 01       	movw	r24, r28
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	b7 01       	movw	r22, r14
    1770:	a5 01       	movw	r20, r10
    1772:	98 01       	movw	r18, r16
    1774:	0e 94 00 07 	call	0xe00	; 0xe00 <drawFastVLine>
}
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	1f 91       	pop	r17
    177e:	0f 91       	pop	r16
    1780:	ff 90       	pop	r15
    1782:	ef 90       	pop	r14
    1784:	df 90       	pop	r13
    1786:	cf 90       	pop	r12
    1788:	bf 90       	pop	r11
    178a:	af 90       	pop	r10
    178c:	08 95       	ret

0000178e <fillRect_GFX>:

void fillRect_GFX(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
    178e:	af 92       	push	r10
    1790:	bf 92       	push	r11
    1792:	cf 92       	push	r12
    1794:	df 92       	push	r13
    1796:	ef 92       	push	r14
    1798:	ff 92       	push	r15
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	5b 01       	movw	r10, r22
    17a4:	69 01       	movw	r12, r18
    17a6:	78 01       	movw	r14, r16
	// Update in subclasses if desired!
	for (int16_t i=x; i<x+w; i++) {
    17a8:	ec 01       	movw	r28, r24
    17aa:	c4 0f       	add	r28, r20
    17ac:	d5 1f       	adc	r29, r21
    17ae:	8c 17       	cp	r24, r28
    17b0:	9d 07       	cpc	r25, r29
    17b2:	64 f4       	brge	.+24     	; 0x17cc <fillRect_GFX+0x3e>
    17b4:	8c 01       	movw	r16, r24
		drawFastVLine(i, y, h, color);
    17b6:	c8 01       	movw	r24, r16
    17b8:	b5 01       	movw	r22, r10
    17ba:	a6 01       	movw	r20, r12
    17bc:	97 01       	movw	r18, r14
    17be:	0e 94 00 07 	call	0xe00	; 0xe00 <drawFastVLine>
	drawFastVLine(x+w-1, y, h, color);
}

void fillRect_GFX(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
	// Update in subclasses if desired!
	for (int16_t i=x; i<x+w; i++) {
    17c2:	0f 5f       	subi	r16, 0xFF	; 255
    17c4:	1f 4f       	sbci	r17, 0xFF	; 255
    17c6:	0c 17       	cp	r16, r28
    17c8:	1d 07       	cpc	r17, r29
    17ca:	ac f3       	brlt	.-22     	; 0x17b6 <fillRect_GFX+0x28>
		drawFastVLine(i, y, h, color);
	}
}
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	1f 91       	pop	r17
    17d2:	0f 91       	pop	r16
    17d4:	ff 90       	pop	r15
    17d6:	ef 90       	pop	r14
    17d8:	df 90       	pop	r13
    17da:	cf 90       	pop	r12
    17dc:	bf 90       	pop	r11
    17de:	af 90       	pop	r10
    17e0:	08 95       	ret

000017e2 <drawRoundRect>:

// Draw a rounded rectangle
void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) {
    17e2:	2f 92       	push	r2
    17e4:	3f 92       	push	r3
    17e6:	4f 92       	push	r4
    17e8:	5f 92       	push	r5
    17ea:	6f 92       	push	r6
    17ec:	7f 92       	push	r7
    17ee:	8f 92       	push	r8
    17f0:	9f 92       	push	r9
    17f2:	af 92       	push	r10
    17f4:	bf 92       	push	r11
    17f6:	cf 92       	push	r12
    17f8:	df 92       	push	r13
    17fa:	ef 92       	push	r14
    17fc:	ff 92       	push	r15
    17fe:	0f 93       	push	r16
    1800:	1f 93       	push	r17
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	00 d0       	rcall	.+0      	; 0x1808 <drawRoundRect+0x26>
    1808:	00 d0       	rcall	.+0      	; 0x180a <drawRoundRect+0x28>
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	4c 01       	movw	r8, r24
    1810:	5b 01       	movw	r10, r22
    1812:	1a 01       	movw	r2, r20
    1814:	29 01       	movw	r4, r18
    1816:	68 01       	movw	r12, r16
	// smarter version
	drawFastHLine(x+r  , y    , w-2*r, color); // Top
    1818:	3c 01       	movw	r6, r24
    181a:	60 0e       	add	r6, r16
    181c:	71 1e       	adc	r7, r17
    181e:	88 27       	eor	r24, r24
    1820:	99 27       	eor	r25, r25
    1822:	80 1b       	sub	r24, r16
    1824:	91 0b       	sbc	r25, r17
    1826:	8c 01       	movw	r16, r24
    1828:	00 0f       	add	r16, r16
    182a:	11 1f       	adc	r17, r17
    182c:	c8 01       	movw	r24, r16
    182e:	84 0f       	add	r24, r20
    1830:	95 1f       	adc	r25, r21
    1832:	9c 83       	std	Y+4, r25	; 0x04
    1834:	8b 83       	std	Y+3, r24	; 0x03
    1836:	c3 01       	movw	r24, r6
    1838:	4b 81       	ldd	r20, Y+3	; 0x03
    183a:	5c 81       	ldd	r21, Y+4	; 0x04
    183c:	97 01       	movw	r18, r14
    183e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <drawFastHLine>
	drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
    1842:	f5 01       	movw	r30, r10
    1844:	e4 0d       	add	r30, r4
    1846:	f5 1d       	adc	r31, r5
    1848:	fa 83       	std	Y+2, r31	; 0x02
    184a:	e9 83       	std	Y+1, r30	; 0x01
    184c:	bf 01       	movw	r22, r30
    184e:	61 50       	subi	r22, 0x01	; 1
    1850:	70 40       	sbci	r23, 0x00	; 0
    1852:	c3 01       	movw	r24, r6
    1854:	4b 81       	ldd	r20, Y+3	; 0x03
    1856:	5c 81       	ldd	r21, Y+4	; 0x04
    1858:	97 01       	movw	r18, r14
    185a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <drawFastHLine>
	drawFastVLine(x    , y+r  , h-2*r, color); // Left
    185e:	ac 0c       	add	r10, r12
    1860:	bd 1c       	adc	r11, r13
    1862:	04 0d       	add	r16, r4
    1864:	15 1d       	adc	r17, r5
    1866:	c4 01       	movw	r24, r8
    1868:	b5 01       	movw	r22, r10
    186a:	a8 01       	movw	r20, r16
    186c:	97 01       	movw	r18, r14
    186e:	0e 94 00 07 	call	0xe00	; 0xe00 <drawFastVLine>
	drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
    1872:	82 0c       	add	r8, r2
    1874:	93 1c       	adc	r9, r3
    1876:	c4 01       	movw	r24, r8
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	b5 01       	movw	r22, r10
    187c:	a8 01       	movw	r20, r16
    187e:	97 01       	movw	r18, r14
    1880:	0e 94 00 07 	call	0xe00	; 0xe00 <drawFastVLine>
	// draw four corners
	drawCircleHelper(x+r    , y+r    , r, 1, color);
    1884:	c3 01       	movw	r24, r6
    1886:	b5 01       	movw	r22, r10
    1888:	a6 01       	movw	r20, r12
    188a:	21 e0       	ldi	r18, 0x01	; 1
    188c:	87 01       	movw	r16, r14
    188e:	0e 94 a1 09 	call	0x1342	; 0x1342 <drawCircleHelper>
	drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
    1892:	c4 01       	movw	r24, r8
    1894:	8c 19       	sub	r24, r12
    1896:	9d 09       	sbc	r25, r13
    1898:	4c 01       	movw	r8, r24
    189a:	08 94       	sec
    189c:	81 08       	sbc	r8, r1
    189e:	91 08       	sbc	r9, r1
    18a0:	c4 01       	movw	r24, r8
    18a2:	b5 01       	movw	r22, r10
    18a4:	a6 01       	movw	r20, r12
    18a6:	22 e0       	ldi	r18, 0x02	; 2
    18a8:	0e 94 a1 09 	call	0x1342	; 0x1342 <drawCircleHelper>
	drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
    18ac:	a9 80       	ldd	r10, Y+1	; 0x01
    18ae:	ba 80       	ldd	r11, Y+2	; 0x02
    18b0:	ac 18       	sub	r10, r12
    18b2:	bd 08       	sbc	r11, r13
    18b4:	08 94       	sec
    18b6:	a1 08       	sbc	r10, r1
    18b8:	b1 08       	sbc	r11, r1
    18ba:	c4 01       	movw	r24, r8
    18bc:	b5 01       	movw	r22, r10
    18be:	a6 01       	movw	r20, r12
    18c0:	24 e0       	ldi	r18, 0x04	; 4
    18c2:	0e 94 a1 09 	call	0x1342	; 0x1342 <drawCircleHelper>
	drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
    18c6:	c3 01       	movw	r24, r6
    18c8:	b5 01       	movw	r22, r10
    18ca:	a6 01       	movw	r20, r12
    18cc:	28 e0       	ldi	r18, 0x08	; 8
    18ce:	0e 94 a1 09 	call	0x1342	; 0x1342 <drawCircleHelper>
}
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	ff 90       	pop	r15
    18e4:	ef 90       	pop	r14
    18e6:	df 90       	pop	r13
    18e8:	cf 90       	pop	r12
    18ea:	bf 90       	pop	r11
    18ec:	af 90       	pop	r10
    18ee:	9f 90       	pop	r9
    18f0:	8f 90       	pop	r8
    18f2:	7f 90       	pop	r7
    18f4:	6f 90       	pop	r6
    18f6:	5f 90       	pop	r5
    18f8:	4f 90       	pop	r4
    18fa:	3f 90       	pop	r3
    18fc:	2f 90       	pop	r2
    18fe:	08 95       	ret

00001900 <fillRoundRect>:

// Fill a rounded rectangle
void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) {
    1900:	2f 92       	push	r2
    1902:	3f 92       	push	r3
    1904:	4f 92       	push	r4
    1906:	5f 92       	push	r5
    1908:	6f 92       	push	r6
    190a:	7f 92       	push	r7
    190c:	8f 92       	push	r8
    190e:	9f 92       	push	r9
    1910:	af 92       	push	r10
    1912:	bf 92       	push	r11
    1914:	cf 92       	push	r12
    1916:	df 92       	push	r13
    1918:	ef 92       	push	r14
    191a:	ff 92       	push	r15
    191c:	0f 93       	push	r16
    191e:	1f 93       	push	r17
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	00 d0       	rcall	.+0      	; 0x1926 <fillRoundRect+0x26>
    1926:	00 d0       	rcall	.+0      	; 0x1928 <fillRoundRect+0x28>
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	2c 01       	movw	r4, r24
    192e:	4b 01       	movw	r8, r22
    1930:	1a 01       	movw	r2, r20
    1932:	39 01       	movw	r6, r18
    1934:	1c 83       	std	Y+4, r17	; 0x04
    1936:	0b 83       	std	Y+3, r16	; 0x03
	// smarter version
	fillRect(x+r, y, w-2*r, h, color);
    1938:	98 01       	movw	r18, r16
    193a:	28 0f       	add	r18, r24
    193c:	39 1f       	adc	r19, r25
    193e:	3a 83       	std	Y+2, r19	; 0x02
    1940:	29 83       	std	Y+1, r18	; 0x01
    1942:	c8 01       	movw	r24, r16
    1944:	90 95       	com	r25
    1946:	81 95       	neg	r24
    1948:	9f 4f       	sbci	r25, 0xFF	; 255
    194a:	6c 01       	movw	r12, r24
    194c:	cc 0c       	add	r12, r12
    194e:	dd 1c       	adc	r13, r13
    1950:	a6 01       	movw	r20, r12
    1952:	42 0d       	add	r20, r2
    1954:	53 1d       	adc	r21, r3
    1956:	c9 01       	movw	r24, r18
    1958:	93 01       	movw	r18, r6
    195a:	87 01       	movw	r16, r14
    195c:	0e 94 7b 07 	call	0xef6	; 0xef6 <fillRect>

	// draw four corners
	fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	9c 81       	ldd	r25, Y+4	; 0x04
    1964:	88 0e       	add	r8, r24
    1966:	99 1e       	adc	r9, r25
    1968:	c6 01       	movw	r24, r12
    196a:	86 0d       	add	r24, r6
    196c:	97 1d       	adc	r25, r7
    196e:	6c 01       	movw	r12, r24
    1970:	08 94       	sec
    1972:	c1 08       	sbc	r12, r1
    1974:	d1 08       	sbc	r13, r1
    1976:	c2 01       	movw	r24, r4
    1978:	82 0d       	add	r24, r2
    197a:	93 1d       	adc	r25, r3
    197c:	eb 81       	ldd	r30, Y+3	; 0x03
    197e:	fc 81       	ldd	r31, Y+4	; 0x04
    1980:	8e 1b       	sub	r24, r30
    1982:	9f 0b       	sbc	r25, r31
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	b4 01       	movw	r22, r8
    1988:	af 01       	movw	r20, r30
    198a:	21 e0       	ldi	r18, 0x01	; 1
    198c:	86 01       	movw	r16, r12
    198e:	0e 94 9f 0a 	call	0x153e	; 0x153e <fillCircleHelper>
	fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	b4 01       	movw	r22, r8
    1998:	4b 81       	ldd	r20, Y+3	; 0x03
    199a:	5c 81       	ldd	r21, Y+4	; 0x04
    199c:	22 e0       	ldi	r18, 0x02	; 2
    199e:	0e 94 9f 0a 	call	0x153e	; 0x153e <fillCircleHelper>
}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	1f 91       	pop	r17
    19b0:	0f 91       	pop	r16
    19b2:	ff 90       	pop	r15
    19b4:	ef 90       	pop	r14
    19b6:	df 90       	pop	r13
    19b8:	cf 90       	pop	r12
    19ba:	bf 90       	pop	r11
    19bc:	af 90       	pop	r10
    19be:	9f 90       	pop	r9
    19c0:	8f 90       	pop	r8
    19c2:	7f 90       	pop	r7
    19c4:	6f 90       	pop	r6
    19c6:	5f 90       	pop	r5
    19c8:	4f 90       	pop	r4
    19ca:	3f 90       	pop	r3
    19cc:	2f 90       	pop	r2
    19ce:	08 95       	ret

000019d0 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
    19d0:	2f 92       	push	r2
    19d2:	3f 92       	push	r3
    19d4:	4f 92       	push	r4
    19d6:	5f 92       	push	r5
    19d8:	6f 92       	push	r6
    19da:	7f 92       	push	r7
    19dc:	8f 92       	push	r8
    19de:	9f 92       	push	r9
    19e0:	af 92       	push	r10
    19e2:	bf 92       	push	r11
    19e4:	cf 92       	push	r12
    19e6:	df 92       	push	r13
    19e8:	ef 92       	push	r14
    19ea:	ff 92       	push	r15
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	7c 01       	movw	r14, r24
    19f6:	6b 01       	movw	r12, r22
    19f8:	5a 01       	movw	r10, r20
    19fa:	a9 01       	movw	r20, r18
    19fc:	38 01       	movw	r6, r16
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    19fe:	c9 01       	movw	r24, r18
    1a00:	86 1b       	sub	r24, r22
    1a02:	97 0b       	sbc	r25, r23
    1a04:	1a f4       	brpl	.+6      	; 0x1a0c <drawLine+0x3c>
    1a06:	90 95       	com	r25
    1a08:	81 95       	neg	r24
    1a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0c:	95 01       	movw	r18, r10
    1a0e:	2e 19       	sub	r18, r14
    1a10:	3f 09       	sbc	r19, r15
    1a12:	1a f4       	brpl	.+6      	; 0x1a1a <drawLine+0x4a>
    1a14:	30 95       	com	r19
    1a16:	21 95       	neg	r18
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1a:	88 24       	eor	r8, r8
    1a1c:	99 24       	eor	r9, r9
    1a1e:	83 94       	inc	r8
    1a20:	28 17       	cp	r18, r24
    1a22:	39 07       	cpc	r19, r25
    1a24:	14 f0       	brlt	.+4      	; 0x1a2a <drawLine+0x5a>
    1a26:	88 24       	eor	r8, r8
    1a28:	99 24       	eor	r9, r9
	if (steep) {
    1a2a:	81 14       	cp	r8, r1
    1a2c:	91 04       	cpc	r9, r1
    1a2e:	51 f0       	breq	.+20     	; 0x1a44 <drawLine+0x74>
    1a30:	9a 2d       	mov	r25, r10
    1a32:	8b 2d       	mov	r24, r11
		_swap_int16_t(x0, y0);
		_swap_int16_t(x1, y1);
    1a34:	5a 01       	movw	r10, r20
    1a36:	49 2f       	mov	r20, r25
    1a38:	58 2f       	mov	r21, r24
	fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
}

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
	if (steep) {
    1a3a:	9e 2d       	mov	r25, r14
    1a3c:	8f 2d       	mov	r24, r15
		_swap_int16_t(x0, y0);
    1a3e:	76 01       	movw	r14, r12
    1a40:	c9 2e       	mov	r12, r25
    1a42:	d8 2e       	mov	r13, r24
		_swap_int16_t(x1, y1);
	}

	if (x0 > x1) {
    1a44:	ae 14       	cp	r10, r14
    1a46:	bf 04       	cpc	r11, r15
    1a48:	54 f4       	brge	.+20     	; 0x1a5e <drawLine+0x8e>
    1a4a:	9c 2d       	mov	r25, r12
    1a4c:	8d 2d       	mov	r24, r13
		_swap_int16_t(x0, x1);
		_swap_int16_t(y0, y1);
    1a4e:	6a 01       	movw	r12, r20
    1a50:	49 2f       	mov	r20, r25
    1a52:	58 2f       	mov	r21, r24
	if (steep) {
		_swap_int16_t(x0, y0);
		_swap_int16_t(x1, y1);
	}

	if (x0 > x1) {
    1a54:	9e 2d       	mov	r25, r14
    1a56:	8f 2d       	mov	r24, r15
		_swap_int16_t(x0, x1);
    1a58:	75 01       	movw	r14, r10
    1a5a:	a9 2e       	mov	r10, r25
    1a5c:	b8 2e       	mov	r11, r24
		_swap_int16_t(y0, y1);
	}

	int16_t dx, dy;
	dx = x1 - x0;
	dy = abs(y1 - y0);
    1a5e:	ca 01       	movw	r24, r20
    1a60:	8c 19       	sub	r24, r12
    1a62:	9d 09       	sbc	r25, r13
    1a64:	1a f4       	brpl	.+6      	; 0x1a6c <drawLine+0x9c>
    1a66:	90 95       	com	r25
    1a68:	81 95       	neg	r24
    1a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6c:	8c 01       	movw	r16, r24

	int16_t err = dx / 2;
	int16_t ystep;

	if (y0 < y1) {
    1a6e:	c4 16       	cp	r12, r20
    1a70:	d5 06       	cpc	r13, r21
    1a72:	24 f4       	brge	.+8      	; 0x1a7c <drawLine+0xac>
		ystep = 1;
    1a74:	22 24       	eor	r2, r2
    1a76:	33 24       	eor	r3, r3
    1a78:	23 94       	inc	r2
    1a7a:	03 c0       	rjmp	.+6      	; 0x1a82 <drawLine+0xb2>
		} else {
		ystep = -1;
    1a7c:	22 24       	eor	r2, r2
    1a7e:	2a 94       	dec	r2
    1a80:	32 2c       	mov	r3, r2
	}

	for (; x0<=x1; x0++) {
    1a82:	ae 14       	cp	r10, r14
    1a84:	bf 04       	cpc	r11, r15
    1a86:	1c f1       	brlt	.+70     	; 0x1ace <drawLine+0xfe>
		_swap_int16_t(x0, x1);
		_swap_int16_t(y0, y1);
	}

	int16_t dx, dy;
	dx = x1 - x0;
    1a88:	25 01       	movw	r4, r10
    1a8a:	4e 18       	sub	r4, r14
    1a8c:	5f 08       	sbc	r5, r15
	dy = abs(y1 - y0);

	int16_t err = dx / 2;
    1a8e:	e2 01       	movw	r28, r4
    1a90:	0a f4       	brpl	.+2      	; 0x1a94 <drawLine+0xc4>
    1a92:	21 96       	adiw	r28, 0x01	; 1
    1a94:	d5 95       	asr	r29
    1a96:	c7 95       	ror	r28
		} else {
		ystep = -1;
	}

	for (; x0<=x1; x0++) {
		if (steep) {
    1a98:	81 14       	cp	r8, r1
    1a9a:	91 04       	cpc	r9, r1
    1a9c:	31 f0       	breq	.+12     	; 0x1aaa <drawLine+0xda>
			drawPixel(y0, x0, color);
    1a9e:	c6 01       	movw	r24, r12
    1aa0:	b7 01       	movw	r22, r14
    1aa2:	a3 01       	movw	r20, r6
    1aa4:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
    1aa8:	05 c0       	rjmp	.+10     	; 0x1ab4 <drawLine+0xe4>
			} else {
			drawPixel(x0, y0, color);
    1aaa:	c7 01       	movw	r24, r14
    1aac:	b6 01       	movw	r22, r12
    1aae:	a3 01       	movw	r20, r6
    1ab0:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <drawPixel>
		}
		err -= dy;
    1ab4:	c0 1b       	sub	r28, r16
    1ab6:	d1 0b       	sbc	r29, r17
		if (err < 0) {
    1ab8:	22 f4       	brpl	.+8      	; 0x1ac2 <drawLine+0xf2>
			y0 += ystep;
    1aba:	c2 0c       	add	r12, r2
    1abc:	d3 1c       	adc	r13, r3
			err += dx;
    1abe:	c4 0d       	add	r28, r4
    1ac0:	d5 1d       	adc	r29, r5
		ystep = 1;
		} else {
		ystep = -1;
	}

	for (; x0<=x1; x0++) {
    1ac2:	08 94       	sec
    1ac4:	e1 1c       	adc	r14, r1
    1ac6:	f1 1c       	adc	r15, r1
    1ac8:	ae 14       	cp	r10, r14
    1aca:	bf 04       	cpc	r11, r15
    1acc:	2c f7       	brge	.-54     	; 0x1a98 <drawLine+0xc8>
		if (err < 0) {
			y0 += ystep;
			err += dx;
		}
	}
}
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	1f 91       	pop	r17
    1ad4:	0f 91       	pop	r16
    1ad6:	ff 90       	pop	r15
    1ad8:	ef 90       	pop	r14
    1ada:	df 90       	pop	r13
    1adc:	cf 90       	pop	r12
    1ade:	bf 90       	pop	r11
    1ae0:	af 90       	pop	r10
    1ae2:	9f 90       	pop	r9
    1ae4:	8f 90       	pop	r8
    1ae6:	7f 90       	pop	r7
    1ae8:	6f 90       	pop	r6
    1aea:	5f 90       	pop	r5
    1aec:	4f 90       	pop	r4
    1aee:	3f 90       	pop	r3
    1af0:	2f 90       	pop	r2
    1af2:	08 95       	ret

00001af4 <drawTriangle>:
// Draw a triangle
void drawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
    1af4:	4f 92       	push	r4
    1af6:	5f 92       	push	r5
    1af8:	6f 92       	push	r6
    1afa:	7f 92       	push	r7
    1afc:	8f 92       	push	r8
    1afe:	9f 92       	push	r9
    1b00:	af 92       	push	r10
    1b02:	bf 92       	push	r11
    1b04:	cf 92       	push	r12
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	3c 01       	movw	r6, r24
    1b16:	2b 01       	movw	r4, r22
    1b18:	5a 01       	movw	r10, r20
    1b1a:	49 01       	movw	r8, r18
    1b1c:	e8 01       	movw	r28, r16
  drawLine(x0, y0, x1, y1, color);
    1b1e:	86 01       	movw	r16, r12
    1b20:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <drawLine>
  drawLine(x1, y1, x2, y2, color);
    1b24:	c5 01       	movw	r24, r10
    1b26:	b4 01       	movw	r22, r8
    1b28:	ae 01       	movw	r20, r28
    1b2a:	97 01       	movw	r18, r14
    1b2c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <drawLine>
  drawLine(x2, y2, x0, y0, color);
    1b30:	ce 01       	movw	r24, r28
    1b32:	b7 01       	movw	r22, r14
    1b34:	a3 01       	movw	r20, r6
    1b36:	92 01       	movw	r18, r4
    1b38:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <drawLine>
}
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	ff 90       	pop	r15
    1b46:	ef 90       	pop	r14
    1b48:	df 90       	pop	r13
    1b4a:	cf 90       	pop	r12
    1b4c:	bf 90       	pop	r11
    1b4e:	af 90       	pop	r10
    1b50:	9f 90       	pop	r9
    1b52:	8f 90       	pop	r8
    1b54:	7f 90       	pop	r7
    1b56:	6f 90       	pop	r6
    1b58:	5f 90       	pop	r5
    1b5a:	4f 90       	pop	r4
    1b5c:	08 95       	ret

00001b5e <fillTriangle>:

// Fill a triangle
void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
    1b5e:	2f 92       	push	r2
    1b60:	3f 92       	push	r3
    1b62:	4f 92       	push	r4
    1b64:	5f 92       	push	r5
    1b66:	6f 92       	push	r6
    1b68:	7f 92       	push	r7
    1b6a:	8f 92       	push	r8
    1b6c:	9f 92       	push	r9
    1b6e:	af 92       	push	r10
    1b70:	bf 92       	push	r11
    1b72:	cf 92       	push	r12
    1b74:	df 92       	push	r13
    1b76:	ef 92       	push	r14
    1b78:	ff 92       	push	r15
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	a8 97       	sbiw	r28, 0x28	; 40
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	1c 01       	movw	r2, r24
    1b94:	7e 83       	std	Y+6, r23	; 0x06
    1b96:	6d 83       	std	Y+5, r22	; 0x05
    1b98:	58 8b       	std	Y+16, r21	; 0x10
    1b9a:	4f 87       	std	Y+15, r20	; 0x0f
    1b9c:	3a 83       	std	Y+2, r19	; 0x02
    1b9e:	29 83       	std	Y+1, r18	; 0x01
    1ba0:	18 a3       	lds	r17, 0x58
    1ba2:	0f 8f       	std	Y+31, r16	; 0x1f
    1ba4:	fa 8a       	std	Y+18, r15	; 0x12
    1ba6:	e9 8a       	std	Y+17, r14	; 0x11
    1ba8:	de 86       	std	Y+14, r13	; 0x0e
    1baa:	cd 86       	std	Y+13, r12	; 0x0d

  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1) {
    1bac:	26 17       	cp	r18, r22
    1bae:	37 07       	cpc	r19, r23
    1bb0:	5c f4       	brge	.+22     	; 0x1bc8 <fillTriangle+0x6a>
    1bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
    1bb6:	3e 83       	std	Y+6, r19	; 0x06
    1bb8:	2d 83       	std	Y+5, r18	; 0x05
    1bba:	99 83       	std	Y+1, r25	; 0x01
    1bbc:	8a 83       	std	Y+2, r24	; 0x02
void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {

  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1) {
    1bbe:	92 2d       	mov	r25, r2
    1bc0:	83 2d       	mov	r24, r3
    _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
    1bc2:	1a 01       	movw	r2, r20
    1bc4:	9f 87       	std	Y+15, r25	; 0x0f
    1bc6:	88 8b       	std	Y+16, r24	; 0x10
  }
  if (y1 > y2) {
    1bc8:	49 81       	ldd	r20, Y+1	; 0x01
    1bca:	5a 81       	ldd	r21, Y+2	; 0x02
    1bcc:	69 89       	ldd	r22, Y+17	; 0x11
    1bce:	7a 89       	ldd	r23, Y+18	; 0x12
    1bd0:	64 17       	cp	r22, r20
    1bd2:	75 07       	cpc	r23, r21
    1bd4:	74 f4       	brge	.+28     	; 0x1bf2 <fillTriangle+0x94>
    1bd6:	99 81       	ldd	r25, Y+1	; 0x01
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
    1bda:	7a 83       	std	Y+2, r23	; 0x02
    1bdc:	69 83       	std	Y+1, r22	; 0x01
    1bde:	99 8b       	std	Y+17, r25	; 0x11
    1be0:	8a 8b       	std	Y+18, r24	; 0x12

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1) {
    _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
  }
  if (y1 > y2) {
    1be2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1be4:	88 89       	ldd	r24, Y+16	; 0x10
    _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
    1be6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1be8:	f8 a1       	lds	r31, 0x48
    1bea:	f8 8b       	std	Y+16, r31	; 0x10
    1bec:	ef 87       	std	Y+15, r30	; 0x0f
    1bee:	9f 8f       	std	Y+31, r25	; 0x1f
    1bf0:	88 a3       	lds	r24, 0x58
  }
  if (y0 > y1) {
    1bf2:	2d 81       	ldd	r18, Y+5	; 0x05
    1bf4:	3e 81       	ldd	r19, Y+6	; 0x06
    1bf6:	49 81       	ldd	r20, Y+1	; 0x01
    1bf8:	5a 81       	ldd	r21, Y+2	; 0x02
    1bfa:	42 17       	cp	r20, r18
    1bfc:	53 07       	cpc	r21, r19
    1bfe:	64 f4       	brge	.+24     	; 0x1c18 <fillTriangle+0xba>
    1c00:	9d 81       	ldd	r25, Y+5	; 0x05
    1c02:	8e 81       	ldd	r24, Y+6	; 0x06
    _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
    1c04:	5e 83       	std	Y+6, r21	; 0x06
    1c06:	4d 83       	std	Y+5, r20	; 0x05
    1c08:	99 83       	std	Y+1, r25	; 0x01
    1c0a:	8a 83       	std	Y+2, r24	; 0x02
    _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
  }
  if (y1 > y2) {
    _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
  }
  if (y0 > y1) {
    1c0c:	92 2d       	mov	r25, r2
    1c0e:	83 2d       	mov	r24, r3
    _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
    1c10:	2f 84       	ldd	r2, Y+15	; 0x0f
    1c12:	38 88       	ldd	r3, Y+16	; 0x10
    1c14:	9f 87       	std	Y+15, r25	; 0x0f
    1c16:	88 8b       	std	Y+16, r24	; 0x10
  }

  if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
    1c18:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1c:	a9 89       	ldd	r26, Y+17	; 0x11
    1c1e:	ba 89       	ldd	r27, Y+18	; 0x12
    1c20:	8a 17       	cp	r24, r26
    1c22:	9b 07       	cpc	r25, r27
    1c24:	59 f5       	brne	.+86     	; 0x1c7c <fillTriangle+0x11e>
    a = b = x0;
    if(x1 < a)      a = x1;
    1c26:	ef 85       	ldd	r30, Y+15	; 0x0f
    1c28:	f8 89       	ldd	r31, Y+16	; 0x10
    1c2a:	e2 15       	cp	r30, r2
    1c2c:	f3 05       	cpc	r31, r3
    1c2e:	34 f0       	brlt	.+12     	; 0x1c3c <fillTriangle+0xde>
    else if(x1 > b) b = x1;
    1c30:	2e 16       	cp	r2, r30
    1c32:	3f 06       	cpc	r3, r31
    1c34:	3c f0       	brlt	.+14     	; 0x1c44 <fillTriangle+0xe6>
  if (y0 > y1) {
    _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
  }

  if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
    a = b = x0;
    1c36:	a1 01       	movw	r20, r2
    1c38:	c1 01       	movw	r24, r2
    1c3a:	07 c0       	rjmp	.+14     	; 0x1c4a <fillTriangle+0xec>
    1c3c:	a1 01       	movw	r20, r2
    if(x1 < a)      a = x1;
    1c3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c40:	98 89       	ldd	r25, Y+16	; 0x10
    1c42:	03 c0       	rjmp	.+6      	; 0x1c4a <fillTriangle+0xec>
    else if(x1 > b) b = x1;
    1c44:	4f 85       	ldd	r20, Y+15	; 0x0f
    1c46:	58 89       	ldd	r21, Y+16	; 0x10
  if (y0 > y1) {
    _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
  }

  if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
    a = b = x0;
    1c48:	c1 01       	movw	r24, r2
    if(x1 < a)      a = x1;
    else if(x1 > b) b = x1;
    if(x2 < a)      a = x2;
    1c4a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1c4c:	38 a1       	lds	r19, 0x48
    1c4e:	28 17       	cp	r18, r24
    1c50:	39 07       	cpc	r19, r25
    1c52:	24 f0       	brlt	.+8      	; 0x1c5c <fillTriangle+0xfe>
    else if(x2 > b) b = x2;
    1c54:	42 17       	cp	r20, r18
    1c56:	53 07       	cpc	r21, r19
    1c58:	24 f0       	brlt	.+8      	; 0x1c62 <fillTriangle+0x104>
    1c5a:	05 c0       	rjmp	.+10     	; 0x1c66 <fillTriangle+0x108>

  if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
    a = b = x0;
    if(x1 < a)      a = x1;
    else if(x1 > b) b = x1;
    if(x2 < a)      a = x2;
    1c5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c5e:	98 a1       	lds	r25, 0x48
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <fillTriangle+0x108>
    else if(x2 > b) b = x2;
    1c62:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1c64:	58 a1       	lds	r21, 0x48
    drawFastHLine(a, y0, b-a+1, color);
    1c66:	48 1b       	sub	r20, r24
    1c68:	59 0b       	sbc	r21, r25
    1c6a:	4f 5f       	subi	r20, 0xFF	; 255
    1c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6e:	6d 81       	ldd	r22, Y+5	; 0x05
    1c70:	7e 81       	ldd	r23, Y+6	; 0x06
    1c72:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c74:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c76:	0e 94 3e 07 	call	0xe7c	; 0xe7c <drawFastHLine>
    return;
    1c7a:	3e c1       	rjmp	.+636    	; 0x1ef8 <fillTriangle+0x39a>
  }

  int16_t
    dx01 = x1 - x0,
    1c7c:	2f 85       	ldd	r18, Y+15	; 0x0f
    1c7e:	38 89       	ldd	r19, Y+16	; 0x10
    1c80:	22 19       	sub	r18, r2
    1c82:	33 09       	sbc	r19, r3
    dy01 = y1 - y0,
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	9a 81       	ldd	r25, Y+2	; 0x02
    1c88:	4d 81       	ldd	r20, Y+5	; 0x05
    1c8a:	5e 81       	ldd	r21, Y+6	; 0x06
    1c8c:	84 1b       	sub	r24, r20
    1c8e:	95 0b       	sbc	r25, r21
    dx02 = x2 - x0,
    1c90:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c92:	78 a1       	lds	r23, 0x48
    1c94:	62 19       	sub	r22, r2
    1c96:	73 09       	sbc	r23, r3
    1c98:	7a a3       	lds	r23, 0x5a
    1c9a:	69 a3       	lds	r22, 0x59
    dy02 = y2 - y0,
    1c9c:	a9 89       	ldd	r26, Y+17	; 0x11
    1c9e:	ba 89       	ldd	r27, Y+18	; 0x12
    1ca0:	a4 1b       	sub	r26, r20
    1ca2:	b5 0b       	sbc	r27, r21
    1ca4:	bc a3       	lds	r27, 0x5c
    1ca6:	ab a3       	lds	r26, 0x5b
    dx12 = x2 - x1,
    dy12 = y2 - y1;
    1ca8:	e9 89       	ldd	r30, Y+17	; 0x11
    1caa:	fa 89       	ldd	r31, Y+18	; 0x12
    1cac:	49 81       	ldd	r20, Y+1	; 0x01
    1cae:	5a 81       	ldd	r21, Y+2	; 0x02
    1cb0:	e4 1b       	sub	r30, r20
    1cb2:	f5 0b       	sbc	r31, r21
    1cb4:	fe a3       	lds	r31, 0x5e
    1cb6:	ed a3       	lds	r30, 0x5d
  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if(y1 == y2) last = y1;   // Include y1 scanline
    1cb8:	69 89       	ldd	r22, Y+17	; 0x11
    1cba:	7a 89       	ldd	r23, Y+18	; 0x12
    1cbc:	46 17       	cp	r20, r22
    1cbe:	57 07       	cpc	r21, r23
    1cc0:	29 f0       	breq	.+10     	; 0x1ccc <fillTriangle+0x16e>
  else         last = y1-1; // Skip it
    1cc2:	41 50       	subi	r20, 0x01	; 1
    1cc4:	50 40       	sbci	r21, 0x00	; 0
    1cc6:	5a 87       	std	Y+10, r21	; 0x0a
    1cc8:	49 87       	std	Y+9, r20	; 0x09
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <fillTriangle+0x176>
  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if(y1 == y2) last = y1;   // Include y1 scanline
    1ccc:	a9 81       	ldd	r26, Y+1	; 0x01
    1cce:	ba 81       	ldd	r27, Y+2	; 0x02
    1cd0:	ba 87       	std	Y+10, r27	; 0x0a
    1cd2:	a9 87       	std	Y+9, r26	; 0x09
  else         last = y1-1; // Skip it

  for(y=y0; y<=last; y++) {
    1cd4:	ed 81       	ldd	r30, Y+5	; 0x05
    1cd6:	fe 81       	ldd	r31, Y+6	; 0x06
    1cd8:	49 85       	ldd	r20, Y+9	; 0x09
    1cda:	5a 85       	ldd	r21, Y+10	; 0x0a
    1cdc:	4e 17       	cp	r20, r30
    1cde:	5f 07       	cpc	r21, r31
    1ce0:	0c f4       	brge	.+2      	; 0x1ce4 <fillTriangle+0x186>
    1ce2:	70 c0       	rjmp	.+224    	; 0x1dc4 <fillTriangle+0x266>
    1ce4:	8f 01       	movw	r16, r30
    dy02 = y2 - y0,
    dx12 = x2 - x1,
    dy12 = y2 - y1;
  int32_t
    sa   = 0,
    sb   = 0;
    1ce6:	cc 24       	eor	r12, r12
    1ce8:	dd 24       	eor	r13, r13
    1cea:	76 01       	movw	r14, r12
    dx02 = x2 - x0,
    dy02 = y2 - y0,
    dx12 = x2 - x1,
    dy12 = y2 - y1;
  int32_t
    sa   = 0,
    1cec:	88 24       	eor	r8, r8
    1cee:	99 24       	eor	r9, r9
    1cf0:	54 01       	movw	r10, r8
  // (flat-topped triangle).
  if(y1 == y2) last = y1;   // Include y1 scanline
  else         last = y1-1; // Skip it

  for(y=y0; y<=last; y++) {
    a   = x0 + sa / dy01;
    1cf2:	ac 01       	movw	r20, r24
    1cf4:	66 27       	eor	r22, r22
    1cf6:	57 fd       	sbrc	r21, 7
    1cf8:	60 95       	com	r22
    1cfa:	76 2f       	mov	r23, r22
    1cfc:	4b 8b       	std	Y+19, r20	; 0x13
    1cfe:	5c 8b       	std	Y+20, r21	; 0x14
    1d00:	6d 8b       	std	Y+21, r22	; 0x15
    1d02:	7e 8b       	std	Y+22, r23	; 0x16
    b   = x0 + sb / dy02;
    1d04:	6b a1       	lds	r22, 0x4b
    1d06:	7c a1       	lds	r23, 0x4c
    1d08:	2b 01       	movw	r4, r22
    1d0a:	66 24       	eor	r6, r6
    1d0c:	57 fc       	sbrc	r5, 7
    1d0e:	60 94       	com	r6
    1d10:	76 2c       	mov	r7, r6
    sa += dx01;
    1d12:	c9 01       	movw	r24, r18
    1d14:	aa 27       	eor	r26, r26
    1d16:	97 fd       	sbrc	r25, 7
    1d18:	a0 95       	com	r26
    1d1a:	ba 2f       	mov	r27, r26
    1d1c:	8f 8b       	std	Y+23, r24	; 0x17
    1d1e:	98 8f       	std	Y+24, r25	; 0x18
    1d20:	a9 8f       	std	Y+25, r26	; 0x19
    1d22:	ba 8f       	std	Y+26, r27	; 0x1a
    sb += dx02;
    1d24:	29 a1       	lds	r18, 0x49
    1d26:	3a a1       	lds	r19, 0x4a
    1d28:	44 27       	eor	r20, r20
    1d2a:	37 fd       	sbrc	r19, 7
    1d2c:	40 95       	com	r20
    1d2e:	54 2f       	mov	r21, r20
    1d30:	2b 8f       	std	Y+27, r18	; 0x1b
    1d32:	3c 8f       	std	Y+28, r19	; 0x1c
    1d34:	4d 8f       	std	Y+29, r20	; 0x1d
    1d36:	5e 8f       	std	Y+30, r21	; 0x1e
  // (flat-topped triangle).
  if(y1 == y2) last = y1;   // Include y1 scanline
  else         last = y1-1; // Skip it

  for(y=y0; y<=last; y++) {
    a   = x0 + sa / dy01;
    1d38:	c5 01       	movw	r24, r10
    1d3a:	b4 01       	movw	r22, r8
    1d3c:	2b 89       	ldd	r18, Y+19	; 0x13
    1d3e:	3c 89       	ldd	r19, Y+20	; 0x14
    1d40:	4d 89       	ldd	r20, Y+21	; 0x15
    1d42:	5e 89       	ldd	r21, Y+22	; 0x16
    1d44:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divmodsi4>
    1d48:	b1 01       	movw	r22, r2
    1d4a:	62 0f       	add	r22, r18
    1d4c:	73 1f       	adc	r23, r19
    1d4e:	78 a7       	lds	r23, 0x78
    1d50:	6f a3       	lds	r22, 0x5f
    b   = x0 + sb / dy02;
    1d52:	c7 01       	movw	r24, r14
    1d54:	b6 01       	movw	r22, r12
    1d56:	a3 01       	movw	r20, r6
    1d58:	92 01       	movw	r18, r4
    1d5a:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divmodsi4>
    1d5e:	a1 01       	movw	r20, r2
    1d60:	42 0f       	add	r20, r18
    1d62:	53 1f       	adc	r21, r19
    sa += dx01;
    1d64:	8f 89       	ldd	r24, Y+23	; 0x17
    1d66:	98 8d       	ldd	r25, Y+24	; 0x18
    1d68:	a9 8d       	ldd	r26, Y+25	; 0x19
    1d6a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1d6c:	88 0e       	add	r8, r24
    1d6e:	99 1e       	adc	r9, r25
    1d70:	aa 1e       	adc	r10, r26
    1d72:	bb 1e       	adc	r11, r27
    sb += dx02;
    1d74:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1d76:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1d78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d7c:	c6 0e       	add	r12, r22
    1d7e:	d7 1e       	adc	r13, r23
    1d80:	e8 1e       	adc	r14, r24
    1d82:	f9 1e       	adc	r15, r25
    /* longhand:
    a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
    */
    if(a > b) _swap_int16_t(a,b);
    1d84:	8f a1       	lds	r24, 0x4f
    1d86:	98 a5       	lds	r25, 0x68
    1d88:	48 17       	cp	r20, r24
    1d8a:	59 07       	cpc	r21, r25
    1d8c:	34 f4       	brge	.+12     	; 0x1d9a <fillTriangle+0x23c>
    1d8e:	8f a1       	lds	r24, 0x4f
    1d90:	98 a5       	lds	r25, 0x68
    1d92:	58 a7       	lds	r21, 0x78
    1d94:	4f a3       	lds	r20, 0x5f
    1d96:	48 2f       	mov	r20, r24
    1d98:	59 2f       	mov	r21, r25
    drawFastHLine(a, y, b-a+1, color);
    1d9a:	af a1       	lds	r26, 0x4f
    1d9c:	b8 a5       	lds	r27, 0x68
    1d9e:	4a 1b       	sub	r20, r26
    1da0:	5b 0b       	sbc	r21, r27
    1da2:	4f 5f       	subi	r20, 0xFF	; 255
    1da4:	5f 4f       	sbci	r21, 0xFF	; 255
    1da6:	cd 01       	movw	r24, r26
    1da8:	b8 01       	movw	r22, r16
    1daa:	2d 85       	ldd	r18, Y+13	; 0x0d
    1dac:	3e 85       	ldd	r19, Y+14	; 0x0e
    1dae:	0e 94 3e 07 	call	0xe7c	; 0xe7c <drawFastHLine>
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if(y1 == y2) last = y1;   // Include y1 scanline
  else         last = y1-1; // Skip it

  for(y=y0; y<=last; y++) {
    1db2:	0f 5f       	subi	r16, 0xFF	; 255
    1db4:	1f 4f       	sbci	r17, 0xFF	; 255
    1db6:	e9 85       	ldd	r30, Y+9	; 0x09
    1db8:	fa 85       	ldd	r31, Y+10	; 0x0a
    1dba:	e0 17       	cp	r30, r16
    1dbc:	f1 07       	cpc	r31, r17
    1dbe:	0c f0       	brlt	.+2      	; 0x1dc2 <fillTriangle+0x264>
    1dc0:	bb cf       	rjmp	.-138    	; 0x1d38 <fillTriangle+0x1da>
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <fillTriangle+0x26a>
    1dc4:	0d 81       	ldd	r16, Y+5	; 0x05
    1dc6:	1e 81       	ldd	r17, Y+6	; 0x06

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
  sb = dx02 * (y - y0);
  for(; y<=y2; y++) {
    1dc8:	29 89       	ldd	r18, Y+17	; 0x11
    1dca:	3a 89       	ldd	r19, Y+18	; 0x12
    1dcc:	20 17       	cp	r18, r16
    1dce:	31 07       	cpc	r19, r17
    1dd0:	0c f4       	brge	.+2      	; 0x1dd4 <fillTriangle+0x276>
    1dd2:	92 c0       	rjmp	.+292    	; 0x1ef8 <fillTriangle+0x39a>
  int16_t
    dx01 = x1 - x0,
    dy01 = y1 - y0,
    dx02 = x2 - x0,
    dy02 = y2 - y0,
    dx12 = x2 - x1,
    1dd4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1dd6:	58 a1       	lds	r21, 0x48
    1dd8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dda:	78 89       	ldd	r23, Y+16	; 0x10
    1ddc:	46 1b       	sub	r20, r22
    1dde:	57 0b       	sbc	r21, r23
    drawFastHLine(a, y, b-a+1, color);
  }

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
    1de0:	c8 01       	movw	r24, r16
    1de2:	a9 81       	ldd	r26, Y+1	; 0x01
    1de4:	ba 81       	ldd	r27, Y+2	; 0x02
    1de6:	8a 1b       	sub	r24, r26
    1de8:	9b 0b       	sbc	r25, r27
    1dea:	84 9f       	mul	r24, r20
    1dec:	90 01       	movw	r18, r0
    1dee:	85 9f       	mul	r24, r21
    1df0:	30 0d       	add	r19, r0
    1df2:	94 9f       	mul	r25, r20
    1df4:	30 0d       	add	r19, r0
    1df6:	11 24       	eor	r1, r1
    1df8:	49 01       	movw	r8, r18
    1dfa:	aa 24       	eor	r10, r10
    1dfc:	97 fc       	sbrc	r9, 7
    1dfe:	a0 94       	com	r10
    1e00:	ba 2c       	mov	r11, r10
  sb = dx02 * (y - y0);
    1e02:	c8 01       	movw	r24, r16
    1e04:	ed 81       	ldd	r30, Y+5	; 0x05
    1e06:	fe 81       	ldd	r31, Y+6	; 0x06
    1e08:	8e 1b       	sub	r24, r30
    1e0a:	9f 0b       	sbc	r25, r31
    1e0c:	69 a1       	lds	r22, 0x49
    1e0e:	7a a1       	lds	r23, 0x4a
    1e10:	86 9f       	mul	r24, r22
    1e12:	90 01       	movw	r18, r0
    1e14:	87 9f       	mul	r24, r23
    1e16:	30 0d       	add	r19, r0
    1e18:	96 9f       	mul	r25, r22
    1e1a:	30 0d       	add	r19, r0
    1e1c:	11 24       	eor	r1, r1
    1e1e:	69 01       	movw	r12, r18
    1e20:	ee 24       	eor	r14, r14
    1e22:	d7 fc       	sbrc	r13, 7
    1e24:	e0 94       	com	r14
    1e26:	fe 2c       	mov	r15, r14
  for(; y<=y2; y++) {
    a   = x1 + sa / dy12;
    1e28:	8d a1       	lds	r24, 0x4d
    1e2a:	9e a1       	lds	r25, 0x4e
    1e2c:	aa 27       	eor	r26, r26
    1e2e:	97 fd       	sbrc	r25, 7
    1e30:	a0 95       	com	r26
    1e32:	ba 2f       	mov	r27, r26
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	9a 83       	std	Y+2, r25	; 0x02
    1e38:	ab 83       	std	Y+3, r26	; 0x03
    1e3a:	bc 83       	std	Y+4, r27	; 0x04
    b   = x0 + sb / dy02;
    1e3c:	6b a1       	lds	r22, 0x4b
    1e3e:	7c a1       	lds	r23, 0x4c
    1e40:	88 27       	eor	r24, r24
    1e42:	77 fd       	sbrc	r23, 7
    1e44:	80 95       	com	r24
    1e46:	98 2f       	mov	r25, r24
    1e48:	6d 83       	std	Y+5, r22	; 0x05
    1e4a:	7e 83       	std	Y+6, r23	; 0x06
    1e4c:	8f 83       	std	Y+7, r24	; 0x07
    1e4e:	98 87       	std	Y+8, r25	; 0x08
    sa += dx12;
    1e50:	ca 01       	movw	r24, r20
    1e52:	aa 27       	eor	r26, r26
    1e54:	97 fd       	sbrc	r25, 7
    1e56:	a0 95       	com	r26
    1e58:	ba 2f       	mov	r27, r26
    1e5a:	89 87       	std	Y+9, r24	; 0x09
    1e5c:	9a 87       	std	Y+10, r25	; 0x0a
    1e5e:	ab 87       	std	Y+11, r26	; 0x0b
    1e60:	bc 87       	std	Y+12, r27	; 0x0c
    sb += dx02;
    1e62:	a9 a1       	lds	r26, 0x49
    1e64:	ba a1       	lds	r27, 0x4a
    1e66:	2d 01       	movw	r4, r26
    1e68:	66 24       	eor	r6, r6
    1e6a:	57 fc       	sbrc	r5, 7
    1e6c:	60 94       	com	r6
    1e6e:	76 2c       	mov	r7, r6
  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
  sb = dx02 * (y - y0);
  for(; y<=y2; y++) {
    a   = x1 + sa / dy12;
    1e70:	c5 01       	movw	r24, r10
    1e72:	b4 01       	movw	r22, r8
    1e74:	29 81       	ldd	r18, Y+1	; 0x01
    1e76:	3a 81       	ldd	r19, Y+2	; 0x02
    1e78:	4b 81       	ldd	r20, Y+3	; 0x03
    1e7a:	5c 81       	ldd	r21, Y+4	; 0x04
    1e7c:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divmodsi4>
    1e80:	ef 85       	ldd	r30, Y+15	; 0x0f
    1e82:	f8 89       	ldd	r31, Y+16	; 0x10
    1e84:	e2 0f       	add	r30, r18
    1e86:	f3 1f       	adc	r31, r19
    1e88:	fc 8b       	std	Y+20, r31	; 0x14
    1e8a:	eb 8b       	std	Y+19, r30	; 0x13
    b   = x0 + sb / dy02;
    1e8c:	c7 01       	movw	r24, r14
    1e8e:	b6 01       	movw	r22, r12
    1e90:	2d 81       	ldd	r18, Y+5	; 0x05
    1e92:	3e 81       	ldd	r19, Y+6	; 0x06
    1e94:	4f 81       	ldd	r20, Y+7	; 0x07
    1e96:	58 85       	ldd	r21, Y+8	; 0x08
    1e98:	0e 94 f5 20 	call	0x41ea	; 0x41ea <__divmodsi4>
    1e9c:	a1 01       	movw	r20, r2
    1e9e:	42 0f       	add	r20, r18
    1ea0:	53 1f       	adc	r21, r19
    sa += dx12;
    1ea2:	69 85       	ldd	r22, Y+9	; 0x09
    1ea4:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ea6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ea8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1eaa:	86 0e       	add	r8, r22
    1eac:	97 1e       	adc	r9, r23
    1eae:	a8 1e       	adc	r10, r24
    1eb0:	b9 1e       	adc	r11, r25
    sb += dx02;
    1eb2:	c4 0c       	add	r12, r4
    1eb4:	d5 1c       	adc	r13, r5
    1eb6:	e6 1c       	adc	r14, r6
    1eb8:	f7 1c       	adc	r15, r7
    /* longhand:
    a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
    */
    if(a > b) _swap_int16_t(a,b);
    1eba:	8b 89       	ldd	r24, Y+19	; 0x13
    1ebc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ebe:	48 17       	cp	r20, r24
    1ec0:	59 07       	cpc	r21, r25
    1ec2:	34 f4       	brge	.+12     	; 0x1ed0 <fillTriangle+0x372>
    1ec4:	9b 89       	ldd	r25, Y+19	; 0x13
    1ec6:	8c 89       	ldd	r24, Y+20	; 0x14
    1ec8:	5c 8b       	std	Y+20, r21	; 0x14
    1eca:	4b 8b       	std	Y+19, r20	; 0x13
    1ecc:	49 2f       	mov	r20, r25
    1ece:	58 2f       	mov	r21, r24
    drawFastHLine(a, y, b-a+1, color);
    1ed0:	ab 89       	ldd	r26, Y+19	; 0x13
    1ed2:	bc 89       	ldd	r27, Y+20	; 0x14
    1ed4:	4a 1b       	sub	r20, r26
    1ed6:	5b 0b       	sbc	r21, r27
    1ed8:	4f 5f       	subi	r20, 0xFF	; 255
    1eda:	5f 4f       	sbci	r21, 0xFF	; 255
    1edc:	cd 01       	movw	r24, r26
    1ede:	b8 01       	movw	r22, r16
    1ee0:	2d 85       	ldd	r18, Y+13	; 0x0d
    1ee2:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ee4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <drawFastHLine>

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
  sb = dx02 * (y - y0);
  for(; y<=y2; y++) {
    1ee8:	0f 5f       	subi	r16, 0xFF	; 255
    1eea:	1f 4f       	sbci	r17, 0xFF	; 255
    1eec:	e9 89       	ldd	r30, Y+17	; 0x11
    1eee:	fa 89       	ldd	r31, Y+18	; 0x12
    1ef0:	e0 17       	cp	r30, r16
    1ef2:	f1 07       	cpc	r31, r17
    1ef4:	0c f0       	brlt	.+2      	; 0x1ef8 <fillTriangle+0x39a>
    1ef6:	bc cf       	rjmp	.-136    	; 0x1e70 <fillTriangle+0x312>
    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
    */
    if(a > b) _swap_int16_t(a,b);
    drawFastHLine(a, y, b-a+1, color);
  }
}
    1ef8:	a8 96       	adiw	r28, 0x28	; 40
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	df 91       	pop	r29
    1f06:	cf 91       	pop	r28
    1f08:	1f 91       	pop	r17
    1f0a:	0f 91       	pop	r16
    1f0c:	ff 90       	pop	r15
    1f0e:	ef 90       	pop	r14
    1f10:	df 90       	pop	r13
    1f12:	cf 90       	pop	r12
    1f14:	bf 90       	pop	r11
    1f16:	af 90       	pop	r10
    1f18:	9f 90       	pop	r9
    1f1a:	8f 90       	pop	r8
    1f1c:	7f 90       	pop	r7
    1f1e:	6f 90       	pop	r6
    1f20:	5f 90       	pop	r5
    1f22:	4f 90       	pop	r4
    1f24:	3f 90       	pop	r3
    1f26:	2f 90       	pop	r2
    1f28:	08 95       	ret

00001f2a <DisplayRun>:

void DisplayRun ()
{
	SPI_MasterInit();                  //Initialize SPI Master
    1f2a:	0e 94 56 05 	call	0xaac	; 0xaac <SPI_MasterInit>
	displayInit();	
    1f2e:	0e 94 8b 05 	call	0xb16	; 0xb16 <displayInit>
}
    1f32:	08 95       	ret

00001f34 <initSprinkler>:
	unsigned char StartHours;
	
} sprinkler;

void initSprinkler (sprinkler *s, int LN, bool R_S, bool ES, int ET, int RL, unsigned char SM, unsigned char SH  )
{
    1f34:	af 92       	push	r10
    1f36:	cf 92       	push	r12
    1f38:	ef 92       	push	r14
    1f3a:	ff 92       	push	r15
    1f3c:	0f 93       	push	r16
    1f3e:	1f 93       	push	r17
    1f40:	fc 01       	movw	r30, r24
	s->LineNumber = LN;
    1f42:	71 83       	std	Z+1, r23	; 0x01
    1f44:	60 83       	st	Z, r22
	s->RunStatus = R_S;
    1f46:	42 83       	std	Z+2, r20	; 0x02
	s->ErrorStatus = ES;
    1f48:	23 83       	std	Z+3, r18	; 0x03
	s->ElapsedTime = ET;
    1f4a:	15 83       	std	Z+5, r17	; 0x05
    1f4c:	04 83       	std	Z+4, r16	; 0x04
	s->RunLength = RL;
    1f4e:	f7 82       	std	Z+7, r15	; 0x07
    1f50:	e6 82       	std	Z+6, r14	; 0x06
	s->StartMinutes = SM;
    1f52:	c0 86       	std	Z+8, r12	; 0x08
	s->StartHours = SH;
    1f54:	a1 86       	std	Z+9, r10	; 0x09
}
    1f56:	1f 91       	pop	r17
    1f58:	0f 91       	pop	r16
    1f5a:	ff 90       	pop	r15
    1f5c:	ef 90       	pop	r14
    1f5e:	cf 90       	pop	r12
    1f60:	af 90       	pop	r10
    1f62:	08 95       	ret

00001f64 <UpdateSprinklers>:

void UpdateSprinklers (sprinkler *s1, bool status1, sprinkler *s2, bool status2  )
{
    1f64:	cf 93       	push	r28
    1f66:	dc 01       	movw	r26, r24
    1f68:	fa 01       	movw	r30, r20
	unsigned char TransmitVar = 0x00;
	//PORTA = 0xF0;
	
	//Lin1
	if( status1 == true && (s1->LineNumber == 1) )
    1f6a:	66 23       	and	r22, r22
    1f6c:	61 f0       	breq	.+24     	; 0x1f86 <UpdateSprinklers+0x22>
    1f6e:	8d 91       	ld	r24, X+
    1f70:	9c 91       	ld	r25, X
    1f72:	11 97       	sbiw	r26, 0x01	; 1
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	91 05       	cpc	r25, r1
    1f78:	89 f4       	brne	.+34     	; 0x1f9c <UpdateSprinklers+0x38>
	{
		s1->RunStatus = true;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	12 96       	adiw	r26, 0x02	; 2
    1f7e:	8c 93       	st	X, r24
    1f80:	12 97       	sbiw	r26, 0x02	; 2
		TransmitVar = TransmitVar | 0xF0;
    1f82:	c0 ef       	ldi	r28, 0xF0	; 240
    1f84:	0e c0       	rjmp	.+28     	; 0x1fa2 <UpdateSprinklers+0x3e>
		
	}
	else if ( status1 == false && (s1->LineNumber == 1) )
    1f86:	8d 91       	ld	r24, X+
    1f88:	9c 91       	ld	r25, X
    1f8a:	11 97       	sbiw	r26, 0x01	; 1
    1f8c:	81 30       	cpi	r24, 0x01	; 1
    1f8e:	91 05       	cpc	r25, r1
    1f90:	39 f4       	brne	.+14     	; 0x1fa0 <UpdateSprinklers+0x3c>
	{
		s1->RunStatus = false;
    1f92:	12 96       	adiw	r26, 0x02	; 2
    1f94:	1c 92       	st	X, r1
    1f96:	12 97       	sbiw	r26, 0x02	; 2
		TransmitVar = TransmitVar & 0x0F;
    1f98:	c0 e0       	ldi	r28, 0x00	; 0
    1f9a:	03 c0       	rjmp	.+6      	; 0x1fa2 <UpdateSprinklers+0x3e>
	s->StartHours = SH;
}

void UpdateSprinklers (sprinkler *s1, bool status1, sprinkler *s2, bool status2  )
{
	unsigned char TransmitVar = 0x00;
    1f9c:	c0 e0       	ldi	r28, 0x00	; 0
    1f9e:	01 c0       	rjmp	.+2      	; 0x1fa2 <UpdateSprinklers+0x3e>
    1fa0:	c0 e0       	ldi	r28, 0x00	; 0
		TransmitVar = TransmitVar & 0x0F;
		
	} 
	
	//Line2
	if( status2 == true && (s2->LineNumber == 2) )
    1fa2:	22 23       	and	r18, r18
    1fa4:	59 f0       	breq	.+22     	; 0x1fbc <UpdateSprinklers+0x58>
    1fa6:	80 81       	ld	r24, Z
    1fa8:	91 81       	ldd	r25, Z+1	; 0x01
    1faa:	82 30       	cpi	r24, 0x02	; 2
    1fac:	91 05       	cpc	r25, r1
    1fae:	69 f4       	brne	.+26     	; 0x1fca <UpdateSprinklers+0x66>
	{
		s1->RunStatus = true;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	12 96       	adiw	r26, 0x02	; 2
    1fb4:	8c 93       	st	X, r24
    1fb6:	12 97       	sbiw	r26, 0x02	; 2
		TransmitVar = TransmitVar | 0x0F;
    1fb8:	cf 60       	ori	r28, 0x0F	; 15
    1fba:	07 c0       	rjmp	.+14     	; 0x1fca <UpdateSprinklers+0x66>
			
	}
	else if ( status2 == false && (s2->LineNumber == 2) )
    1fbc:	80 81       	ld	r24, Z
    1fbe:	91 81       	ldd	r25, Z+1	; 0x01
    1fc0:	82 30       	cpi	r24, 0x02	; 2
    1fc2:	91 05       	cpc	r25, r1
    1fc4:	11 f4       	brne	.+4      	; 0x1fca <UpdateSprinklers+0x66>
	{
		s2->RunStatus = false;
    1fc6:	12 82       	std	Z+2, r1	; 0x02
		TransmitVar = TransmitVar & 0xF0;
    1fc8:	c0 7f       	andi	r28, 0xF0	; 240
		
	}
	
	if(PreviousTransmitVar != TransmitVar)
    1fca:	80 91 8a 03 	lds	r24, 0x038A
    1fce:	8c 17       	cp	r24, r28
    1fd0:	59 f0       	breq	.+22     	; 0x1fe8 <UpdateSprinklers+0x84>
	{
		//Send The Transmit Variable
		USART_Send(TransmitVar,1);
    1fd2:	8c 2f       	mov	r24, r28
    1fd4:	61 e0       	ldi	r22, 0x01	; 1
    1fd6:	0e 94 32 05 	call	0xa64	; 0xa64 <USART_Send>
		while (!USART_HasTransmitted(1));
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	0e 94 fd 04 	call	0x9fa	; 0x9fa <USART_HasTransmitted>
    1fe0:	88 23       	and	r24, r24
    1fe2:	d9 f3       	breq	.-10     	; 0x1fda <UpdateSprinklers+0x76>
		PreviousTransmitVar = TransmitVar;
    1fe4:	c0 93 8a 03 	sts	0x038A, r28
	}
	
}
    1fe8:	cf 91       	pop	r28
    1fea:	08 95       	ret

00001fec <initSystem>:


#endif 

void initSystem (system *s, int T, int H, unsigned char Hr, unsigned Min, int L1Run, int L2Run, bool s1, bool s2)
{
    1fec:	4f 92       	push	r4
    1fee:	5f 92       	push	r5
    1ff0:	6f 92       	push	r6
    1ff2:	7f 92       	push	r7
    1ff4:	8f 92       	push	r8
    1ff6:	af 92       	push	r10
    1ff8:	cf 92       	push	r12
    1ffa:	df 92       	push	r13
    1ffc:	ef 92       	push	r14
    1ffe:	ff 92       	push	r15
    2000:	0f 93       	push	r16
    2002:	1f 93       	push	r17
    2004:	cf 93       	push	r28
    2006:	df 93       	push	r29
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	3c 01       	movw	r6, r24
    200e:	26 01       	movw	r4, r12
	s->Line_1_Status = false;
	s->Line_1_Status = true;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	d3 01       	movw	r26, r6
    2014:	16 96       	adiw	r26, 0x06	; 6
    2016:	8c 93       	st	X, r24
    2018:	16 97       	sbiw	r26, 0x06	; 6
	s->Temp = T;
    201a:	11 96       	adiw	r26, 0x01	; 1
    201c:	7c 93       	st	X, r23
    201e:	6e 93       	st	-X, r22
	s->Humid = H;
    2020:	13 96       	adiw	r26, 0x03	; 3
    2022:	5c 93       	st	X, r21
    2024:	4e 93       	st	-X, r20
    2026:	12 97       	sbiw	r26, 0x02	; 2
	s->Hours = Hr;
    2028:	14 96       	adiw	r26, 0x04	; 4
    202a:	2c 93       	st	X, r18
    202c:	14 97       	sbiw	r26, 0x04	; 4
	s->Minutes = Min;
    202e:	15 96       	adiw	r26, 0x05	; 5
    2030:	0c 93       	st	X, r16
    2032:	15 97       	sbiw	r26, 0x05	; 5
	s->Line_1_RunTime = L1Run;
    2034:	1f 96       	adiw	r26, 0x0f	; 15
    2036:	fc 92       	st	X, r15
    2038:	ee 92       	st	-X, r14
    203a:	1e 97       	sbiw	r26, 0x0e	; 14
	s->Line_2_RunTime = L2Run;
    203c:	51 96       	adiw	r26, 0x11	; 17
    203e:	dc 92       	st	X, r13
    2040:	ce 92       	st	-X, r12
    2042:	50 97       	sbiw	r26, 0x10	; 16
	s->L1_Start_Hours = 7;
    2044:	87 e0       	ldi	r24, 0x07	; 7
    2046:	1b 96       	adiw	r26, 0x0b	; 11
    2048:	8c 93       	st	X, r24
    204a:	1b 97       	sbiw	r26, 0x0b	; 11
	s->L1_Start_Minutes = 0;
    204c:	1a 96       	adiw	r26, 0x0a	; 10
    204e:	1c 92       	st	X, r1
    2050:	1a 97       	sbiw	r26, 0x0a	; 10
	s->L2_Start_Hours = 8;
    2052:	88 e0       	ldi	r24, 0x08	; 8
    2054:	1d 96       	adiw	r26, 0x0d	; 13
    2056:	8c 93       	st	X, r24
    2058:	1d 97       	sbiw	r26, 0x0d	; 13
	s->L2_Start_Minutes = 30;
    205a:	8e e1       	ldi	r24, 0x1E	; 30
    205c:	1c 96       	adiw	r26, 0x0c	; 12
    205e:	8c 93       	st	X, r24
	s->SP1 = malloc (sizeof(sprinkler));
    2060:	8a e0       	ldi	r24, 0x0A	; 10
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	0e 94 32 21 	call	0x4264	; 0x4264 <malloc>
    2068:	08 2f       	mov	r16, r24
    206a:	19 2f       	mov	r17, r25
    206c:	f3 01       	movw	r30, r6
    206e:	13 8b       	std	Z+19, r17	; 0x13
    2070:	02 8b       	std	Z+18, r16	; 0x12
	s->SP2 = malloc (sizeof(sprinkler));
    2072:	8a e0       	ldi	r24, 0x0A	; 10
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0e 94 32 21 	call	0x4264	; 0x4264 <malloc>
    207a:	d3 01       	movw	r26, r6
    207c:	54 96       	adiw	r26, 0x14	; 20
    207e:	8c 93       	st	X, r24
    2080:	54 97       	sbiw	r26, 0x14	; 20
    2082:	55 96       	adiw	r26, 0x15	; 21
    2084:	9c 93       	st	X, r25
    2086:	55 97       	sbiw	r26, 0x15	; 21
	s->Line_1_Run_Status = s1;
    2088:	18 96       	adiw	r26, 0x08	; 8
    208a:	ac 92       	st	X, r10
    208c:	18 97       	sbiw	r26, 0x08	; 8
	s->Line_2_Run_Status = s2;
    208e:	19 96       	adiw	r26, 0x09	; 9
    2090:	8c 92       	st	X, r8
    2092:	19 97       	sbiw	r26, 0x09	; 9
	s->SP1->LineNumber = 1;
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	f8 01       	movw	r30, r16
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	80 83       	st	Z, r24
	s->SP2->LineNumber = 2;
    209e:	54 96       	adiw	r26, 0x14	; 20
    20a0:	ed 91       	ld	r30, X+
    20a2:	fc 91       	ld	r31, X
    20a4:	55 97       	sbiw	r26, 0x15	; 21
    20a6:	82 e0       	ldi	r24, 0x02	; 2
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	91 83       	std	Z+1, r25	; 0x01
    20ac:	80 83       	st	Z, r24
	
	initSprinkler(s->SP1,1,false,false,0,L1Run,s->L1_Start_Minutes,s->L1_Start_Hours);
    20ae:	52 96       	adiw	r26, 0x12	; 18
    20b0:	8d 91       	ld	r24, X+
    20b2:	9c 91       	ld	r25, X
    20b4:	53 97       	sbiw	r26, 0x13	; 19
    20b6:	61 e0       	ldi	r22, 0x01	; 1
    20b8:	70 e0       	ldi	r23, 0x00	; 0
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	00 e0       	ldi	r16, 0x00	; 0
    20c0:	10 e0       	ldi	r17, 0x00	; 0
    20c2:	1a 96       	adiw	r26, 0x0a	; 10
    20c4:	cc 90       	ld	r12, X
    20c6:	1a 97       	sbiw	r26, 0x0a	; 10
    20c8:	1b 96       	adiw	r26, 0x0b	; 11
    20ca:	ac 90       	ld	r10, X
    20cc:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <initSprinkler>
	initSprinkler(s->SP2,2,false,false,0,L2Run,s->L2_Start_Minutes,s->L2_Start_Hours);
    20d0:	d3 01       	movw	r26, r6
    20d2:	54 96       	adiw	r26, 0x14	; 20
    20d4:	8d 91       	ld	r24, X+
    20d6:	9c 91       	ld	r25, X
    20d8:	55 97       	sbiw	r26, 0x15	; 21
    20da:	62 e0       	ldi	r22, 0x02	; 2
    20dc:	70 e0       	ldi	r23, 0x00	; 0
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	72 01       	movw	r14, r4
    20e4:	1c 96       	adiw	r26, 0x0c	; 12
    20e6:	cc 90       	ld	r12, X
    20e8:	1c 97       	sbiw	r26, 0x0c	; 12
    20ea:	1d 96       	adiw	r26, 0x0d	; 13
    20ec:	ac 90       	ld	r10, X
    20ee:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <initSprinkler>
	
	
}
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	1f 91       	pop	r17
    20f8:	0f 91       	pop	r16
    20fa:	ff 90       	pop	r15
    20fc:	ef 90       	pop	r14
    20fe:	df 90       	pop	r13
    2100:	cf 90       	pop	r12
    2102:	af 90       	pop	r10
    2104:	8f 90       	pop	r8
    2106:	7f 90       	pop	r7
    2108:	6f 90       	pop	r6
    210a:	5f 90       	pop	r5
    210c:	4f 90       	pop	r4
    210e:	08 95       	ret

00002110 <PrintTime>:

// System Functions
void PrintTime (system *s)
{
    2110:	ef 92       	push	r14
    2112:	ff 92       	push	r15
    2114:	0f 93       	push	r16
    2116:	1f 93       	push	r17
    2118:	cf 93       	push	r28
    211a:	df 93       	push	r29
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	c0 54       	subi	r28, 0x40	; 64
    2122:	d1 40       	sbci	r29, 0x01	; 1
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	7c 01       	movw	r14, r24
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->Hours);
    2130:	00 d0       	rcall	.+0      	; 0x2132 <PrintTime+0x22>
    2132:	00 d0       	rcall	.+0      	; 0x2134 <PrintTime+0x24>
    2134:	00 d0       	rcall	.+0      	; 0x2136 <PrintTime+0x26>
    2136:	ed b7       	in	r30, 0x3d	; 61
    2138:	fe b7       	in	r31, 0x3e	; 62
    213a:	31 96       	adiw	r30, 0x01	; 1
    213c:	ce 01       	movw	r24, r28
    213e:	01 96       	adiw	r24, 0x01	; 1
    2140:	ad b7       	in	r26, 0x3d	; 61
    2142:	be b7       	in	r27, 0x3e	; 62
    2144:	12 96       	adiw	r26, 0x02	; 2
    2146:	9c 93       	st	X, r25
    2148:	8e 93       	st	-X, r24
    214a:	11 97       	sbiw	r26, 0x01	; 1
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	91 e0       	ldi	r25, 0x01	; 1
    2150:	93 83       	std	Z+3, r25	; 0x03
    2152:	82 83       	std	Z+2, r24	; 0x02
    2154:	d7 01       	movw	r26, r14
    2156:	14 96       	adiw	r26, 0x04	; 4
    2158:	8c 91       	ld	r24, X
    215a:	84 83       	std	Z+4, r24	; 0x04
    215c:	15 82       	std	Z+5, r1	; 0x05
    215e:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcpy(StringToPrint, "Current Time:");
    2162:	de 01       	movw	r26, r28
    2164:	af 5b       	subi	r26, 0xBF	; 191
    2166:	bf 4f       	sbci	r27, 0xFF	; 255
    2168:	e3 e0       	ldi	r30, 0x03	; 3
    216a:	f1 e0       	ldi	r31, 0x01	; 1
    216c:	8e e0       	ldi	r24, 0x0E	; 14
    216e:	01 90       	ld	r0, Z+
    2170:	0d 92       	st	X+, r0
    2172:	81 50       	subi	r24, 0x01	; 1
    2174:	e1 f7       	brne	.-8      	; 0x216e <PrintTime+0x5e>
	strcat(StringToPrint, str);
    2176:	ed b7       	in	r30, 0x3d	; 61
    2178:	fe b7       	in	r31, 0x3e	; 62
    217a:	36 96       	adiw	r30, 0x06	; 6
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	fe bf       	out	0x3e, r31	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	ed bf       	out	0x3d, r30	; 61
    2186:	8e 01       	movw	r16, r28
    2188:	0f 5b       	subi	r16, 0xBF	; 191
    218a:	1f 4f       	sbci	r17, 0xFF	; 255
    218c:	c8 01       	movw	r24, r16
    218e:	be 01       	movw	r22, r28
    2190:	6f 5f       	subi	r22, 0xFF	; 255
    2192:	7f 4f       	sbci	r23, 0xFF	; 255
    2194:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	strcat(StringToPrint, ":");
    2198:	f8 01       	movw	r30, r16
    219a:	01 90       	ld	r0, Z+
    219c:	00 20       	and	r0, r0
    219e:	e9 f7       	brne	.-6      	; 0x219a <PrintTime+0x8a>
    21a0:	31 97       	sbiw	r30, 0x01	; 1
    21a2:	8a e3       	ldi	r24, 0x3A	; 58
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	80 83       	st	Z, r24
	if( s->Minutes < 10)
    21aa:	d7 01       	movw	r26, r14
    21ac:	15 96       	adiw	r26, 0x05	; 5
    21ae:	2c 91       	ld	r18, X
    21b0:	15 97       	sbiw	r26, 0x05	; 5
    21b2:	2a 30       	cpi	r18, 0x0A	; 10
    21b4:	48 f4       	brcc	.+18     	; 0x21c8 <PrintTime+0xb8>
	{
		strcat(StringToPrint, "0");
    21b6:	f8 01       	movw	r30, r16
    21b8:	01 90       	ld	r0, Z+
    21ba:	00 20       	and	r0, r0
    21bc:	e9 f7       	brne	.-6      	; 0x21b8 <PrintTime+0xa8>
    21be:	31 97       	sbiw	r30, 0x01	; 1
    21c0:	80 e3       	ldi	r24, 0x30	; 48
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	91 83       	std	Z+1, r25	; 0x01
    21c6:	80 83       	st	Z, r24
		
	}
	sprintf(str,"%d", s->Minutes);
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <PrintTime+0xba>
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <PrintTime+0xbc>
    21cc:	00 d0       	rcall	.+0      	; 0x21ce <PrintTime+0xbe>
    21ce:	ed b7       	in	r30, 0x3d	; 61
    21d0:	fe b7       	in	r31, 0x3e	; 62
    21d2:	31 96       	adiw	r30, 0x01	; 1
    21d4:	8e 01       	movw	r16, r28
    21d6:	0f 5f       	subi	r16, 0xFF	; 255
    21d8:	1f 4f       	sbci	r17, 0xFF	; 255
    21da:	ad b7       	in	r26, 0x3d	; 61
    21dc:	be b7       	in	r27, 0x3e	; 62
    21de:	12 96       	adiw	r26, 0x02	; 2
    21e0:	1c 93       	st	X, r17
    21e2:	0e 93       	st	-X, r16
    21e4:	11 97       	sbiw	r26, 0x01	; 1
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	91 e0       	ldi	r25, 0x01	; 1
    21ea:	93 83       	std	Z+3, r25	; 0x03
    21ec:	82 83       	std	Z+2, r24	; 0x02
    21ee:	24 83       	std	Z+4, r18	; 0x04
    21f0:	15 82       	std	Z+5, r1	; 0x05
    21f2:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcat(StringToPrint, str);
    21f6:	ed b7       	in	r30, 0x3d	; 61
    21f8:	fe b7       	in	r31, 0x3e	; 62
    21fa:	36 96       	adiw	r30, 0x06	; 6
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	fe bf       	out	0x3e, r31	; 62
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	ed bf       	out	0x3d, r30	; 61
    2206:	ce 01       	movw	r24, r28
    2208:	8f 5b       	subi	r24, 0xBF	; 191
    220a:	9f 4f       	sbci	r25, 0xFF	; 255
    220c:	b8 01       	movw	r22, r16
    220e:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	drawString(1,0, StringToPrint ,HX8357_GREEN, 2);
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	ae 01       	movw	r20, r28
    221c:	4f 5b       	subi	r20, 0xBF	; 191
    221e:	5f 4f       	sbci	r21, 0xFF	; 255
    2220:	20 ee       	ldi	r18, 0xE0	; 224
    2222:	37 e0       	ldi	r19, 0x07	; 7
    2224:	02 e0       	ldi	r16, 0x02	; 2
    2226:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
}
    222a:	c0 5c       	subi	r28, 0xC0	; 192
    222c:	de 4f       	sbci	r29, 0xFE	; 254
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	1f 91       	pop	r17
    223e:	0f 91       	pop	r16
    2240:	ff 90       	pop	r15
    2242:	ef 90       	pop	r14
    2244:	08 95       	ret

00002246 <PrintTemp>:

void PrintTemp (system *s)
{
    2246:	0f 93       	push	r16
    2248:	1f 93       	push	r17
    224a:	cf 93       	push	r28
    224c:	df 93       	push	r29
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
    2252:	c0 54       	subi	r28, 0x40	; 64
    2254:	d1 40       	sbci	r29, 0x01	; 1
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	f8 94       	cli
    225a:	de bf       	out	0x3e, r29	; 62
    225c:	0f be       	out	0x3f, r0	; 63
    225e:	cd bf       	out	0x3d, r28	; 61
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->Temp);
    2260:	00 d0       	rcall	.+0      	; 0x2262 <PrintTemp+0x1c>
    2262:	00 d0       	rcall	.+0      	; 0x2264 <PrintTemp+0x1e>
    2264:	00 d0       	rcall	.+0      	; 0x2266 <PrintTemp+0x20>
    2266:	ed b7       	in	r30, 0x3d	; 61
    2268:	fe b7       	in	r31, 0x3e	; 62
    226a:	31 96       	adiw	r30, 0x01	; 1
    226c:	9e 01       	movw	r18, r28
    226e:	2f 5f       	subi	r18, 0xFF	; 255
    2270:	3f 4f       	sbci	r19, 0xFF	; 255
    2272:	ad b7       	in	r26, 0x3d	; 61
    2274:	be b7       	in	r27, 0x3e	; 62
    2276:	12 96       	adiw	r26, 0x02	; 2
    2278:	3c 93       	st	X, r19
    227a:	2e 93       	st	-X, r18
    227c:	11 97       	sbiw	r26, 0x01	; 1
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	31 e0       	ldi	r19, 0x01	; 1
    2282:	33 83       	std	Z+3, r19	; 0x03
    2284:	22 83       	std	Z+2, r18	; 0x02
    2286:	dc 01       	movw	r26, r24
    2288:	8d 91       	ld	r24, X+
    228a:	9c 91       	ld	r25, X
    228c:	95 83       	std	Z+5, r25	; 0x05
    228e:	84 83       	std	Z+4, r24	; 0x04
    2290:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcpy(StringToPrint, "Current Temp:");
    2294:	de 01       	movw	r26, r28
    2296:	af 5b       	subi	r26, 0xBF	; 191
    2298:	bf 4f       	sbci	r27, 0xFF	; 255
    229a:	e1 e1       	ldi	r30, 0x11	; 17
    229c:	f1 e0       	ldi	r31, 0x01	; 1
    229e:	8e e0       	ldi	r24, 0x0E	; 14
    22a0:	01 90       	ld	r0, Z+
    22a2:	0d 92       	st	X+, r0
    22a4:	81 50       	subi	r24, 0x01	; 1
    22a6:	e1 f7       	brne	.-8      	; 0x22a0 <PrintTemp+0x5a>
	strcat(StringToPrint, str);
    22a8:	8d b7       	in	r24, 0x3d	; 61
    22aa:	9e b7       	in	r25, 0x3e	; 62
    22ac:	06 96       	adiw	r24, 0x06	; 6
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	9e bf       	out	0x3e, r25	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	8d bf       	out	0x3d, r24	; 61
    22b8:	8e 01       	movw	r16, r28
    22ba:	0f 5b       	subi	r16, 0xBF	; 191
    22bc:	1f 4f       	sbci	r17, 0xFF	; 255
    22be:	c8 01       	movw	r24, r16
    22c0:	be 01       	movw	r22, r28
    22c2:	6f 5f       	subi	r22, 0xFF	; 255
    22c4:	7f 4f       	sbci	r23, 0xFF	; 255
    22c6:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	strcat(StringToPrint, " F");
    22ca:	d8 01       	movw	r26, r16
    22cc:	0d 90       	ld	r0, X+
    22ce:	00 20       	and	r0, r0
    22d0:	e9 f7       	brne	.-6      	; 0x22cc <PrintTemp+0x86>
    22d2:	11 97       	sbiw	r26, 0x01	; 1
    22d4:	ef e1       	ldi	r30, 0x1F	; 31
    22d6:	f1 e0       	ldi	r31, 0x01	; 1
    22d8:	83 e0       	ldi	r24, 0x03	; 3
    22da:	01 90       	ld	r0, Z+
    22dc:	0d 92       	st	X+, r0
    22de:	81 50       	subi	r24, 0x01	; 1
    22e0:	e1 f7       	brne	.-8      	; 0x22da <PrintTemp+0x94>
	drawString(1,25, StringToPrint ,HX8357_GREEN, 2);
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	69 e1       	ldi	r22, 0x19	; 25
    22e8:	70 e0       	ldi	r23, 0x00	; 0
    22ea:	ae 01       	movw	r20, r28
    22ec:	4f 5b       	subi	r20, 0xBF	; 191
    22ee:	5f 4f       	sbci	r21, 0xFF	; 255
    22f0:	20 ee       	ldi	r18, 0xE0	; 224
    22f2:	37 e0       	ldi	r19, 0x07	; 7
    22f4:	02 e0       	ldi	r16, 0x02	; 2
    22f6:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
}
    22fa:	c0 5c       	subi	r28, 0xC0	; 192
    22fc:	de 4f       	sbci	r29, 0xFE	; 254
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	f8 94       	cli
    2302:	de bf       	out	0x3e, r29	; 62
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	cd bf       	out	0x3d, r28	; 61
    2308:	df 91       	pop	r29
    230a:	cf 91       	pop	r28
    230c:	1f 91       	pop	r17
    230e:	0f 91       	pop	r16
    2310:	08 95       	ret

00002312 <PrintHumid>:

void PrintHumid (system *s)
{
    2312:	0f 93       	push	r16
    2314:	1f 93       	push	r17
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	c0 54       	subi	r28, 0x40	; 64
    2320:	d1 40       	sbci	r29, 0x01	; 1
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	de bf       	out	0x3e, r29	; 62
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	cd bf       	out	0x3d, r28	; 61
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->Humid);
    232c:	00 d0       	rcall	.+0      	; 0x232e <PrintHumid+0x1c>
    232e:	00 d0       	rcall	.+0      	; 0x2330 <PrintHumid+0x1e>
    2330:	00 d0       	rcall	.+0      	; 0x2332 <PrintHumid+0x20>
    2332:	ed b7       	in	r30, 0x3d	; 61
    2334:	fe b7       	in	r31, 0x3e	; 62
    2336:	31 96       	adiw	r30, 0x01	; 1
    2338:	9e 01       	movw	r18, r28
    233a:	2f 5f       	subi	r18, 0xFF	; 255
    233c:	3f 4f       	sbci	r19, 0xFF	; 255
    233e:	ad b7       	in	r26, 0x3d	; 61
    2340:	be b7       	in	r27, 0x3e	; 62
    2342:	12 96       	adiw	r26, 0x02	; 2
    2344:	3c 93       	st	X, r19
    2346:	2e 93       	st	-X, r18
    2348:	11 97       	sbiw	r26, 0x01	; 1
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	31 e0       	ldi	r19, 0x01	; 1
    234e:	33 83       	std	Z+3, r19	; 0x03
    2350:	22 83       	std	Z+2, r18	; 0x02
    2352:	dc 01       	movw	r26, r24
    2354:	12 96       	adiw	r26, 0x02	; 2
    2356:	8d 91       	ld	r24, X+
    2358:	9c 91       	ld	r25, X
    235a:	13 97       	sbiw	r26, 0x03	; 3
    235c:	95 83       	std	Z+5, r25	; 0x05
    235e:	84 83       	std	Z+4, r24	; 0x04
    2360:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcpy(StringToPrint, "Current Humidity:");
    2364:	de 01       	movw	r26, r28
    2366:	af 5b       	subi	r26, 0xBF	; 191
    2368:	bf 4f       	sbci	r27, 0xFF	; 255
    236a:	e2 e2       	ldi	r30, 0x22	; 34
    236c:	f1 e0       	ldi	r31, 0x01	; 1
    236e:	82 e1       	ldi	r24, 0x12	; 18
    2370:	01 90       	ld	r0, Z+
    2372:	0d 92       	st	X+, r0
    2374:	81 50       	subi	r24, 0x01	; 1
    2376:	e1 f7       	brne	.-8      	; 0x2370 <PrintHumid+0x5e>
	strcat(StringToPrint, str);
    2378:	8d b7       	in	r24, 0x3d	; 61
    237a:	9e b7       	in	r25, 0x3e	; 62
    237c:	06 96       	adiw	r24, 0x06	; 6
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	9e bf       	out	0x3e, r25	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	8d bf       	out	0x3d, r24	; 61
    2388:	8e 01       	movw	r16, r28
    238a:	0f 5b       	subi	r16, 0xBF	; 191
    238c:	1f 4f       	sbci	r17, 0xFF	; 255
    238e:	c8 01       	movw	r24, r16
    2390:	be 01       	movw	r22, r28
    2392:	6f 5f       	subi	r22, 0xFF	; 255
    2394:	7f 4f       	sbci	r23, 0xFF	; 255
    2396:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	strcat(StringToPrint, "%");
    239a:	f8 01       	movw	r30, r16
    239c:	01 90       	ld	r0, Z+
    239e:	00 20       	and	r0, r0
    23a0:	e9 f7       	brne	.-6      	; 0x239c <PrintHumid+0x8a>
    23a2:	31 97       	sbiw	r30, 0x01	; 1
    23a4:	85 e2       	ldi	r24, 0x25	; 37
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	91 83       	std	Z+1, r25	; 0x01
    23aa:	80 83       	st	Z, r24
	drawString(1,50, StringToPrint ,HX8357_GREEN, 2);
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	62 e3       	ldi	r22, 0x32	; 50
    23b2:	70 e0       	ldi	r23, 0x00	; 0
    23b4:	a8 01       	movw	r20, r16
    23b6:	20 ee       	ldi	r18, 0xE0	; 224
    23b8:	37 e0       	ldi	r19, 0x07	; 7
    23ba:	02 e0       	ldi	r16, 0x02	; 2
    23bc:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
}
    23c0:	c0 5c       	subi	r28, 0xC0	; 192
    23c2:	de 4f       	sbci	r29, 0xFE	; 254
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	df 91       	pop	r29
    23d0:	cf 91       	pop	r28
    23d2:	1f 91       	pop	r17
    23d4:	0f 91       	pop	r16
    23d6:	08 95       	ret

000023d8 <DeleteTime>:
//Delete Functions
void DeleteTime (system *s)
{
    23d8:	ef 92       	push	r14
    23da:	ff 92       	push	r15
    23dc:	0f 93       	push	r16
    23de:	1f 93       	push	r17
    23e0:	cf 93       	push	r28
    23e2:	df 93       	push	r29
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	c0 54       	subi	r28, 0x40	; 64
    23ea:	d1 40       	sbci	r29, 0x01	; 1
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	7c 01       	movw	r14, r24
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->Hours);
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <DeleteTime+0x22>
    23fa:	00 d0       	rcall	.+0      	; 0x23fc <DeleteTime+0x24>
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <DeleteTime+0x26>
    23fe:	ed b7       	in	r30, 0x3d	; 61
    2400:	fe b7       	in	r31, 0x3e	; 62
    2402:	31 96       	adiw	r30, 0x01	; 1
    2404:	ce 01       	movw	r24, r28
    2406:	01 96       	adiw	r24, 0x01	; 1
    2408:	ad b7       	in	r26, 0x3d	; 61
    240a:	be b7       	in	r27, 0x3e	; 62
    240c:	12 96       	adiw	r26, 0x02	; 2
    240e:	9c 93       	st	X, r25
    2410:	8e 93       	st	-X, r24
    2412:	11 97       	sbiw	r26, 0x01	; 1
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	91 e0       	ldi	r25, 0x01	; 1
    2418:	93 83       	std	Z+3, r25	; 0x03
    241a:	82 83       	std	Z+2, r24	; 0x02
    241c:	d7 01       	movw	r26, r14
    241e:	14 96       	adiw	r26, 0x04	; 4
    2420:	8c 91       	ld	r24, X
    2422:	84 83       	std	Z+4, r24	; 0x04
    2424:	15 82       	std	Z+5, r1	; 0x05
    2426:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcpy(StringToPrint, "Current Time:");
    242a:	de 01       	movw	r26, r28
    242c:	af 5b       	subi	r26, 0xBF	; 191
    242e:	bf 4f       	sbci	r27, 0xFF	; 255
    2430:	e3 e0       	ldi	r30, 0x03	; 3
    2432:	f1 e0       	ldi	r31, 0x01	; 1
    2434:	8e e0       	ldi	r24, 0x0E	; 14
    2436:	01 90       	ld	r0, Z+
    2438:	0d 92       	st	X+, r0
    243a:	81 50       	subi	r24, 0x01	; 1
    243c:	e1 f7       	brne	.-8      	; 0x2436 <DeleteTime+0x5e>
	strcat(StringToPrint, str);
    243e:	ed b7       	in	r30, 0x3d	; 61
    2440:	fe b7       	in	r31, 0x3e	; 62
    2442:	36 96       	adiw	r30, 0x06	; 6
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	fe bf       	out	0x3e, r31	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	ed bf       	out	0x3d, r30	; 61
    244e:	8e 01       	movw	r16, r28
    2450:	0f 5b       	subi	r16, 0xBF	; 191
    2452:	1f 4f       	sbci	r17, 0xFF	; 255
    2454:	c8 01       	movw	r24, r16
    2456:	be 01       	movw	r22, r28
    2458:	6f 5f       	subi	r22, 0xFF	; 255
    245a:	7f 4f       	sbci	r23, 0xFF	; 255
    245c:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	strcat(StringToPrint, ":");
    2460:	f8 01       	movw	r30, r16
    2462:	01 90       	ld	r0, Z+
    2464:	00 20       	and	r0, r0
    2466:	e9 f7       	brne	.-6      	; 0x2462 <DeleteTime+0x8a>
    2468:	31 97       	sbiw	r30, 0x01	; 1
    246a:	8a e3       	ldi	r24, 0x3A	; 58
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	91 83       	std	Z+1, r25	; 0x01
    2470:	80 83       	st	Z, r24
	if( s->Minutes < 10)
    2472:	d7 01       	movw	r26, r14
    2474:	15 96       	adiw	r26, 0x05	; 5
    2476:	2c 91       	ld	r18, X
    2478:	15 97       	sbiw	r26, 0x05	; 5
    247a:	2a 30       	cpi	r18, 0x0A	; 10
    247c:	48 f4       	brcc	.+18     	; 0x2490 <DeleteTime+0xb8>
	{
		strcat(StringToPrint, "0");
    247e:	f8 01       	movw	r30, r16
    2480:	01 90       	ld	r0, Z+
    2482:	00 20       	and	r0, r0
    2484:	e9 f7       	brne	.-6      	; 0x2480 <DeleteTime+0xa8>
    2486:	31 97       	sbiw	r30, 0x01	; 1
    2488:	80 e3       	ldi	r24, 0x30	; 48
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	91 83       	std	Z+1, r25	; 0x01
    248e:	80 83       	st	Z, r24
		
	}
	sprintf(str,"%d", s->Minutes);
    2490:	00 d0       	rcall	.+0      	; 0x2492 <DeleteTime+0xba>
    2492:	00 d0       	rcall	.+0      	; 0x2494 <DeleteTime+0xbc>
    2494:	00 d0       	rcall	.+0      	; 0x2496 <DeleteTime+0xbe>
    2496:	ed b7       	in	r30, 0x3d	; 61
    2498:	fe b7       	in	r31, 0x3e	; 62
    249a:	31 96       	adiw	r30, 0x01	; 1
    249c:	8e 01       	movw	r16, r28
    249e:	0f 5f       	subi	r16, 0xFF	; 255
    24a0:	1f 4f       	sbci	r17, 0xFF	; 255
    24a2:	ad b7       	in	r26, 0x3d	; 61
    24a4:	be b7       	in	r27, 0x3e	; 62
    24a6:	12 96       	adiw	r26, 0x02	; 2
    24a8:	1c 93       	st	X, r17
    24aa:	0e 93       	st	-X, r16
    24ac:	11 97       	sbiw	r26, 0x01	; 1
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	91 e0       	ldi	r25, 0x01	; 1
    24b2:	93 83       	std	Z+3, r25	; 0x03
    24b4:	82 83       	std	Z+2, r24	; 0x02
    24b6:	24 83       	std	Z+4, r18	; 0x04
    24b8:	15 82       	std	Z+5, r1	; 0x05
    24ba:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcat(StringToPrint, str);
    24be:	ed b7       	in	r30, 0x3d	; 61
    24c0:	fe b7       	in	r31, 0x3e	; 62
    24c2:	36 96       	adiw	r30, 0x06	; 6
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	fe bf       	out	0x3e, r31	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	ed bf       	out	0x3d, r30	; 61
    24ce:	ce 01       	movw	r24, r28
    24d0:	8f 5b       	subi	r24, 0xBF	; 191
    24d2:	9f 4f       	sbci	r25, 0xFF	; 255
    24d4:	b8 01       	movw	r22, r16
    24d6:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	drawString(1,0, StringToPrint ,HX8357_BLACK, 2);
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	60 e0       	ldi	r22, 0x00	; 0
    24e0:	70 e0       	ldi	r23, 0x00	; 0
    24e2:	ae 01       	movw	r20, r28
    24e4:	4f 5b       	subi	r20, 0xBF	; 191
    24e6:	5f 4f       	sbci	r21, 0xFF	; 255
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	02 e0       	ldi	r16, 0x02	; 2
    24ee:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
}
    24f2:	c0 5c       	subi	r28, 0xC0	; 192
    24f4:	de 4f       	sbci	r29, 0xFE	; 254
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	1f 91       	pop	r17
    2506:	0f 91       	pop	r16
    2508:	ff 90       	pop	r15
    250a:	ef 90       	pop	r14
    250c:	08 95       	ret

0000250e <DeleteTemp>:

void DeleteTemp (system *s)
{
    250e:	0f 93       	push	r16
    2510:	1f 93       	push	r17
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    251a:	c0 54       	subi	r28, 0x40	; 64
    251c:	d1 40       	sbci	r29, 0x01	; 1
    251e:	0f b6       	in	r0, 0x3f	; 63
    2520:	f8 94       	cli
    2522:	de bf       	out	0x3e, r29	; 62
    2524:	0f be       	out	0x3f, r0	; 63
    2526:	cd bf       	out	0x3d, r28	; 61
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->Temp);
    2528:	00 d0       	rcall	.+0      	; 0x252a <DeleteTemp+0x1c>
    252a:	00 d0       	rcall	.+0      	; 0x252c <DeleteTemp+0x1e>
    252c:	00 d0       	rcall	.+0      	; 0x252e <DeleteTemp+0x20>
    252e:	ed b7       	in	r30, 0x3d	; 61
    2530:	fe b7       	in	r31, 0x3e	; 62
    2532:	31 96       	adiw	r30, 0x01	; 1
    2534:	9e 01       	movw	r18, r28
    2536:	2f 5f       	subi	r18, 0xFF	; 255
    2538:	3f 4f       	sbci	r19, 0xFF	; 255
    253a:	ad b7       	in	r26, 0x3d	; 61
    253c:	be b7       	in	r27, 0x3e	; 62
    253e:	12 96       	adiw	r26, 0x02	; 2
    2540:	3c 93       	st	X, r19
    2542:	2e 93       	st	-X, r18
    2544:	11 97       	sbiw	r26, 0x01	; 1
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	31 e0       	ldi	r19, 0x01	; 1
    254a:	33 83       	std	Z+3, r19	; 0x03
    254c:	22 83       	std	Z+2, r18	; 0x02
    254e:	dc 01       	movw	r26, r24
    2550:	8d 91       	ld	r24, X+
    2552:	9c 91       	ld	r25, X
    2554:	95 83       	std	Z+5, r25	; 0x05
    2556:	84 83       	std	Z+4, r24	; 0x04
    2558:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcpy(StringToPrint, "Current Temp:");
    255c:	de 01       	movw	r26, r28
    255e:	af 5b       	subi	r26, 0xBF	; 191
    2560:	bf 4f       	sbci	r27, 0xFF	; 255
    2562:	e1 e1       	ldi	r30, 0x11	; 17
    2564:	f1 e0       	ldi	r31, 0x01	; 1
    2566:	8e e0       	ldi	r24, 0x0E	; 14
    2568:	01 90       	ld	r0, Z+
    256a:	0d 92       	st	X+, r0
    256c:	81 50       	subi	r24, 0x01	; 1
    256e:	e1 f7       	brne	.-8      	; 0x2568 <DeleteTemp+0x5a>
	strcat(StringToPrint, str);
    2570:	8d b7       	in	r24, 0x3d	; 61
    2572:	9e b7       	in	r25, 0x3e	; 62
    2574:	06 96       	adiw	r24, 0x06	; 6
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	9e bf       	out	0x3e, r25	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	8d bf       	out	0x3d, r24	; 61
    2580:	8e 01       	movw	r16, r28
    2582:	0f 5b       	subi	r16, 0xBF	; 191
    2584:	1f 4f       	sbci	r17, 0xFF	; 255
    2586:	c8 01       	movw	r24, r16
    2588:	be 01       	movw	r22, r28
    258a:	6f 5f       	subi	r22, 0xFF	; 255
    258c:	7f 4f       	sbci	r23, 0xFF	; 255
    258e:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	strcat(StringToPrint, " F");
    2592:	d8 01       	movw	r26, r16
    2594:	0d 90       	ld	r0, X+
    2596:	00 20       	and	r0, r0
    2598:	e9 f7       	brne	.-6      	; 0x2594 <DeleteTemp+0x86>
    259a:	11 97       	sbiw	r26, 0x01	; 1
    259c:	ef e1       	ldi	r30, 0x1F	; 31
    259e:	f1 e0       	ldi	r31, 0x01	; 1
    25a0:	83 e0       	ldi	r24, 0x03	; 3
    25a2:	01 90       	ld	r0, Z+
    25a4:	0d 92       	st	X+, r0
    25a6:	81 50       	subi	r24, 0x01	; 1
    25a8:	e1 f7       	brne	.-8      	; 0x25a2 <DeleteTemp+0x94>
	drawString(1,25, StringToPrint ,HX8357_BLACK, 2);
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	69 e1       	ldi	r22, 0x19	; 25
    25b0:	70 e0       	ldi	r23, 0x00	; 0
    25b2:	ae 01       	movw	r20, r28
    25b4:	4f 5b       	subi	r20, 0xBF	; 191
    25b6:	5f 4f       	sbci	r21, 0xFF	; 255
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	02 e0       	ldi	r16, 0x02	; 2
    25be:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
}
    25c2:	c0 5c       	subi	r28, 0xC0	; 192
    25c4:	de 4f       	sbci	r29, 0xFE	; 254
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	f8 94       	cli
    25ca:	de bf       	out	0x3e, r29	; 62
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	cd bf       	out	0x3d, r28	; 61
    25d0:	df 91       	pop	r29
    25d2:	cf 91       	pop	r28
    25d4:	1f 91       	pop	r17
    25d6:	0f 91       	pop	r16
    25d8:	08 95       	ret

000025da <DeleteHumid>:

void DeleteHumid (system *s)
{
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	c0 54       	subi	r28, 0x40	; 64
    25e8:	d1 40       	sbci	r29, 0x01	; 1
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->Humid);
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <DeleteHumid+0x1c>
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <DeleteHumid+0x1e>
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <DeleteHumid+0x20>
    25fa:	ed b7       	in	r30, 0x3d	; 61
    25fc:	fe b7       	in	r31, 0x3e	; 62
    25fe:	31 96       	adiw	r30, 0x01	; 1
    2600:	9e 01       	movw	r18, r28
    2602:	2f 5f       	subi	r18, 0xFF	; 255
    2604:	3f 4f       	sbci	r19, 0xFF	; 255
    2606:	ad b7       	in	r26, 0x3d	; 61
    2608:	be b7       	in	r27, 0x3e	; 62
    260a:	12 96       	adiw	r26, 0x02	; 2
    260c:	3c 93       	st	X, r19
    260e:	2e 93       	st	-X, r18
    2610:	11 97       	sbiw	r26, 0x01	; 1
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	31 e0       	ldi	r19, 0x01	; 1
    2616:	33 83       	std	Z+3, r19	; 0x03
    2618:	22 83       	std	Z+2, r18	; 0x02
    261a:	dc 01       	movw	r26, r24
    261c:	12 96       	adiw	r26, 0x02	; 2
    261e:	8d 91       	ld	r24, X+
    2620:	9c 91       	ld	r25, X
    2622:	13 97       	sbiw	r26, 0x03	; 3
    2624:	95 83       	std	Z+5, r25	; 0x05
    2626:	84 83       	std	Z+4, r24	; 0x04
    2628:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcpy(StringToPrint, "Current Humidity:");
    262c:	de 01       	movw	r26, r28
    262e:	af 5b       	subi	r26, 0xBF	; 191
    2630:	bf 4f       	sbci	r27, 0xFF	; 255
    2632:	e2 e2       	ldi	r30, 0x22	; 34
    2634:	f1 e0       	ldi	r31, 0x01	; 1
    2636:	82 e1       	ldi	r24, 0x12	; 18
    2638:	01 90       	ld	r0, Z+
    263a:	0d 92       	st	X+, r0
    263c:	81 50       	subi	r24, 0x01	; 1
    263e:	e1 f7       	brne	.-8      	; 0x2638 <DeleteHumid+0x5e>
	strcat(StringToPrint, str);
    2640:	8d b7       	in	r24, 0x3d	; 61
    2642:	9e b7       	in	r25, 0x3e	; 62
    2644:	06 96       	adiw	r24, 0x06	; 6
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	9e bf       	out	0x3e, r25	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	8d bf       	out	0x3d, r24	; 61
    2650:	8e 01       	movw	r16, r28
    2652:	0f 5b       	subi	r16, 0xBF	; 191
    2654:	1f 4f       	sbci	r17, 0xFF	; 255
    2656:	c8 01       	movw	r24, r16
    2658:	be 01       	movw	r22, r28
    265a:	6f 5f       	subi	r22, 0xFF	; 255
    265c:	7f 4f       	sbci	r23, 0xFF	; 255
    265e:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	strcat(StringToPrint, "%");
    2662:	f8 01       	movw	r30, r16
    2664:	01 90       	ld	r0, Z+
    2666:	00 20       	and	r0, r0
    2668:	e9 f7       	brne	.-6      	; 0x2664 <DeleteHumid+0x8a>
    266a:	31 97       	sbiw	r30, 0x01	; 1
    266c:	85 e2       	ldi	r24, 0x25	; 37
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	91 83       	std	Z+1, r25	; 0x01
    2672:	80 83       	st	Z, r24
	drawString(1,50, StringToPrint ,HX8357_BLACK, 2);
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	62 e3       	ldi	r22, 0x32	; 50
    267a:	70 e0       	ldi	r23, 0x00	; 0
    267c:	a8 01       	movw	r20, r16
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	02 e0       	ldi	r16, 0x02	; 2
    2684:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
}
    2688:	c0 5c       	subi	r28, 0xC0	; 192
    268a:	de 4f       	sbci	r29, 0xFE	; 254
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	1f 91       	pop	r17
    269c:	0f 91       	pop	r16
    269e:	08 95       	ret

000026a0 <PrintLineStart1>:

//Line1 Functions
void PrintLineStart1(system * s)
{
    26a0:	ef 92       	push	r14
    26a2:	ff 92       	push	r15
    26a4:	0f 93       	push	r16
    26a6:	1f 93       	push	r17
    26a8:	cf 93       	push	r28
    26aa:	df 93       	push	r29
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	c0 54       	subi	r28, 0x40	; 64
    26b2:	d1 40       	sbci	r29, 0x01	; 1
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	de bf       	out	0x3e, r29	; 62
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	cd bf       	out	0x3d, r28	; 61
    26be:	7c 01       	movw	r14, r24
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->L1_Start_Hours);
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <PrintLineStart1+0x22>
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <PrintLineStart1+0x24>
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <PrintLineStart1+0x26>
    26c6:	ed b7       	in	r30, 0x3d	; 61
    26c8:	fe b7       	in	r31, 0x3e	; 62
    26ca:	31 96       	adiw	r30, 0x01	; 1
    26cc:	ce 01       	movw	r24, r28
    26ce:	01 96       	adiw	r24, 0x01	; 1
    26d0:	ad b7       	in	r26, 0x3d	; 61
    26d2:	be b7       	in	r27, 0x3e	; 62
    26d4:	12 96       	adiw	r26, 0x02	; 2
    26d6:	9c 93       	st	X, r25
    26d8:	8e 93       	st	-X, r24
    26da:	11 97       	sbiw	r26, 0x01	; 1
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	91 e0       	ldi	r25, 0x01	; 1
    26e0:	93 83       	std	Z+3, r25	; 0x03
    26e2:	82 83       	std	Z+2, r24	; 0x02
    26e4:	d7 01       	movw	r26, r14
    26e6:	1b 96       	adiw	r26, 0x0b	; 11
    26e8:	8c 91       	ld	r24, X
    26ea:	84 83       	std	Z+4, r24	; 0x04
    26ec:	15 82       	std	Z+5, r1	; 0x05
    26ee:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcpy(StringToPrint, "Line 1: Start @ ");
    26f2:	de 01       	movw	r26, r28
    26f4:	af 5b       	subi	r26, 0xBF	; 191
    26f6:	bf 4f       	sbci	r27, 0xFF	; 255
    26f8:	e4 e3       	ldi	r30, 0x34	; 52
    26fa:	f1 e0       	ldi	r31, 0x01	; 1
    26fc:	81 e1       	ldi	r24, 0x11	; 17
    26fe:	01 90       	ld	r0, Z+
    2700:	0d 92       	st	X+, r0
    2702:	81 50       	subi	r24, 0x01	; 1
    2704:	e1 f7       	brne	.-8      	; 0x26fe <PrintLineStart1+0x5e>
	strcat(StringToPrint, str);
    2706:	ed b7       	in	r30, 0x3d	; 61
    2708:	fe b7       	in	r31, 0x3e	; 62
    270a:	36 96       	adiw	r30, 0x06	; 6
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	fe bf       	out	0x3e, r31	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	ed bf       	out	0x3d, r30	; 61
    2716:	8e 01       	movw	r16, r28
    2718:	0f 5b       	subi	r16, 0xBF	; 191
    271a:	1f 4f       	sbci	r17, 0xFF	; 255
    271c:	c8 01       	movw	r24, r16
    271e:	be 01       	movw	r22, r28
    2720:	6f 5f       	subi	r22, 0xFF	; 255
    2722:	7f 4f       	sbci	r23, 0xFF	; 255
    2724:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	strcat(StringToPrint, ":");
    2728:	f8 01       	movw	r30, r16
    272a:	01 90       	ld	r0, Z+
    272c:	00 20       	and	r0, r0
    272e:	e9 f7       	brne	.-6      	; 0x272a <PrintLineStart1+0x8a>
    2730:	31 97       	sbiw	r30, 0x01	; 1
    2732:	8a e3       	ldi	r24, 0x3A	; 58
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	91 83       	std	Z+1, r25	; 0x01
    2738:	80 83       	st	Z, r24
	if( s->L1_Start_Minutes < 10)
    273a:	d7 01       	movw	r26, r14
    273c:	1a 96       	adiw	r26, 0x0a	; 10
    273e:	2c 91       	ld	r18, X
    2740:	1a 97       	sbiw	r26, 0x0a	; 10
    2742:	2a 30       	cpi	r18, 0x0A	; 10
    2744:	48 f4       	brcc	.+18     	; 0x2758 <PrintLineStart1+0xb8>
	{
		strcat(StringToPrint, "0");
    2746:	f8 01       	movw	r30, r16
    2748:	01 90       	ld	r0, Z+
    274a:	00 20       	and	r0, r0
    274c:	e9 f7       	brne	.-6      	; 0x2748 <PrintLineStart1+0xa8>
    274e:	31 97       	sbiw	r30, 0x01	; 1
    2750:	80 e3       	ldi	r24, 0x30	; 48
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	91 83       	std	Z+1, r25	; 0x01
    2756:	80 83       	st	Z, r24
		
	}
	sprintf(str,"%d", s->L1_Start_Minutes);
    2758:	00 d0       	rcall	.+0      	; 0x275a <PrintLineStart1+0xba>
    275a:	00 d0       	rcall	.+0      	; 0x275c <PrintLineStart1+0xbc>
    275c:	00 d0       	rcall	.+0      	; 0x275e <PrintLineStart1+0xbe>
    275e:	ed b7       	in	r30, 0x3d	; 61
    2760:	fe b7       	in	r31, 0x3e	; 62
    2762:	31 96       	adiw	r30, 0x01	; 1
    2764:	8e 01       	movw	r16, r28
    2766:	0f 5f       	subi	r16, 0xFF	; 255
    2768:	1f 4f       	sbci	r17, 0xFF	; 255
    276a:	ad b7       	in	r26, 0x3d	; 61
    276c:	be b7       	in	r27, 0x3e	; 62
    276e:	12 96       	adiw	r26, 0x02	; 2
    2770:	1c 93       	st	X, r17
    2772:	0e 93       	st	-X, r16
    2774:	11 97       	sbiw	r26, 0x01	; 1
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	91 e0       	ldi	r25, 0x01	; 1
    277a:	93 83       	std	Z+3, r25	; 0x03
    277c:	82 83       	std	Z+2, r24	; 0x02
    277e:	24 83       	std	Z+4, r18	; 0x04
    2780:	15 82       	std	Z+5, r1	; 0x05
    2782:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcat(StringToPrint, str);
    2786:	ed b7       	in	r30, 0x3d	; 61
    2788:	fe b7       	in	r31, 0x3e	; 62
    278a:	36 96       	adiw	r30, 0x06	; 6
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	f8 94       	cli
    2790:	fe bf       	out	0x3e, r31	; 62
    2792:	0f be       	out	0x3f, r0	; 63
    2794:	ed bf       	out	0x3d, r30	; 61
    2796:	ce 01       	movw	r24, r28
    2798:	8f 5b       	subi	r24, 0xBF	; 191
    279a:	9f 4f       	sbci	r25, 0xFF	; 255
    279c:	b8 01       	movw	r22, r16
    279e:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	drawString(1,100, StringToPrint ,HX8357_GREEN, 2);
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	64 e6       	ldi	r22, 0x64	; 100
    27a8:	70 e0       	ldi	r23, 0x00	; 0
    27aa:	ae 01       	movw	r20, r28
    27ac:	4f 5b       	subi	r20, 0xBF	; 191
    27ae:	5f 4f       	sbci	r21, 0xFF	; 255
    27b0:	20 ee       	ldi	r18, 0xE0	; 224
    27b2:	37 e0       	ldi	r19, 0x07	; 7
    27b4:	02 e0       	ldi	r16, 0x02	; 2
    27b6:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
	
}
    27ba:	c0 5c       	subi	r28, 0xC0	; 192
    27bc:	de 4f       	sbci	r29, 0xFE	; 254
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	f8 94       	cli
    27c2:	de bf       	out	0x3e, r29	; 62
    27c4:	0f be       	out	0x3f, r0	; 63
    27c6:	cd bf       	out	0x3d, r28	; 61
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	1f 91       	pop	r17
    27ce:	0f 91       	pop	r16
    27d0:	ff 90       	pop	r15
    27d2:	ef 90       	pop	r14
    27d4:	08 95       	ret

000027d6 <PrintLine1Run>:

void PrintLine1Run (system * s)
{
    27d6:	0f 93       	push	r16
    27d8:	1f 93       	push	r17
    27da:	cf 93       	push	r28
    27dc:	df 93       	push	r29
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
    27e2:	c0 54       	subi	r28, 0x40	; 64
    27e4:	d1 40       	sbci	r29, 0x01	; 1
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->Line_1_RunTime);
    27f0:	00 d0       	rcall	.+0      	; 0x27f2 <PrintLine1Run+0x1c>
    27f2:	00 d0       	rcall	.+0      	; 0x27f4 <PrintLine1Run+0x1e>
    27f4:	00 d0       	rcall	.+0      	; 0x27f6 <PrintLine1Run+0x20>
    27f6:	ed b7       	in	r30, 0x3d	; 61
    27f8:	fe b7       	in	r31, 0x3e	; 62
    27fa:	31 96       	adiw	r30, 0x01	; 1
    27fc:	9e 01       	movw	r18, r28
    27fe:	2f 5f       	subi	r18, 0xFF	; 255
    2800:	3f 4f       	sbci	r19, 0xFF	; 255
    2802:	ad b7       	in	r26, 0x3d	; 61
    2804:	be b7       	in	r27, 0x3e	; 62
    2806:	12 96       	adiw	r26, 0x02	; 2
    2808:	3c 93       	st	X, r19
    280a:	2e 93       	st	-X, r18
    280c:	11 97       	sbiw	r26, 0x01	; 1
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	31 e0       	ldi	r19, 0x01	; 1
    2812:	33 83       	std	Z+3, r19	; 0x03
    2814:	22 83       	std	Z+2, r18	; 0x02
    2816:	dc 01       	movw	r26, r24
    2818:	1e 96       	adiw	r26, 0x0e	; 14
    281a:	8d 91       	ld	r24, X+
    281c:	9c 91       	ld	r25, X
    281e:	1f 97       	sbiw	r26, 0x0f	; 15
    2820:	95 83       	std	Z+5, r25	; 0x05
    2822:	84 83       	std	Z+4, r24	; 0x04
    2824:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcpy(StringToPrint, "Line 1: Runs ");
    2828:	de 01       	movw	r26, r28
    282a:	af 5b       	subi	r26, 0xBF	; 191
    282c:	bf 4f       	sbci	r27, 0xFF	; 255
    282e:	e5 e4       	ldi	r30, 0x45	; 69
    2830:	f1 e0       	ldi	r31, 0x01	; 1
    2832:	8e e0       	ldi	r24, 0x0E	; 14
    2834:	01 90       	ld	r0, Z+
    2836:	0d 92       	st	X+, r0
    2838:	81 50       	subi	r24, 0x01	; 1
    283a:	e1 f7       	brne	.-8      	; 0x2834 <PrintLine1Run+0x5e>
	strcat(StringToPrint, str);
    283c:	8d b7       	in	r24, 0x3d	; 61
    283e:	9e b7       	in	r25, 0x3e	; 62
    2840:	06 96       	adiw	r24, 0x06	; 6
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	9e bf       	out	0x3e, r25	; 62
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	8d bf       	out	0x3d, r24	; 61
    284c:	8e 01       	movw	r16, r28
    284e:	0f 5b       	subi	r16, 0xBF	; 191
    2850:	1f 4f       	sbci	r17, 0xFF	; 255
    2852:	c8 01       	movw	r24, r16
    2854:	be 01       	movw	r22, r28
    2856:	6f 5f       	subi	r22, 0xFF	; 255
    2858:	7f 4f       	sbci	r23, 0xFF	; 255
    285a:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	strcat(StringToPrint, " Min");
    285e:	d8 01       	movw	r26, r16
    2860:	0d 90       	ld	r0, X+
    2862:	00 20       	and	r0, r0
    2864:	e9 f7       	brne	.-6      	; 0x2860 <PrintLine1Run+0x8a>
    2866:	11 97       	sbiw	r26, 0x01	; 1
    2868:	e3 e5       	ldi	r30, 0x53	; 83
    286a:	f1 e0       	ldi	r31, 0x01	; 1
    286c:	85 e0       	ldi	r24, 0x05	; 5
    286e:	01 90       	ld	r0, Z+
    2870:	0d 92       	st	X+, r0
    2872:	81 50       	subi	r24, 0x01	; 1
    2874:	e1 f7       	brne	.-8      	; 0x286e <PrintLine1Run+0x98>
	drawString(1,125, StringToPrint ,HX8357_GREEN, 2);
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	6d e7       	ldi	r22, 0x7D	; 125
    287c:	70 e0       	ldi	r23, 0x00	; 0
    287e:	ae 01       	movw	r20, r28
    2880:	4f 5b       	subi	r20, 0xBF	; 191
    2882:	5f 4f       	sbci	r21, 0xFF	; 255
    2884:	20 ee       	ldi	r18, 0xE0	; 224
    2886:	37 e0       	ldi	r19, 0x07	; 7
    2888:	02 e0       	ldi	r16, 0x02	; 2
    288a:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
	
}
    288e:	c0 5c       	subi	r28, 0xC0	; 192
    2890:	de 4f       	sbci	r29, 0xFE	; 254
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	f8 94       	cli
    2896:	de bf       	out	0x3e, r29	; 62
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	cd bf       	out	0x3d, r28	; 61
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	1f 91       	pop	r17
    28a2:	0f 91       	pop	r16
    28a4:	08 95       	ret

000028a6 <PrintLineStatus1>:

void PrintLineStatus1 (system *s)
{
    28a6:	0f 93       	push	r16
    28a8:	1f 93       	push	r17
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	c0 54       	subi	r28, 0x40	; 64
    28b4:	d1 40       	sbci	r29, 0x01	; 1
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	8c 01       	movw	r16, r24
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->Humid);
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <PrintLineStatus1+0x1e>
    28c4:	00 d0       	rcall	.+0      	; 0x28c6 <PrintLineStatus1+0x20>
    28c6:	00 d0       	rcall	.+0      	; 0x28c8 <PrintLineStatus1+0x22>
    28c8:	ed b7       	in	r30, 0x3d	; 61
    28ca:	fe b7       	in	r31, 0x3e	; 62
    28cc:	31 96       	adiw	r30, 0x01	; 1
    28ce:	ce 01       	movw	r24, r28
    28d0:	01 96       	adiw	r24, 0x01	; 1
    28d2:	ad b7       	in	r26, 0x3d	; 61
    28d4:	be b7       	in	r27, 0x3e	; 62
    28d6:	12 96       	adiw	r26, 0x02	; 2
    28d8:	9c 93       	st	X, r25
    28da:	8e 93       	st	-X, r24
    28dc:	11 97       	sbiw	r26, 0x01	; 1
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	91 e0       	ldi	r25, 0x01	; 1
    28e2:	93 83       	std	Z+3, r25	; 0x03
    28e4:	82 83       	std	Z+2, r24	; 0x02
    28e6:	d8 01       	movw	r26, r16
    28e8:	12 96       	adiw	r26, 0x02	; 2
    28ea:	8d 91       	ld	r24, X+
    28ec:	9c 91       	ld	r25, X
    28ee:	13 97       	sbiw	r26, 0x03	; 3
    28f0:	95 83       	std	Z+5, r25	; 0x05
    28f2:	84 83       	std	Z+4, r24	; 0x04
    28f4:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	if(s->Line_1_Status == 1)
    28f8:	ed b7       	in	r30, 0x3d	; 61
    28fa:	fe b7       	in	r31, 0x3e	; 62
    28fc:	36 96       	adiw	r30, 0x06	; 6
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	f8 94       	cli
    2902:	fe bf       	out	0x3e, r31	; 62
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	ed bf       	out	0x3d, r30	; 61
    2908:	d8 01       	movw	r26, r16
    290a:	16 96       	adiw	r26, 0x06	; 6
    290c:	8c 91       	ld	r24, X
    290e:	16 97       	sbiw	r26, 0x06	; 6
    2910:	88 23       	and	r24, r24
    2912:	59 f0       	breq	.+22     	; 0x292a <PrintLineStatus1+0x84>
	{
		strcpy(StringToPrint, "Line 1: No Errors!");
    2914:	de 01       	movw	r26, r28
    2916:	af 5b       	subi	r26, 0xBF	; 191
    2918:	bf 4f       	sbci	r27, 0xFF	; 255
    291a:	e8 e5       	ldi	r30, 0x58	; 88
    291c:	f1 e0       	ldi	r31, 0x01	; 1
    291e:	83 e1       	ldi	r24, 0x13	; 19
    2920:	01 90       	ld	r0, Z+
    2922:	0d 92       	st	X+, r0
    2924:	81 50       	subi	r24, 0x01	; 1
    2926:	e1 f7       	brne	.-8      	; 0x2920 <PrintLineStatus1+0x7a>
    2928:	0a c0       	rjmp	.+20     	; 0x293e <PrintLineStatus1+0x98>
	}
	else
	{
		strcpy(StringToPrint, "Line 1: Check Flow!");
    292a:	de 01       	movw	r26, r28
    292c:	af 5b       	subi	r26, 0xBF	; 191
    292e:	bf 4f       	sbci	r27, 0xFF	; 255
    2930:	eb e6       	ldi	r30, 0x6B	; 107
    2932:	f1 e0       	ldi	r31, 0x01	; 1
    2934:	84 e1       	ldi	r24, 0x14	; 20
    2936:	01 90       	ld	r0, Z+
    2938:	0d 92       	st	X+, r0
    293a:	81 50       	subi	r24, 0x01	; 1
    293c:	e1 f7       	brne	.-8      	; 0x2936 <PrintLineStatus1+0x90>
		
	}
	drawString(1,150, StringToPrint ,HX8357_GREEN, 2);
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	66 e9       	ldi	r22, 0x96	; 150
    2944:	70 e0       	ldi	r23, 0x00	; 0
    2946:	ae 01       	movw	r20, r28
    2948:	4f 5b       	subi	r20, 0xBF	; 191
    294a:	5f 4f       	sbci	r21, 0xFF	; 255
    294c:	20 ee       	ldi	r18, 0xE0	; 224
    294e:	37 e0       	ldi	r19, 0x07	; 7
    2950:	02 e0       	ldi	r16, 0x02	; 2
    2952:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
}
    2956:	c0 5c       	subi	r28, 0xC0	; 192
    2958:	de 4f       	sbci	r29, 0xFE	; 254
    295a:	0f b6       	in	r0, 0x3f	; 63
    295c:	f8 94       	cli
    295e:	de bf       	out	0x3e, r29	; 62
    2960:	0f be       	out	0x3f, r0	; 63
    2962:	cd bf       	out	0x3d, r28	; 61
    2964:	df 91       	pop	r29
    2966:	cf 91       	pop	r28
    2968:	1f 91       	pop	r17
    296a:	0f 91       	pop	r16
    296c:	08 95       	ret

0000296e <DeleteLineStart1>:

//Delete Functions
void DeleteLineStart1(system * s)
{
    296e:	ef 92       	push	r14
    2970:	ff 92       	push	r15
    2972:	0f 93       	push	r16
    2974:	1f 93       	push	r17
    2976:	cf 93       	push	r28
    2978:	df 93       	push	r29
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	c0 54       	subi	r28, 0x40	; 64
    2980:	d1 40       	sbci	r29, 0x01	; 1
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	de bf       	out	0x3e, r29	; 62
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	cd bf       	out	0x3d, r28	; 61
    298c:	7c 01       	movw	r14, r24
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->L1_Start_Hours);
    298e:	00 d0       	rcall	.+0      	; 0x2990 <DeleteLineStart1+0x22>
    2990:	00 d0       	rcall	.+0      	; 0x2992 <DeleteLineStart1+0x24>
    2992:	00 d0       	rcall	.+0      	; 0x2994 <DeleteLineStart1+0x26>
    2994:	ed b7       	in	r30, 0x3d	; 61
    2996:	fe b7       	in	r31, 0x3e	; 62
    2998:	31 96       	adiw	r30, 0x01	; 1
    299a:	ce 01       	movw	r24, r28
    299c:	01 96       	adiw	r24, 0x01	; 1
    299e:	ad b7       	in	r26, 0x3d	; 61
    29a0:	be b7       	in	r27, 0x3e	; 62
    29a2:	12 96       	adiw	r26, 0x02	; 2
    29a4:	9c 93       	st	X, r25
    29a6:	8e 93       	st	-X, r24
    29a8:	11 97       	sbiw	r26, 0x01	; 1
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	91 e0       	ldi	r25, 0x01	; 1
    29ae:	93 83       	std	Z+3, r25	; 0x03
    29b0:	82 83       	std	Z+2, r24	; 0x02
    29b2:	d7 01       	movw	r26, r14
    29b4:	1b 96       	adiw	r26, 0x0b	; 11
    29b6:	8c 91       	ld	r24, X
    29b8:	84 83       	std	Z+4, r24	; 0x04
    29ba:	15 82       	std	Z+5, r1	; 0x05
    29bc:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcpy(StringToPrint, "Line 1: Start @ ");
    29c0:	de 01       	movw	r26, r28
    29c2:	af 5b       	subi	r26, 0xBF	; 191
    29c4:	bf 4f       	sbci	r27, 0xFF	; 255
    29c6:	e4 e3       	ldi	r30, 0x34	; 52
    29c8:	f1 e0       	ldi	r31, 0x01	; 1
    29ca:	81 e1       	ldi	r24, 0x11	; 17
    29cc:	01 90       	ld	r0, Z+
    29ce:	0d 92       	st	X+, r0
    29d0:	81 50       	subi	r24, 0x01	; 1
    29d2:	e1 f7       	brne	.-8      	; 0x29cc <DeleteLineStart1+0x5e>
	strcat(StringToPrint, str);
    29d4:	ed b7       	in	r30, 0x3d	; 61
    29d6:	fe b7       	in	r31, 0x3e	; 62
    29d8:	36 96       	adiw	r30, 0x06	; 6
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	fe bf       	out	0x3e, r31	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	ed bf       	out	0x3d, r30	; 61
    29e4:	8e 01       	movw	r16, r28
    29e6:	0f 5b       	subi	r16, 0xBF	; 191
    29e8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ea:	c8 01       	movw	r24, r16
    29ec:	be 01       	movw	r22, r28
    29ee:	6f 5f       	subi	r22, 0xFF	; 255
    29f0:	7f 4f       	sbci	r23, 0xFF	; 255
    29f2:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	strcat(StringToPrint, ":");
    29f6:	f8 01       	movw	r30, r16
    29f8:	01 90       	ld	r0, Z+
    29fa:	00 20       	and	r0, r0
    29fc:	e9 f7       	brne	.-6      	; 0x29f8 <DeleteLineStart1+0x8a>
    29fe:	31 97       	sbiw	r30, 0x01	; 1
    2a00:	8a e3       	ldi	r24, 0x3A	; 58
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	80 83       	st	Z, r24
	if( s->L1_Start_Minutes < 10)
    2a08:	d7 01       	movw	r26, r14
    2a0a:	1a 96       	adiw	r26, 0x0a	; 10
    2a0c:	2c 91       	ld	r18, X
    2a0e:	1a 97       	sbiw	r26, 0x0a	; 10
    2a10:	2a 30       	cpi	r18, 0x0A	; 10
    2a12:	48 f4       	brcc	.+18     	; 0x2a26 <DeleteLineStart1+0xb8>
	{
		strcat(StringToPrint, "0");
    2a14:	f8 01       	movw	r30, r16
    2a16:	01 90       	ld	r0, Z+
    2a18:	00 20       	and	r0, r0
    2a1a:	e9 f7       	brne	.-6      	; 0x2a16 <DeleteLineStart1+0xa8>
    2a1c:	31 97       	sbiw	r30, 0x01	; 1
    2a1e:	80 e3       	ldi	r24, 0x30	; 48
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	91 83       	std	Z+1, r25	; 0x01
    2a24:	80 83       	st	Z, r24
		
	}
	sprintf(str,"%d", s->L1_Start_Minutes);
    2a26:	00 d0       	rcall	.+0      	; 0x2a28 <DeleteLineStart1+0xba>
    2a28:	00 d0       	rcall	.+0      	; 0x2a2a <DeleteLineStart1+0xbc>
    2a2a:	00 d0       	rcall	.+0      	; 0x2a2c <DeleteLineStart1+0xbe>
    2a2c:	ed b7       	in	r30, 0x3d	; 61
    2a2e:	fe b7       	in	r31, 0x3e	; 62
    2a30:	31 96       	adiw	r30, 0x01	; 1
    2a32:	8e 01       	movw	r16, r28
    2a34:	0f 5f       	subi	r16, 0xFF	; 255
    2a36:	1f 4f       	sbci	r17, 0xFF	; 255
    2a38:	ad b7       	in	r26, 0x3d	; 61
    2a3a:	be b7       	in	r27, 0x3e	; 62
    2a3c:	12 96       	adiw	r26, 0x02	; 2
    2a3e:	1c 93       	st	X, r17
    2a40:	0e 93       	st	-X, r16
    2a42:	11 97       	sbiw	r26, 0x01	; 1
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	91 e0       	ldi	r25, 0x01	; 1
    2a48:	93 83       	std	Z+3, r25	; 0x03
    2a4a:	82 83       	std	Z+2, r24	; 0x02
    2a4c:	24 83       	std	Z+4, r18	; 0x04
    2a4e:	15 82       	std	Z+5, r1	; 0x05
    2a50:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcat(StringToPrint, str);
    2a54:	ed b7       	in	r30, 0x3d	; 61
    2a56:	fe b7       	in	r31, 0x3e	; 62
    2a58:	36 96       	adiw	r30, 0x06	; 6
    2a5a:	0f b6       	in	r0, 0x3f	; 63
    2a5c:	f8 94       	cli
    2a5e:	fe bf       	out	0x3e, r31	; 62
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	ed bf       	out	0x3d, r30	; 61
    2a64:	ce 01       	movw	r24, r28
    2a66:	8f 5b       	subi	r24, 0xBF	; 191
    2a68:	9f 4f       	sbci	r25, 0xFF	; 255
    2a6a:	b8 01       	movw	r22, r16
    2a6c:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	drawString(1,100, StringToPrint ,HX8357_BLACK, 2);
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	64 e6       	ldi	r22, 0x64	; 100
    2a76:	70 e0       	ldi	r23, 0x00	; 0
    2a78:	ae 01       	movw	r20, r28
    2a7a:	4f 5b       	subi	r20, 0xBF	; 191
    2a7c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	02 e0       	ldi	r16, 0x02	; 2
    2a84:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
	
}
    2a88:	c0 5c       	subi	r28, 0xC0	; 192
    2a8a:	de 4f       	sbci	r29, 0xFE	; 254
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	f8 94       	cli
    2a90:	de bf       	out	0x3e, r29	; 62
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	cd bf       	out	0x3d, r28	; 61
    2a96:	df 91       	pop	r29
    2a98:	cf 91       	pop	r28
    2a9a:	1f 91       	pop	r17
    2a9c:	0f 91       	pop	r16
    2a9e:	ff 90       	pop	r15
    2aa0:	ef 90       	pop	r14
    2aa2:	08 95       	ret

00002aa4 <DeleteLine1Run>:

void DeleteLine1Run (system * s)
{
    2aa4:	0f 93       	push	r16
    2aa6:	1f 93       	push	r17
    2aa8:	cf 93       	push	r28
    2aaa:	df 93       	push	r29
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	c0 54       	subi	r28, 0x40	; 64
    2ab2:	d1 40       	sbci	r29, 0x01	; 1
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	cd bf       	out	0x3d, r28	; 61
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->Line_1_RunTime);
    2abe:	00 d0       	rcall	.+0      	; 0x2ac0 <DeleteLine1Run+0x1c>
    2ac0:	00 d0       	rcall	.+0      	; 0x2ac2 <DeleteLine1Run+0x1e>
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <DeleteLine1Run+0x20>
    2ac4:	ed b7       	in	r30, 0x3d	; 61
    2ac6:	fe b7       	in	r31, 0x3e	; 62
    2ac8:	31 96       	adiw	r30, 0x01	; 1
    2aca:	9e 01       	movw	r18, r28
    2acc:	2f 5f       	subi	r18, 0xFF	; 255
    2ace:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad0:	ad b7       	in	r26, 0x3d	; 61
    2ad2:	be b7       	in	r27, 0x3e	; 62
    2ad4:	12 96       	adiw	r26, 0x02	; 2
    2ad6:	3c 93       	st	X, r19
    2ad8:	2e 93       	st	-X, r18
    2ada:	11 97       	sbiw	r26, 0x01	; 1
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	31 e0       	ldi	r19, 0x01	; 1
    2ae0:	33 83       	std	Z+3, r19	; 0x03
    2ae2:	22 83       	std	Z+2, r18	; 0x02
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	1e 96       	adiw	r26, 0x0e	; 14
    2ae8:	8d 91       	ld	r24, X+
    2aea:	9c 91       	ld	r25, X
    2aec:	1f 97       	sbiw	r26, 0x0f	; 15
    2aee:	95 83       	std	Z+5, r25	; 0x05
    2af0:	84 83       	std	Z+4, r24	; 0x04
    2af2:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcpy(StringToPrint, "Line 1: Runs ");
    2af6:	de 01       	movw	r26, r28
    2af8:	af 5b       	subi	r26, 0xBF	; 191
    2afa:	bf 4f       	sbci	r27, 0xFF	; 255
    2afc:	e5 e4       	ldi	r30, 0x45	; 69
    2afe:	f1 e0       	ldi	r31, 0x01	; 1
    2b00:	8e e0       	ldi	r24, 0x0E	; 14
    2b02:	01 90       	ld	r0, Z+
    2b04:	0d 92       	st	X+, r0
    2b06:	81 50       	subi	r24, 0x01	; 1
    2b08:	e1 f7       	brne	.-8      	; 0x2b02 <DeleteLine1Run+0x5e>
	strcat(StringToPrint, str);
    2b0a:	8d b7       	in	r24, 0x3d	; 61
    2b0c:	9e b7       	in	r25, 0x3e	; 62
    2b0e:	06 96       	adiw	r24, 0x06	; 6
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	9e bf       	out	0x3e, r25	; 62
    2b16:	0f be       	out	0x3f, r0	; 63
    2b18:	8d bf       	out	0x3d, r24	; 61
    2b1a:	8e 01       	movw	r16, r28
    2b1c:	0f 5b       	subi	r16, 0xBF	; 191
    2b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b20:	c8 01       	movw	r24, r16
    2b22:	be 01       	movw	r22, r28
    2b24:	6f 5f       	subi	r22, 0xFF	; 255
    2b26:	7f 4f       	sbci	r23, 0xFF	; 255
    2b28:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	strcat(StringToPrint, " Min");
    2b2c:	d8 01       	movw	r26, r16
    2b2e:	0d 90       	ld	r0, X+
    2b30:	00 20       	and	r0, r0
    2b32:	e9 f7       	brne	.-6      	; 0x2b2e <DeleteLine1Run+0x8a>
    2b34:	11 97       	sbiw	r26, 0x01	; 1
    2b36:	e3 e5       	ldi	r30, 0x53	; 83
    2b38:	f1 e0       	ldi	r31, 0x01	; 1
    2b3a:	85 e0       	ldi	r24, 0x05	; 5
    2b3c:	01 90       	ld	r0, Z+
    2b3e:	0d 92       	st	X+, r0
    2b40:	81 50       	subi	r24, 0x01	; 1
    2b42:	e1 f7       	brne	.-8      	; 0x2b3c <DeleteLine1Run+0x98>
	drawString(1,125, StringToPrint ,HX8357_BLACK, 2);
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	6d e7       	ldi	r22, 0x7D	; 125
    2b4a:	70 e0       	ldi	r23, 0x00	; 0
    2b4c:	ae 01       	movw	r20, r28
    2b4e:	4f 5b       	subi	r20, 0xBF	; 191
    2b50:	5f 4f       	sbci	r21, 0xFF	; 255
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	02 e0       	ldi	r16, 0x02	; 2
    2b58:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
	
}
    2b5c:	c0 5c       	subi	r28, 0xC0	; 192
    2b5e:	de 4f       	sbci	r29, 0xFE	; 254
    2b60:	0f b6       	in	r0, 0x3f	; 63
    2b62:	f8 94       	cli
    2b64:	de bf       	out	0x3e, r29	; 62
    2b66:	0f be       	out	0x3f, r0	; 63
    2b68:	cd bf       	out	0x3d, r28	; 61
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	1f 91       	pop	r17
    2b70:	0f 91       	pop	r16
    2b72:	08 95       	ret

00002b74 <DeleteLineStatus1>:

void DeleteLineStatus1 (system *s)
{
    2b74:	0f 93       	push	r16
    2b76:	1f 93       	push	r17
    2b78:	cf 93       	push	r28
    2b7a:	df 93       	push	r29
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	c0 54       	subi	r28, 0x40	; 64
    2b82:	d1 40       	sbci	r29, 0x01	; 1
    2b84:	0f b6       	in	r0, 0x3f	; 63
    2b86:	f8 94       	cli
    2b88:	de bf       	out	0x3e, r29	; 62
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	cd bf       	out	0x3d, r28	; 61
    2b8e:	8c 01       	movw	r16, r24
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->Humid);
    2b90:	00 d0       	rcall	.+0      	; 0x2b92 <DeleteLineStatus1+0x1e>
    2b92:	00 d0       	rcall	.+0      	; 0x2b94 <DeleteLineStatus1+0x20>
    2b94:	00 d0       	rcall	.+0      	; 0x2b96 <DeleteLineStatus1+0x22>
    2b96:	ed b7       	in	r30, 0x3d	; 61
    2b98:	fe b7       	in	r31, 0x3e	; 62
    2b9a:	31 96       	adiw	r30, 0x01	; 1
    2b9c:	ce 01       	movw	r24, r28
    2b9e:	01 96       	adiw	r24, 0x01	; 1
    2ba0:	ad b7       	in	r26, 0x3d	; 61
    2ba2:	be b7       	in	r27, 0x3e	; 62
    2ba4:	12 96       	adiw	r26, 0x02	; 2
    2ba6:	9c 93       	st	X, r25
    2ba8:	8e 93       	st	-X, r24
    2baa:	11 97       	sbiw	r26, 0x01	; 1
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	91 e0       	ldi	r25, 0x01	; 1
    2bb0:	93 83       	std	Z+3, r25	; 0x03
    2bb2:	82 83       	std	Z+2, r24	; 0x02
    2bb4:	d8 01       	movw	r26, r16
    2bb6:	12 96       	adiw	r26, 0x02	; 2
    2bb8:	8d 91       	ld	r24, X+
    2bba:	9c 91       	ld	r25, X
    2bbc:	13 97       	sbiw	r26, 0x03	; 3
    2bbe:	95 83       	std	Z+5, r25	; 0x05
    2bc0:	84 83       	std	Z+4, r24	; 0x04
    2bc2:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	if(s->Line_1_Status == 1)
    2bc6:	ed b7       	in	r30, 0x3d	; 61
    2bc8:	fe b7       	in	r31, 0x3e	; 62
    2bca:	36 96       	adiw	r30, 0x06	; 6
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	fe bf       	out	0x3e, r31	; 62
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	ed bf       	out	0x3d, r30	; 61
    2bd6:	d8 01       	movw	r26, r16
    2bd8:	16 96       	adiw	r26, 0x06	; 6
    2bda:	8c 91       	ld	r24, X
    2bdc:	16 97       	sbiw	r26, 0x06	; 6
    2bde:	88 23       	and	r24, r24
    2be0:	59 f0       	breq	.+22     	; 0x2bf8 <DeleteLineStatus1+0x84>
	{
		strcpy(StringToPrint, "Line 1: No Errors!");
    2be2:	de 01       	movw	r26, r28
    2be4:	af 5b       	subi	r26, 0xBF	; 191
    2be6:	bf 4f       	sbci	r27, 0xFF	; 255
    2be8:	e8 e5       	ldi	r30, 0x58	; 88
    2bea:	f1 e0       	ldi	r31, 0x01	; 1
    2bec:	83 e1       	ldi	r24, 0x13	; 19
    2bee:	01 90       	ld	r0, Z+
    2bf0:	0d 92       	st	X+, r0
    2bf2:	81 50       	subi	r24, 0x01	; 1
    2bf4:	e1 f7       	brne	.-8      	; 0x2bee <DeleteLineStatus1+0x7a>
    2bf6:	0a c0       	rjmp	.+20     	; 0x2c0c <DeleteLineStatus1+0x98>
	}
	else
	{
		strcpy(StringToPrint, "Line 1: Check Flow!");
    2bf8:	de 01       	movw	r26, r28
    2bfa:	af 5b       	subi	r26, 0xBF	; 191
    2bfc:	bf 4f       	sbci	r27, 0xFF	; 255
    2bfe:	eb e6       	ldi	r30, 0x6B	; 107
    2c00:	f1 e0       	ldi	r31, 0x01	; 1
    2c02:	84 e1       	ldi	r24, 0x14	; 20
    2c04:	01 90       	ld	r0, Z+
    2c06:	0d 92       	st	X+, r0
    2c08:	81 50       	subi	r24, 0x01	; 1
    2c0a:	e1 f7       	brne	.-8      	; 0x2c04 <DeleteLineStatus1+0x90>
		
	}
	drawString(1,150, StringToPrint ,HX8357_BLACK, 2);
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	66 e9       	ldi	r22, 0x96	; 150
    2c12:	70 e0       	ldi	r23, 0x00	; 0
    2c14:	ae 01       	movw	r20, r28
    2c16:	4f 5b       	subi	r20, 0xBF	; 191
    2c18:	5f 4f       	sbci	r21, 0xFF	; 255
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	02 e0       	ldi	r16, 0x02	; 2
    2c20:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
}
    2c24:	c0 5c       	subi	r28, 0xC0	; 192
    2c26:	de 4f       	sbci	r29, 0xFE	; 254
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	1f 91       	pop	r17
    2c38:	0f 91       	pop	r16
    2c3a:	08 95       	ret

00002c3c <PrintLineStart2>:

//Line2 Functions
void PrintLineStart2(system * s)
{
    2c3c:	ef 92       	push	r14
    2c3e:	ff 92       	push	r15
    2c40:	0f 93       	push	r16
    2c42:	1f 93       	push	r17
    2c44:	cf 93       	push	r28
    2c46:	df 93       	push	r29
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
    2c4c:	c0 54       	subi	r28, 0x40	; 64
    2c4e:	d1 40       	sbci	r29, 0x01	; 1
    2c50:	0f b6       	in	r0, 0x3f	; 63
    2c52:	f8 94       	cli
    2c54:	de bf       	out	0x3e, r29	; 62
    2c56:	0f be       	out	0x3f, r0	; 63
    2c58:	cd bf       	out	0x3d, r28	; 61
    2c5a:	7c 01       	movw	r14, r24
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->L2_Start_Hours);
    2c5c:	00 d0       	rcall	.+0      	; 0x2c5e <PrintLineStart2+0x22>
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <PrintLineStart2+0x24>
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <PrintLineStart2+0x26>
    2c62:	ed b7       	in	r30, 0x3d	; 61
    2c64:	fe b7       	in	r31, 0x3e	; 62
    2c66:	31 96       	adiw	r30, 0x01	; 1
    2c68:	ce 01       	movw	r24, r28
    2c6a:	01 96       	adiw	r24, 0x01	; 1
    2c6c:	ad b7       	in	r26, 0x3d	; 61
    2c6e:	be b7       	in	r27, 0x3e	; 62
    2c70:	12 96       	adiw	r26, 0x02	; 2
    2c72:	9c 93       	st	X, r25
    2c74:	8e 93       	st	-X, r24
    2c76:	11 97       	sbiw	r26, 0x01	; 1
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	91 e0       	ldi	r25, 0x01	; 1
    2c7c:	93 83       	std	Z+3, r25	; 0x03
    2c7e:	82 83       	std	Z+2, r24	; 0x02
    2c80:	d7 01       	movw	r26, r14
    2c82:	1d 96       	adiw	r26, 0x0d	; 13
    2c84:	8c 91       	ld	r24, X
    2c86:	84 83       	std	Z+4, r24	; 0x04
    2c88:	15 82       	std	Z+5, r1	; 0x05
    2c8a:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcpy(StringToPrint, "Line 2: Start @ ");
    2c8e:	de 01       	movw	r26, r28
    2c90:	af 5b       	subi	r26, 0xBF	; 191
    2c92:	bf 4f       	sbci	r27, 0xFF	; 255
    2c94:	ef e7       	ldi	r30, 0x7F	; 127
    2c96:	f1 e0       	ldi	r31, 0x01	; 1
    2c98:	81 e1       	ldi	r24, 0x11	; 17
    2c9a:	01 90       	ld	r0, Z+
    2c9c:	0d 92       	st	X+, r0
    2c9e:	81 50       	subi	r24, 0x01	; 1
    2ca0:	e1 f7       	brne	.-8      	; 0x2c9a <PrintLineStart2+0x5e>
	strcat(StringToPrint, str);
    2ca2:	ed b7       	in	r30, 0x3d	; 61
    2ca4:	fe b7       	in	r31, 0x3e	; 62
    2ca6:	36 96       	adiw	r30, 0x06	; 6
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	fe bf       	out	0x3e, r31	; 62
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	ed bf       	out	0x3d, r30	; 61
    2cb2:	8e 01       	movw	r16, r28
    2cb4:	0f 5b       	subi	r16, 0xBF	; 191
    2cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb8:	c8 01       	movw	r24, r16
    2cba:	be 01       	movw	r22, r28
    2cbc:	6f 5f       	subi	r22, 0xFF	; 255
    2cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc0:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	strcat(StringToPrint, ":");
    2cc4:	f8 01       	movw	r30, r16
    2cc6:	01 90       	ld	r0, Z+
    2cc8:	00 20       	and	r0, r0
    2cca:	e9 f7       	brne	.-6      	; 0x2cc6 <PrintLineStart2+0x8a>
    2ccc:	31 97       	sbiw	r30, 0x01	; 1
    2cce:	8a e3       	ldi	r24, 0x3A	; 58
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	91 83       	std	Z+1, r25	; 0x01
    2cd4:	80 83       	st	Z, r24
	if( s->L2_Start_Minutes < 10)
    2cd6:	d7 01       	movw	r26, r14
    2cd8:	1c 96       	adiw	r26, 0x0c	; 12
    2cda:	2c 91       	ld	r18, X
    2cdc:	1c 97       	sbiw	r26, 0x0c	; 12
    2cde:	2a 30       	cpi	r18, 0x0A	; 10
    2ce0:	48 f4       	brcc	.+18     	; 0x2cf4 <PrintLineStart2+0xb8>
	{
		strcat(StringToPrint, "0");
    2ce2:	f8 01       	movw	r30, r16
    2ce4:	01 90       	ld	r0, Z+
    2ce6:	00 20       	and	r0, r0
    2ce8:	e9 f7       	brne	.-6      	; 0x2ce4 <PrintLineStart2+0xa8>
    2cea:	31 97       	sbiw	r30, 0x01	; 1
    2cec:	80 e3       	ldi	r24, 0x30	; 48
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	91 83       	std	Z+1, r25	; 0x01
    2cf2:	80 83       	st	Z, r24
		
	}
	sprintf(str,"%d", s->L2_Start_Minutes);
    2cf4:	00 d0       	rcall	.+0      	; 0x2cf6 <PrintLineStart2+0xba>
    2cf6:	00 d0       	rcall	.+0      	; 0x2cf8 <PrintLineStart2+0xbc>
    2cf8:	00 d0       	rcall	.+0      	; 0x2cfa <PrintLineStart2+0xbe>
    2cfa:	ed b7       	in	r30, 0x3d	; 61
    2cfc:	fe b7       	in	r31, 0x3e	; 62
    2cfe:	31 96       	adiw	r30, 0x01	; 1
    2d00:	8e 01       	movw	r16, r28
    2d02:	0f 5f       	subi	r16, 0xFF	; 255
    2d04:	1f 4f       	sbci	r17, 0xFF	; 255
    2d06:	ad b7       	in	r26, 0x3d	; 61
    2d08:	be b7       	in	r27, 0x3e	; 62
    2d0a:	12 96       	adiw	r26, 0x02	; 2
    2d0c:	1c 93       	st	X, r17
    2d0e:	0e 93       	st	-X, r16
    2d10:	11 97       	sbiw	r26, 0x01	; 1
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	91 e0       	ldi	r25, 0x01	; 1
    2d16:	93 83       	std	Z+3, r25	; 0x03
    2d18:	82 83       	std	Z+2, r24	; 0x02
    2d1a:	24 83       	std	Z+4, r18	; 0x04
    2d1c:	15 82       	std	Z+5, r1	; 0x05
    2d1e:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcat(StringToPrint, str);
    2d22:	ed b7       	in	r30, 0x3d	; 61
    2d24:	fe b7       	in	r31, 0x3e	; 62
    2d26:	36 96       	adiw	r30, 0x06	; 6
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	f8 94       	cli
    2d2c:	fe bf       	out	0x3e, r31	; 62
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	ed bf       	out	0x3d, r30	; 61
    2d32:	ce 01       	movw	r24, r28
    2d34:	8f 5b       	subi	r24, 0xBF	; 191
    2d36:	9f 4f       	sbci	r25, 0xFF	; 255
    2d38:	b8 01       	movw	r22, r16
    2d3a:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	drawString(1,200, StringToPrint ,HX8357_GREEN, 2);
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	68 ec       	ldi	r22, 0xC8	; 200
    2d44:	70 e0       	ldi	r23, 0x00	; 0
    2d46:	ae 01       	movw	r20, r28
    2d48:	4f 5b       	subi	r20, 0xBF	; 191
    2d4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d4c:	20 ee       	ldi	r18, 0xE0	; 224
    2d4e:	37 e0       	ldi	r19, 0x07	; 7
    2d50:	02 e0       	ldi	r16, 0x02	; 2
    2d52:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
	
}
    2d56:	c0 5c       	subi	r28, 0xC0	; 192
    2d58:	de 4f       	sbci	r29, 0xFE	; 254
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	f8 94       	cli
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	df 91       	pop	r29
    2d66:	cf 91       	pop	r28
    2d68:	1f 91       	pop	r17
    2d6a:	0f 91       	pop	r16
    2d6c:	ff 90       	pop	r15
    2d6e:	ef 90       	pop	r14
    2d70:	08 95       	ret

00002d72 <PrintLine2Run>:

void PrintLine2Run (system * s)
{
    2d72:	0f 93       	push	r16
    2d74:	1f 93       	push	r17
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	c0 54       	subi	r28, 0x40	; 64
    2d80:	d1 40       	sbci	r29, 0x01	; 1
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	cd bf       	out	0x3d, r28	; 61
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->Line_2_RunTime);
    2d8c:	00 d0       	rcall	.+0      	; 0x2d8e <PrintLine2Run+0x1c>
    2d8e:	00 d0       	rcall	.+0      	; 0x2d90 <PrintLine2Run+0x1e>
    2d90:	00 d0       	rcall	.+0      	; 0x2d92 <PrintLine2Run+0x20>
    2d92:	ed b7       	in	r30, 0x3d	; 61
    2d94:	fe b7       	in	r31, 0x3e	; 62
    2d96:	31 96       	adiw	r30, 0x01	; 1
    2d98:	9e 01       	movw	r18, r28
    2d9a:	2f 5f       	subi	r18, 0xFF	; 255
    2d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d9e:	ad b7       	in	r26, 0x3d	; 61
    2da0:	be b7       	in	r27, 0x3e	; 62
    2da2:	12 96       	adiw	r26, 0x02	; 2
    2da4:	3c 93       	st	X, r19
    2da6:	2e 93       	st	-X, r18
    2da8:	11 97       	sbiw	r26, 0x01	; 1
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	31 e0       	ldi	r19, 0x01	; 1
    2dae:	33 83       	std	Z+3, r19	; 0x03
    2db0:	22 83       	std	Z+2, r18	; 0x02
    2db2:	dc 01       	movw	r26, r24
    2db4:	50 96       	adiw	r26, 0x10	; 16
    2db6:	8d 91       	ld	r24, X+
    2db8:	9c 91       	ld	r25, X
    2dba:	51 97       	sbiw	r26, 0x11	; 17
    2dbc:	95 83       	std	Z+5, r25	; 0x05
    2dbe:	84 83       	std	Z+4, r24	; 0x04
    2dc0:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcpy(StringToPrint, "Line 2: Runs ");
    2dc4:	de 01       	movw	r26, r28
    2dc6:	af 5b       	subi	r26, 0xBF	; 191
    2dc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dca:	e0 e9       	ldi	r30, 0x90	; 144
    2dcc:	f1 e0       	ldi	r31, 0x01	; 1
    2dce:	8e e0       	ldi	r24, 0x0E	; 14
    2dd0:	01 90       	ld	r0, Z+
    2dd2:	0d 92       	st	X+, r0
    2dd4:	81 50       	subi	r24, 0x01	; 1
    2dd6:	e1 f7       	brne	.-8      	; 0x2dd0 <PrintLine2Run+0x5e>
	strcat(StringToPrint, str);
    2dd8:	8d b7       	in	r24, 0x3d	; 61
    2dda:	9e b7       	in	r25, 0x3e	; 62
    2ddc:	06 96       	adiw	r24, 0x06	; 6
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	9e bf       	out	0x3e, r25	; 62
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	8d bf       	out	0x3d, r24	; 61
    2de8:	8e 01       	movw	r16, r28
    2dea:	0f 5b       	subi	r16, 0xBF	; 191
    2dec:	1f 4f       	sbci	r17, 0xFF	; 255
    2dee:	c8 01       	movw	r24, r16
    2df0:	be 01       	movw	r22, r28
    2df2:	6f 5f       	subi	r22, 0xFF	; 255
    2df4:	7f 4f       	sbci	r23, 0xFF	; 255
    2df6:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	strcat(StringToPrint, " Min");
    2dfa:	d8 01       	movw	r26, r16
    2dfc:	0d 90       	ld	r0, X+
    2dfe:	00 20       	and	r0, r0
    2e00:	e9 f7       	brne	.-6      	; 0x2dfc <PrintLine2Run+0x8a>
    2e02:	11 97       	sbiw	r26, 0x01	; 1
    2e04:	e3 e5       	ldi	r30, 0x53	; 83
    2e06:	f1 e0       	ldi	r31, 0x01	; 1
    2e08:	85 e0       	ldi	r24, 0x05	; 5
    2e0a:	01 90       	ld	r0, Z+
    2e0c:	0d 92       	st	X+, r0
    2e0e:	81 50       	subi	r24, 0x01	; 1
    2e10:	e1 f7       	brne	.-8      	; 0x2e0a <PrintLine2Run+0x98>
	drawString(1,225, StringToPrint ,HX8357_GREEN, 2);
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	61 ee       	ldi	r22, 0xE1	; 225
    2e18:	70 e0       	ldi	r23, 0x00	; 0
    2e1a:	ae 01       	movw	r20, r28
    2e1c:	4f 5b       	subi	r20, 0xBF	; 191
    2e1e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e20:	20 ee       	ldi	r18, 0xE0	; 224
    2e22:	37 e0       	ldi	r19, 0x07	; 7
    2e24:	02 e0       	ldi	r16, 0x02	; 2
    2e26:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
	
}
    2e2a:	c0 5c       	subi	r28, 0xC0	; 192
    2e2c:	de 4f       	sbci	r29, 0xFE	; 254
    2e2e:	0f b6       	in	r0, 0x3f	; 63
    2e30:	f8 94       	cli
    2e32:	de bf       	out	0x3e, r29	; 62
    2e34:	0f be       	out	0x3f, r0	; 63
    2e36:	cd bf       	out	0x3d, r28	; 61
    2e38:	df 91       	pop	r29
    2e3a:	cf 91       	pop	r28
    2e3c:	1f 91       	pop	r17
    2e3e:	0f 91       	pop	r16
    2e40:	08 95       	ret

00002e42 <PrintLineStatus2>:

void PrintLineStatus2 (system *s)
{
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	c0 54       	subi	r28, 0x40	; 64
    2e50:	d1 40       	sbci	r29, 0x01	; 1
    2e52:	0f b6       	in	r0, 0x3f	; 63
    2e54:	f8 94       	cli
    2e56:	de bf       	out	0x3e, r29	; 62
    2e58:	0f be       	out	0x3f, r0	; 63
    2e5a:	cd bf       	out	0x3d, r28	; 61
    2e5c:	8c 01       	movw	r16, r24
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->Humid);
    2e5e:	00 d0       	rcall	.+0      	; 0x2e60 <PrintLineStatus2+0x1e>
    2e60:	00 d0       	rcall	.+0      	; 0x2e62 <PrintLineStatus2+0x20>
    2e62:	00 d0       	rcall	.+0      	; 0x2e64 <PrintLineStatus2+0x22>
    2e64:	ed b7       	in	r30, 0x3d	; 61
    2e66:	fe b7       	in	r31, 0x3e	; 62
    2e68:	31 96       	adiw	r30, 0x01	; 1
    2e6a:	ce 01       	movw	r24, r28
    2e6c:	01 96       	adiw	r24, 0x01	; 1
    2e6e:	ad b7       	in	r26, 0x3d	; 61
    2e70:	be b7       	in	r27, 0x3e	; 62
    2e72:	12 96       	adiw	r26, 0x02	; 2
    2e74:	9c 93       	st	X, r25
    2e76:	8e 93       	st	-X, r24
    2e78:	11 97       	sbiw	r26, 0x01	; 1
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	91 e0       	ldi	r25, 0x01	; 1
    2e7e:	93 83       	std	Z+3, r25	; 0x03
    2e80:	82 83       	std	Z+2, r24	; 0x02
    2e82:	d8 01       	movw	r26, r16
    2e84:	12 96       	adiw	r26, 0x02	; 2
    2e86:	8d 91       	ld	r24, X+
    2e88:	9c 91       	ld	r25, X
    2e8a:	13 97       	sbiw	r26, 0x03	; 3
    2e8c:	95 83       	std	Z+5, r25	; 0x05
    2e8e:	84 83       	std	Z+4, r24	; 0x04
    2e90:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	if(s->Line_2_Status == 1)
    2e94:	ed b7       	in	r30, 0x3d	; 61
    2e96:	fe b7       	in	r31, 0x3e	; 62
    2e98:	36 96       	adiw	r30, 0x06	; 6
    2e9a:	0f b6       	in	r0, 0x3f	; 63
    2e9c:	f8 94       	cli
    2e9e:	fe bf       	out	0x3e, r31	; 62
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	ed bf       	out	0x3d, r30	; 61
    2ea4:	d8 01       	movw	r26, r16
    2ea6:	17 96       	adiw	r26, 0x07	; 7
    2ea8:	8c 91       	ld	r24, X
    2eaa:	17 97       	sbiw	r26, 0x07	; 7
    2eac:	88 23       	and	r24, r24
    2eae:	59 f0       	breq	.+22     	; 0x2ec6 <PrintLineStatus2+0x84>
	{
		strcpy(StringToPrint, "Line 2: No Errors!");
    2eb0:	de 01       	movw	r26, r28
    2eb2:	af 5b       	subi	r26, 0xBF	; 191
    2eb4:	bf 4f       	sbci	r27, 0xFF	; 255
    2eb6:	ee e9       	ldi	r30, 0x9E	; 158
    2eb8:	f1 e0       	ldi	r31, 0x01	; 1
    2eba:	83 e1       	ldi	r24, 0x13	; 19
    2ebc:	01 90       	ld	r0, Z+
    2ebe:	0d 92       	st	X+, r0
    2ec0:	81 50       	subi	r24, 0x01	; 1
    2ec2:	e1 f7       	brne	.-8      	; 0x2ebc <PrintLineStatus2+0x7a>
    2ec4:	0a c0       	rjmp	.+20     	; 0x2eda <PrintLineStatus2+0x98>
	}
	else
	{
		strcpy(StringToPrint, "Line 2: Check Flow!");
    2ec6:	de 01       	movw	r26, r28
    2ec8:	af 5b       	subi	r26, 0xBF	; 191
    2eca:	bf 4f       	sbci	r27, 0xFF	; 255
    2ecc:	e1 eb       	ldi	r30, 0xB1	; 177
    2ece:	f1 e0       	ldi	r31, 0x01	; 1
    2ed0:	84 e1       	ldi	r24, 0x14	; 20
    2ed2:	01 90       	ld	r0, Z+
    2ed4:	0d 92       	st	X+, r0
    2ed6:	81 50       	subi	r24, 0x01	; 1
    2ed8:	e1 f7       	brne	.-8      	; 0x2ed2 <PrintLineStatus2+0x90>
		
	}
	drawString(1,250, StringToPrint ,HX8357_GREEN, 2);
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	6a ef       	ldi	r22, 0xFA	; 250
    2ee0:	70 e0       	ldi	r23, 0x00	; 0
    2ee2:	ae 01       	movw	r20, r28
    2ee4:	4f 5b       	subi	r20, 0xBF	; 191
    2ee6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ee8:	20 ee       	ldi	r18, 0xE0	; 224
    2eea:	37 e0       	ldi	r19, 0x07	; 7
    2eec:	02 e0       	ldi	r16, 0x02	; 2
    2eee:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
}
    2ef2:	c0 5c       	subi	r28, 0xC0	; 192
    2ef4:	de 4f       	sbci	r29, 0xFE	; 254
    2ef6:	0f b6       	in	r0, 0x3f	; 63
    2ef8:	f8 94       	cli
    2efa:	de bf       	out	0x3e, r29	; 62
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	cd bf       	out	0x3d, r28	; 61
    2f00:	df 91       	pop	r29
    2f02:	cf 91       	pop	r28
    2f04:	1f 91       	pop	r17
    2f06:	0f 91       	pop	r16
    2f08:	08 95       	ret

00002f0a <DeleteLineStart2>:
//Delete Functions
void DeleteLineStart2(system * s)
{
    2f0a:	ef 92       	push	r14
    2f0c:	ff 92       	push	r15
    2f0e:	0f 93       	push	r16
    2f10:	1f 93       	push	r17
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
    2f1a:	c0 54       	subi	r28, 0x40	; 64
    2f1c:	d1 40       	sbci	r29, 0x01	; 1
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	f8 94       	cli
    2f22:	de bf       	out	0x3e, r29	; 62
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	cd bf       	out	0x3d, r28	; 61
    2f28:	7c 01       	movw	r14, r24
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->L2_Start_Hours);
    2f2a:	00 d0       	rcall	.+0      	; 0x2f2c <DeleteLineStart2+0x22>
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <DeleteLineStart2+0x24>
    2f2e:	00 d0       	rcall	.+0      	; 0x2f30 <DeleteLineStart2+0x26>
    2f30:	ed b7       	in	r30, 0x3d	; 61
    2f32:	fe b7       	in	r31, 0x3e	; 62
    2f34:	31 96       	adiw	r30, 0x01	; 1
    2f36:	ce 01       	movw	r24, r28
    2f38:	01 96       	adiw	r24, 0x01	; 1
    2f3a:	ad b7       	in	r26, 0x3d	; 61
    2f3c:	be b7       	in	r27, 0x3e	; 62
    2f3e:	12 96       	adiw	r26, 0x02	; 2
    2f40:	9c 93       	st	X, r25
    2f42:	8e 93       	st	-X, r24
    2f44:	11 97       	sbiw	r26, 0x01	; 1
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	91 e0       	ldi	r25, 0x01	; 1
    2f4a:	93 83       	std	Z+3, r25	; 0x03
    2f4c:	82 83       	std	Z+2, r24	; 0x02
    2f4e:	d7 01       	movw	r26, r14
    2f50:	1d 96       	adiw	r26, 0x0d	; 13
    2f52:	8c 91       	ld	r24, X
    2f54:	84 83       	std	Z+4, r24	; 0x04
    2f56:	15 82       	std	Z+5, r1	; 0x05
    2f58:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcpy(StringToPrint, "Line 2: Start @ ");
    2f5c:	de 01       	movw	r26, r28
    2f5e:	af 5b       	subi	r26, 0xBF	; 191
    2f60:	bf 4f       	sbci	r27, 0xFF	; 255
    2f62:	ef e7       	ldi	r30, 0x7F	; 127
    2f64:	f1 e0       	ldi	r31, 0x01	; 1
    2f66:	81 e1       	ldi	r24, 0x11	; 17
    2f68:	01 90       	ld	r0, Z+
    2f6a:	0d 92       	st	X+, r0
    2f6c:	81 50       	subi	r24, 0x01	; 1
    2f6e:	e1 f7       	brne	.-8      	; 0x2f68 <DeleteLineStart2+0x5e>
	strcat(StringToPrint, str);
    2f70:	ed b7       	in	r30, 0x3d	; 61
    2f72:	fe b7       	in	r31, 0x3e	; 62
    2f74:	36 96       	adiw	r30, 0x06	; 6
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	fe bf       	out	0x3e, r31	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	ed bf       	out	0x3d, r30	; 61
    2f80:	8e 01       	movw	r16, r28
    2f82:	0f 5b       	subi	r16, 0xBF	; 191
    2f84:	1f 4f       	sbci	r17, 0xFF	; 255
    2f86:	c8 01       	movw	r24, r16
    2f88:	be 01       	movw	r22, r28
    2f8a:	6f 5f       	subi	r22, 0xFF	; 255
    2f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f8e:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	strcat(StringToPrint, ":");
    2f92:	f8 01       	movw	r30, r16
    2f94:	01 90       	ld	r0, Z+
    2f96:	00 20       	and	r0, r0
    2f98:	e9 f7       	brne	.-6      	; 0x2f94 <DeleteLineStart2+0x8a>
    2f9a:	31 97       	sbiw	r30, 0x01	; 1
    2f9c:	8a e3       	ldi	r24, 0x3A	; 58
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	91 83       	std	Z+1, r25	; 0x01
    2fa2:	80 83       	st	Z, r24
	if( s->L2_Start_Minutes < 10)
    2fa4:	d7 01       	movw	r26, r14
    2fa6:	1c 96       	adiw	r26, 0x0c	; 12
    2fa8:	2c 91       	ld	r18, X
    2faa:	1c 97       	sbiw	r26, 0x0c	; 12
    2fac:	2a 30       	cpi	r18, 0x0A	; 10
    2fae:	48 f4       	brcc	.+18     	; 0x2fc2 <DeleteLineStart2+0xb8>
	{
		strcat(StringToPrint, "0");
    2fb0:	f8 01       	movw	r30, r16
    2fb2:	01 90       	ld	r0, Z+
    2fb4:	00 20       	and	r0, r0
    2fb6:	e9 f7       	brne	.-6      	; 0x2fb2 <DeleteLineStart2+0xa8>
    2fb8:	31 97       	sbiw	r30, 0x01	; 1
    2fba:	80 e3       	ldi	r24, 0x30	; 48
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	91 83       	std	Z+1, r25	; 0x01
    2fc0:	80 83       	st	Z, r24
		
	}
	sprintf(str,"%d", s->L2_Start_Minutes);
    2fc2:	00 d0       	rcall	.+0      	; 0x2fc4 <DeleteLineStart2+0xba>
    2fc4:	00 d0       	rcall	.+0      	; 0x2fc6 <DeleteLineStart2+0xbc>
    2fc6:	00 d0       	rcall	.+0      	; 0x2fc8 <DeleteLineStart2+0xbe>
    2fc8:	ed b7       	in	r30, 0x3d	; 61
    2fca:	fe b7       	in	r31, 0x3e	; 62
    2fcc:	31 96       	adiw	r30, 0x01	; 1
    2fce:	8e 01       	movw	r16, r28
    2fd0:	0f 5f       	subi	r16, 0xFF	; 255
    2fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fd4:	ad b7       	in	r26, 0x3d	; 61
    2fd6:	be b7       	in	r27, 0x3e	; 62
    2fd8:	12 96       	adiw	r26, 0x02	; 2
    2fda:	1c 93       	st	X, r17
    2fdc:	0e 93       	st	-X, r16
    2fde:	11 97       	sbiw	r26, 0x01	; 1
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	91 e0       	ldi	r25, 0x01	; 1
    2fe4:	93 83       	std	Z+3, r25	; 0x03
    2fe6:	82 83       	std	Z+2, r24	; 0x02
    2fe8:	24 83       	std	Z+4, r18	; 0x04
    2fea:	15 82       	std	Z+5, r1	; 0x05
    2fec:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcat(StringToPrint, str);
    2ff0:	ed b7       	in	r30, 0x3d	; 61
    2ff2:	fe b7       	in	r31, 0x3e	; 62
    2ff4:	36 96       	adiw	r30, 0x06	; 6
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	f8 94       	cli
    2ffa:	fe bf       	out	0x3e, r31	; 62
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	ed bf       	out	0x3d, r30	; 61
    3000:	ce 01       	movw	r24, r28
    3002:	8f 5b       	subi	r24, 0xBF	; 191
    3004:	9f 4f       	sbci	r25, 0xFF	; 255
    3006:	b8 01       	movw	r22, r16
    3008:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	drawString(1,200, StringToPrint ,HX8357_BLACK, 2);
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	68 ec       	ldi	r22, 0xC8	; 200
    3012:	70 e0       	ldi	r23, 0x00	; 0
    3014:	ae 01       	movw	r20, r28
    3016:	4f 5b       	subi	r20, 0xBF	; 191
    3018:	5f 4f       	sbci	r21, 0xFF	; 255
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	02 e0       	ldi	r16, 0x02	; 2
    3020:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
	
}
    3024:	c0 5c       	subi	r28, 0xC0	; 192
    3026:	de 4f       	sbci	r29, 0xFE	; 254
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	df 91       	pop	r29
    3034:	cf 91       	pop	r28
    3036:	1f 91       	pop	r17
    3038:	0f 91       	pop	r16
    303a:	ff 90       	pop	r15
    303c:	ef 90       	pop	r14
    303e:	08 95       	ret

00003040 <DeleteLine2Run>:

void DeleteLine2Run (system * s)
{
    3040:	0f 93       	push	r16
    3042:	1f 93       	push	r17
    3044:	cf 93       	push	r28
    3046:	df 93       	push	r29
    3048:	cd b7       	in	r28, 0x3d	; 61
    304a:	de b7       	in	r29, 0x3e	; 62
    304c:	c0 54       	subi	r28, 0x40	; 64
    304e:	d1 40       	sbci	r29, 0x01	; 1
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	f8 94       	cli
    3054:	de bf       	out	0x3e, r29	; 62
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	cd bf       	out	0x3d, r28	; 61
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->Line_2_RunTime);
    305a:	00 d0       	rcall	.+0      	; 0x305c <DeleteLine2Run+0x1c>
    305c:	00 d0       	rcall	.+0      	; 0x305e <DeleteLine2Run+0x1e>
    305e:	00 d0       	rcall	.+0      	; 0x3060 <DeleteLine2Run+0x20>
    3060:	ed b7       	in	r30, 0x3d	; 61
    3062:	fe b7       	in	r31, 0x3e	; 62
    3064:	31 96       	adiw	r30, 0x01	; 1
    3066:	9e 01       	movw	r18, r28
    3068:	2f 5f       	subi	r18, 0xFF	; 255
    306a:	3f 4f       	sbci	r19, 0xFF	; 255
    306c:	ad b7       	in	r26, 0x3d	; 61
    306e:	be b7       	in	r27, 0x3e	; 62
    3070:	12 96       	adiw	r26, 0x02	; 2
    3072:	3c 93       	st	X, r19
    3074:	2e 93       	st	-X, r18
    3076:	11 97       	sbiw	r26, 0x01	; 1
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	31 e0       	ldi	r19, 0x01	; 1
    307c:	33 83       	std	Z+3, r19	; 0x03
    307e:	22 83       	std	Z+2, r18	; 0x02
    3080:	dc 01       	movw	r26, r24
    3082:	50 96       	adiw	r26, 0x10	; 16
    3084:	8d 91       	ld	r24, X+
    3086:	9c 91       	ld	r25, X
    3088:	51 97       	sbiw	r26, 0x11	; 17
    308a:	95 83       	std	Z+5, r25	; 0x05
    308c:	84 83       	std	Z+4, r24	; 0x04
    308e:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	strcpy(StringToPrint, "Line 2: Runs ");
    3092:	de 01       	movw	r26, r28
    3094:	af 5b       	subi	r26, 0xBF	; 191
    3096:	bf 4f       	sbci	r27, 0xFF	; 255
    3098:	e0 e9       	ldi	r30, 0x90	; 144
    309a:	f1 e0       	ldi	r31, 0x01	; 1
    309c:	8e e0       	ldi	r24, 0x0E	; 14
    309e:	01 90       	ld	r0, Z+
    30a0:	0d 92       	st	X+, r0
    30a2:	81 50       	subi	r24, 0x01	; 1
    30a4:	e1 f7       	brne	.-8      	; 0x309e <DeleteLine2Run+0x5e>
	strcat(StringToPrint, str);
    30a6:	8d b7       	in	r24, 0x3d	; 61
    30a8:	9e b7       	in	r25, 0x3e	; 62
    30aa:	06 96       	adiw	r24, 0x06	; 6
    30ac:	0f b6       	in	r0, 0x3f	; 63
    30ae:	f8 94       	cli
    30b0:	9e bf       	out	0x3e, r25	; 62
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	8d bf       	out	0x3d, r24	; 61
    30b6:	8e 01       	movw	r16, r28
    30b8:	0f 5b       	subi	r16, 0xBF	; 191
    30ba:	1f 4f       	sbci	r17, 0xFF	; 255
    30bc:	c8 01       	movw	r24, r16
    30be:	be 01       	movw	r22, r28
    30c0:	6f 5f       	subi	r22, 0xFF	; 255
    30c2:	7f 4f       	sbci	r23, 0xFF	; 255
    30c4:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
	strcat(StringToPrint, " Min");
    30c8:	d8 01       	movw	r26, r16
    30ca:	0d 90       	ld	r0, X+
    30cc:	00 20       	and	r0, r0
    30ce:	e9 f7       	brne	.-6      	; 0x30ca <DeleteLine2Run+0x8a>
    30d0:	11 97       	sbiw	r26, 0x01	; 1
    30d2:	e3 e5       	ldi	r30, 0x53	; 83
    30d4:	f1 e0       	ldi	r31, 0x01	; 1
    30d6:	85 e0       	ldi	r24, 0x05	; 5
    30d8:	01 90       	ld	r0, Z+
    30da:	0d 92       	st	X+, r0
    30dc:	81 50       	subi	r24, 0x01	; 1
    30de:	e1 f7       	brne	.-8      	; 0x30d8 <DeleteLine2Run+0x98>
	drawString(1,225, StringToPrint ,HX8357_BLACK, 2);
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	61 ee       	ldi	r22, 0xE1	; 225
    30e6:	70 e0       	ldi	r23, 0x00	; 0
    30e8:	ae 01       	movw	r20, r28
    30ea:	4f 5b       	subi	r20, 0xBF	; 191
    30ec:	5f 4f       	sbci	r21, 0xFF	; 255
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	02 e0       	ldi	r16, 0x02	; 2
    30f4:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
	
}
    30f8:	c0 5c       	subi	r28, 0xC0	; 192
    30fa:	de 4f       	sbci	r29, 0xFE	; 254
    30fc:	0f b6       	in	r0, 0x3f	; 63
    30fe:	f8 94       	cli
    3100:	de bf       	out	0x3e, r29	; 62
    3102:	0f be       	out	0x3f, r0	; 63
    3104:	cd bf       	out	0x3d, r28	; 61
    3106:	df 91       	pop	r29
    3108:	cf 91       	pop	r28
    310a:	1f 91       	pop	r17
    310c:	0f 91       	pop	r16
    310e:	08 95       	ret

00003110 <DeleteLineStatus2>:

void DeleteLineStatus2 (system *s)
{
    3110:	0f 93       	push	r16
    3112:	1f 93       	push	r17
    3114:	cf 93       	push	r28
    3116:	df 93       	push	r29
    3118:	cd b7       	in	r28, 0x3d	; 61
    311a:	de b7       	in	r29, 0x3e	; 62
    311c:	c0 54       	subi	r28, 0x40	; 64
    311e:	d1 40       	sbci	r29, 0x01	; 1
    3120:	0f b6       	in	r0, 0x3f	; 63
    3122:	f8 94       	cli
    3124:	de bf       	out	0x3e, r29	; 62
    3126:	0f be       	out	0x3f, r0	; 63
    3128:	cd bf       	out	0x3d, r28	; 61
    312a:	8c 01       	movw	r16, r24
	char str[64];
	char StringToPrint[256];
	sprintf(str,"%d", s->Humid);
    312c:	00 d0       	rcall	.+0      	; 0x312e <DeleteLineStatus2+0x1e>
    312e:	00 d0       	rcall	.+0      	; 0x3130 <DeleteLineStatus2+0x20>
    3130:	00 d0       	rcall	.+0      	; 0x3132 <DeleteLineStatus2+0x22>
    3132:	ed b7       	in	r30, 0x3d	; 61
    3134:	fe b7       	in	r31, 0x3e	; 62
    3136:	31 96       	adiw	r30, 0x01	; 1
    3138:	ce 01       	movw	r24, r28
    313a:	01 96       	adiw	r24, 0x01	; 1
    313c:	ad b7       	in	r26, 0x3d	; 61
    313e:	be b7       	in	r27, 0x3e	; 62
    3140:	12 96       	adiw	r26, 0x02	; 2
    3142:	9c 93       	st	X, r25
    3144:	8e 93       	st	-X, r24
    3146:	11 97       	sbiw	r26, 0x01	; 1
    3148:	80 e0       	ldi	r24, 0x00	; 0
    314a:	91 e0       	ldi	r25, 0x01	; 1
    314c:	93 83       	std	Z+3, r25	; 0x03
    314e:	82 83       	std	Z+2, r24	; 0x02
    3150:	d8 01       	movw	r26, r16
    3152:	12 96       	adiw	r26, 0x02	; 2
    3154:	8d 91       	ld	r24, X+
    3156:	9c 91       	ld	r25, X
    3158:	13 97       	sbiw	r26, 0x03	; 3
    315a:	95 83       	std	Z+5, r25	; 0x05
    315c:	84 83       	std	Z+4, r24	; 0x04
    315e:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
	if(s->Line_2_Status == 1)
    3162:	ed b7       	in	r30, 0x3d	; 61
    3164:	fe b7       	in	r31, 0x3e	; 62
    3166:	36 96       	adiw	r30, 0x06	; 6
    3168:	0f b6       	in	r0, 0x3f	; 63
    316a:	f8 94       	cli
    316c:	fe bf       	out	0x3e, r31	; 62
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	ed bf       	out	0x3d, r30	; 61
    3172:	d8 01       	movw	r26, r16
    3174:	17 96       	adiw	r26, 0x07	; 7
    3176:	8c 91       	ld	r24, X
    3178:	17 97       	sbiw	r26, 0x07	; 7
    317a:	88 23       	and	r24, r24
    317c:	59 f0       	breq	.+22     	; 0x3194 <DeleteLineStatus2+0x84>
	{
		strcpy(StringToPrint, "Line 2: No Errors!");
    317e:	de 01       	movw	r26, r28
    3180:	af 5b       	subi	r26, 0xBF	; 191
    3182:	bf 4f       	sbci	r27, 0xFF	; 255
    3184:	ee e9       	ldi	r30, 0x9E	; 158
    3186:	f1 e0       	ldi	r31, 0x01	; 1
    3188:	83 e1       	ldi	r24, 0x13	; 19
    318a:	01 90       	ld	r0, Z+
    318c:	0d 92       	st	X+, r0
    318e:	81 50       	subi	r24, 0x01	; 1
    3190:	e1 f7       	brne	.-8      	; 0x318a <DeleteLineStatus2+0x7a>
    3192:	0a c0       	rjmp	.+20     	; 0x31a8 <DeleteLineStatus2+0x98>
	}
	else
	{
		strcpy(StringToPrint, "Line 2: Check Flow!");
    3194:	de 01       	movw	r26, r28
    3196:	af 5b       	subi	r26, 0xBF	; 191
    3198:	bf 4f       	sbci	r27, 0xFF	; 255
    319a:	e1 eb       	ldi	r30, 0xB1	; 177
    319c:	f1 e0       	ldi	r31, 0x01	; 1
    319e:	84 e1       	ldi	r24, 0x14	; 20
    31a0:	01 90       	ld	r0, Z+
    31a2:	0d 92       	st	X+, r0
    31a4:	81 50       	subi	r24, 0x01	; 1
    31a6:	e1 f7       	brne	.-8      	; 0x31a0 <DeleteLineStatus2+0x90>
		
	}
	drawString(1,250, StringToPrint ,HX8357_BLACK, 2);
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	6a ef       	ldi	r22, 0xFA	; 250
    31ae:	70 e0       	ldi	r23, 0x00	; 0
    31b0:	ae 01       	movw	r20, r28
    31b2:	4f 5b       	subi	r20, 0xBF	; 191
    31b4:	5f 4f       	sbci	r21, 0xFF	; 255
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	02 e0       	ldi	r16, 0x02	; 2
    31bc:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
}
    31c0:	c0 5c       	subi	r28, 0xC0	; 192
    31c2:	de 4f       	sbci	r29, 0xFE	; 254
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	df 91       	pop	r29
    31d0:	cf 91       	pop	r28
    31d2:	1f 91       	pop	r17
    31d4:	0f 91       	pop	r16
    31d6:	08 95       	ret

000031d8 <PrintMessages>:

//Menu Functions
void PrintMessages (system*s)
{
    31d8:	0f 93       	push	r16
    31da:	cf 93       	push	r28
    31dc:	df 93       	push	r29
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
    31e2:	c0 50       	subi	r28, 0x00	; 0
    31e4:	d1 40       	sbci	r29, 0x01	; 1
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
	char StringToPrint[256];
	strcpy(StringToPrint, "Messages ");
    31f0:	de 01       	movw	r26, r28
    31f2:	11 96       	adiw	r26, 0x01	; 1
    31f4:	e5 ec       	ldi	r30, 0xC5	; 197
    31f6:	f1 e0       	ldi	r31, 0x01	; 1
    31f8:	8a e0       	ldi	r24, 0x0A	; 10
    31fa:	01 90       	ld	r0, Z+
    31fc:	0d 92       	st	X+, r0
    31fe:	81 50       	subi	r24, 0x01	; 1
    3200:	e1 f7       	brne	.-8      	; 0x31fa <PrintMessages+0x22>
	drawString(110,300, StringToPrint ,HX8357_GREEN, 2);
    3202:	8e e6       	ldi	r24, 0x6E	; 110
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	6c e2       	ldi	r22, 0x2C	; 44
    3208:	71 e0       	ldi	r23, 0x01	; 1
    320a:	ae 01       	movw	r20, r28
    320c:	4f 5f       	subi	r20, 0xFF	; 255
    320e:	5f 4f       	sbci	r21, 0xFF	; 255
    3210:	20 ee       	ldi	r18, 0xE0	; 224
    3212:	37 e0       	ldi	r19, 0x07	; 7
    3214:	02 e0       	ldi	r16, 0x02	; 2
    3216:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
}
    321a:	c0 50       	subi	r28, 0x00	; 0
    321c:	df 4f       	sbci	r29, 0xFF	; 255
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	de bf       	out	0x3e, r29	; 62
    3224:	0f be       	out	0x3f, r0	; 63
    3226:	cd bf       	out	0x3d, r28	; 61
    3228:	df 91       	pop	r29
    322a:	cf 91       	pop	r28
    322c:	0f 91       	pop	r16
    322e:	08 95       	ret

00003230 <PrintCurrentlyRunning>:

void PrintCurrentlyRunning (system * s)
{
    3230:	ef 92       	push	r14
    3232:	ff 92       	push	r15
    3234:	0f 93       	push	r16
    3236:	1f 93       	push	r17
    3238:	cf 93       	push	r28
    323a:	df 93       	push	r29
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	c0 54       	subi	r28, 0x40	; 64
    3242:	d1 40       	sbci	r29, 0x01	; 1
    3244:	0f b6       	in	r0, 0x3f	; 63
    3246:	f8 94       	cli
    3248:	de bf       	out	0x3e, r29	; 62
    324a:	0f be       	out	0x3f, r0	; 63
    324c:	cd bf       	out	0x3d, r28	; 61
    324e:	7c 01       	movw	r14, r24
	if(s->Line_1_Run_Status == true)
    3250:	dc 01       	movw	r26, r24
    3252:	18 96       	adiw	r26, 0x08	; 8
    3254:	8c 91       	ld	r24, X
    3256:	18 97       	sbiw	r26, 0x08	; 8
    3258:	88 23       	and	r24, r24
    325a:	09 f4       	brne	.+2      	; 0x325e <PrintCurrentlyRunning+0x2e>
    325c:	59 c0       	rjmp	.+178    	; 0x3310 <PrintCurrentlyRunning+0xe0>
	{
		char str[64];
		char StringToPrint[256];
		//Total - has Pass
		sprintf(str,"%d", (s->SP1->RunLength - s->SP1->ElapsedTime));
    325e:	52 96       	adiw	r26, 0x12	; 18
    3260:	ed 91       	ld	r30, X+
    3262:	fc 91       	ld	r31, X
    3264:	53 97       	sbiw	r26, 0x13	; 19
    3266:	00 d0       	rcall	.+0      	; 0x3268 <PrintCurrentlyRunning+0x38>
    3268:	00 d0       	rcall	.+0      	; 0x326a <PrintCurrentlyRunning+0x3a>
    326a:	00 d0       	rcall	.+0      	; 0x326c <PrintCurrentlyRunning+0x3c>
    326c:	4d b7       	in	r20, 0x3d	; 61
    326e:	5e b7       	in	r21, 0x3e	; 62
    3270:	4f 5f       	subi	r20, 0xFF	; 255
    3272:	5f 4f       	sbci	r21, 0xFF	; 255
    3274:	ce 01       	movw	r24, r28
    3276:	01 96       	adiw	r24, 0x01	; 1
    3278:	ad b7       	in	r26, 0x3d	; 61
    327a:	be b7       	in	r27, 0x3e	; 62
    327c:	12 96       	adiw	r26, 0x02	; 2
    327e:	9c 93       	st	X, r25
    3280:	8e 93       	st	-X, r24
    3282:	11 97       	sbiw	r26, 0x01	; 1
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	91 e0       	ldi	r25, 0x01	; 1
    3288:	da 01       	movw	r26, r20
    328a:	13 96       	adiw	r26, 0x03	; 3
    328c:	9c 93       	st	X, r25
    328e:	8e 93       	st	-X, r24
    3290:	12 97       	sbiw	r26, 0x02	; 2
    3292:	26 81       	ldd	r18, Z+6	; 0x06
    3294:	37 81       	ldd	r19, Z+7	; 0x07
    3296:	84 81       	ldd	r24, Z+4	; 0x04
    3298:	95 81       	ldd	r25, Z+5	; 0x05
    329a:	28 1b       	sub	r18, r24
    329c:	39 0b       	sbc	r19, r25
    329e:	15 96       	adiw	r26, 0x05	; 5
    32a0:	3c 93       	st	X, r19
    32a2:	2e 93       	st	-X, r18
    32a4:	14 97       	sbiw	r26, 0x04	; 4
    32a6:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
		strcpy(StringToPrint, "Line 1: ");
    32aa:	de 01       	movw	r26, r28
    32ac:	af 5b       	subi	r26, 0xBF	; 191
    32ae:	bf 4f       	sbci	r27, 0xFF	; 255
    32b0:	ef ec       	ldi	r30, 0xCF	; 207
    32b2:	f1 e0       	ldi	r31, 0x01	; 1
    32b4:	89 e0       	ldi	r24, 0x09	; 9
    32b6:	01 90       	ld	r0, Z+
    32b8:	0d 92       	st	X+, r0
    32ba:	81 50       	subi	r24, 0x01	; 1
    32bc:	e1 f7       	brne	.-8      	; 0x32b6 <PrintCurrentlyRunning+0x86>
		strcat(StringToPrint, str);
    32be:	ed b7       	in	r30, 0x3d	; 61
    32c0:	fe b7       	in	r31, 0x3e	; 62
    32c2:	36 96       	adiw	r30, 0x06	; 6
    32c4:	0f b6       	in	r0, 0x3f	; 63
    32c6:	f8 94       	cli
    32c8:	fe bf       	out	0x3e, r31	; 62
    32ca:	0f be       	out	0x3f, r0	; 63
    32cc:	ed bf       	out	0x3d, r30	; 61
    32ce:	8e 01       	movw	r16, r28
    32d0:	0f 5b       	subi	r16, 0xBF	; 191
    32d2:	1f 4f       	sbci	r17, 0xFF	; 255
    32d4:	c8 01       	movw	r24, r16
    32d6:	be 01       	movw	r22, r28
    32d8:	6f 5f       	subi	r22, 0xFF	; 255
    32da:	7f 4f       	sbci	r23, 0xFF	; 255
    32dc:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
		strcat(StringToPrint, " Min Remaining");
    32e0:	d8 01       	movw	r26, r16
    32e2:	0d 90       	ld	r0, X+
    32e4:	00 20       	and	r0, r0
    32e6:	e9 f7       	brne	.-6      	; 0x32e2 <PrintCurrentlyRunning+0xb2>
    32e8:	11 97       	sbiw	r26, 0x01	; 1
    32ea:	e8 ed       	ldi	r30, 0xD8	; 216
    32ec:	f1 e0       	ldi	r31, 0x01	; 1
    32ee:	8f e0       	ldi	r24, 0x0F	; 15
    32f0:	01 90       	ld	r0, Z+
    32f2:	0d 92       	st	X+, r0
    32f4:	81 50       	subi	r24, 0x01	; 1
    32f6:	e1 f7       	brne	.-8      	; 0x32f0 <PrintCurrentlyRunning+0xc0>
		drawString(1,325, StringToPrint ,HX8357_GREEN, 2);
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	65 e4       	ldi	r22, 0x45	; 69
    32fe:	71 e0       	ldi	r23, 0x01	; 1
    3300:	ae 01       	movw	r20, r28
    3302:	4f 5b       	subi	r20, 0xBF	; 191
    3304:	5f 4f       	sbci	r21, 0xFF	; 255
    3306:	20 ee       	ldi	r18, 0xE0	; 224
    3308:	37 e0       	ldi	r19, 0x07	; 7
    330a:	02 e0       	ldi	r16, 0x02	; 2
    330c:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
	}
	
	if(s->Line_2_Run_Status == true)
    3310:	d7 01       	movw	r26, r14
    3312:	19 96       	adiw	r26, 0x09	; 9
    3314:	8c 91       	ld	r24, X
    3316:	19 97       	sbiw	r26, 0x09	; 9
    3318:	88 23       	and	r24, r24
    331a:	09 f4       	brne	.+2      	; 0x331e <PrintCurrentlyRunning+0xee>
    331c:	59 c0       	rjmp	.+178    	; 0x33d0 <PrintCurrentlyRunning+0x1a0>
	{
		char str[64];
		char StringToPrint[256];
		//Total - has Pass
		sprintf(str,"%d", (s->SP2->RunLength - s->SP2->ElapsedTime));
    331e:	54 96       	adiw	r26, 0x14	; 20
    3320:	ed 91       	ld	r30, X+
    3322:	fc 91       	ld	r31, X
    3324:	55 97       	sbiw	r26, 0x15	; 21
    3326:	00 d0       	rcall	.+0      	; 0x3328 <PrintCurrentlyRunning+0xf8>
    3328:	00 d0       	rcall	.+0      	; 0x332a <PrintCurrentlyRunning+0xfa>
    332a:	00 d0       	rcall	.+0      	; 0x332c <PrintCurrentlyRunning+0xfc>
    332c:	4d b7       	in	r20, 0x3d	; 61
    332e:	5e b7       	in	r21, 0x3e	; 62
    3330:	4f 5f       	subi	r20, 0xFF	; 255
    3332:	5f 4f       	sbci	r21, 0xFF	; 255
    3334:	ce 01       	movw	r24, r28
    3336:	01 96       	adiw	r24, 0x01	; 1
    3338:	ad b7       	in	r26, 0x3d	; 61
    333a:	be b7       	in	r27, 0x3e	; 62
    333c:	12 96       	adiw	r26, 0x02	; 2
    333e:	9c 93       	st	X, r25
    3340:	8e 93       	st	-X, r24
    3342:	11 97       	sbiw	r26, 0x01	; 1
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	91 e0       	ldi	r25, 0x01	; 1
    3348:	da 01       	movw	r26, r20
    334a:	13 96       	adiw	r26, 0x03	; 3
    334c:	9c 93       	st	X, r25
    334e:	8e 93       	st	-X, r24
    3350:	12 97       	sbiw	r26, 0x02	; 2
    3352:	86 81       	ldd	r24, Z+6	; 0x06
    3354:	97 81       	ldd	r25, Z+7	; 0x07
    3356:	24 81       	ldd	r18, Z+4	; 0x04
    3358:	35 81       	ldd	r19, Z+5	; 0x05
    335a:	82 1b       	sub	r24, r18
    335c:	93 0b       	sbc	r25, r19
    335e:	15 96       	adiw	r26, 0x05	; 5
    3360:	9c 93       	st	X, r25
    3362:	8e 93       	st	-X, r24
    3364:	14 97       	sbiw	r26, 0x04	; 4
    3366:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
		strcpy(StringToPrint, "Line 2: ");
    336a:	de 01       	movw	r26, r28
    336c:	af 5b       	subi	r26, 0xBF	; 191
    336e:	bf 4f       	sbci	r27, 0xFF	; 255
    3370:	e7 ee       	ldi	r30, 0xE7	; 231
    3372:	f1 e0       	ldi	r31, 0x01	; 1
    3374:	89 e0       	ldi	r24, 0x09	; 9
    3376:	01 90       	ld	r0, Z+
    3378:	0d 92       	st	X+, r0
    337a:	81 50       	subi	r24, 0x01	; 1
    337c:	e1 f7       	brne	.-8      	; 0x3376 <PrintCurrentlyRunning+0x146>
		strcat(StringToPrint, str);
    337e:	ed b7       	in	r30, 0x3d	; 61
    3380:	fe b7       	in	r31, 0x3e	; 62
    3382:	36 96       	adiw	r30, 0x06	; 6
    3384:	0f b6       	in	r0, 0x3f	; 63
    3386:	f8 94       	cli
    3388:	fe bf       	out	0x3e, r31	; 62
    338a:	0f be       	out	0x3f, r0	; 63
    338c:	ed bf       	out	0x3d, r30	; 61
    338e:	8e 01       	movw	r16, r28
    3390:	0f 5b       	subi	r16, 0xBF	; 191
    3392:	1f 4f       	sbci	r17, 0xFF	; 255
    3394:	c8 01       	movw	r24, r16
    3396:	be 01       	movw	r22, r28
    3398:	6f 5f       	subi	r22, 0xFF	; 255
    339a:	7f 4f       	sbci	r23, 0xFF	; 255
    339c:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
		strcat(StringToPrint, " Min Remaining");
    33a0:	d8 01       	movw	r26, r16
    33a2:	0d 90       	ld	r0, X+
    33a4:	00 20       	and	r0, r0
    33a6:	e9 f7       	brne	.-6      	; 0x33a2 <PrintCurrentlyRunning+0x172>
    33a8:	11 97       	sbiw	r26, 0x01	; 1
    33aa:	e8 ed       	ldi	r30, 0xD8	; 216
    33ac:	f1 e0       	ldi	r31, 0x01	; 1
    33ae:	8f e0       	ldi	r24, 0x0F	; 15
    33b0:	01 90       	ld	r0, Z+
    33b2:	0d 92       	st	X+, r0
    33b4:	81 50       	subi	r24, 0x01	; 1
    33b6:	e1 f7       	brne	.-8      	; 0x33b0 <PrintCurrentlyRunning+0x180>
		drawString(1,350, StringToPrint ,HX8357_GREEN, 2);
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	6e e5       	ldi	r22, 0x5E	; 94
    33be:	71 e0       	ldi	r23, 0x01	; 1
    33c0:	ae 01       	movw	r20, r28
    33c2:	4f 5b       	subi	r20, 0xBF	; 191
    33c4:	5f 4f       	sbci	r21, 0xFF	; 255
    33c6:	20 ee       	ldi	r18, 0xE0	; 224
    33c8:	37 e0       	ldi	r19, 0x07	; 7
    33ca:	02 e0       	ldi	r16, 0x02	; 2
    33cc:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
	}
	
}
    33d0:	c0 5c       	subi	r28, 0xC0	; 192
    33d2:	de 4f       	sbci	r29, 0xFE	; 254
    33d4:	0f b6       	in	r0, 0x3f	; 63
    33d6:	f8 94       	cli
    33d8:	de bf       	out	0x3e, r29	; 62
    33da:	0f be       	out	0x3f, r0	; 63
    33dc:	cd bf       	out	0x3d, r28	; 61
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	1f 91       	pop	r17
    33e4:	0f 91       	pop	r16
    33e6:	ff 90       	pop	r15
    33e8:	ef 90       	pop	r14
    33ea:	08 95       	ret

000033ec <DeleteCurrentlyRunning>:

void DeleteCurrentlyRunning (system * s)
{
    33ec:	ef 92       	push	r14
    33ee:	ff 92       	push	r15
    33f0:	0f 93       	push	r16
    33f2:	1f 93       	push	r17
    33f4:	cf 93       	push	r28
    33f6:	df 93       	push	r29
    33f8:	cd b7       	in	r28, 0x3d	; 61
    33fa:	de b7       	in	r29, 0x3e	; 62
    33fc:	c0 54       	subi	r28, 0x40	; 64
    33fe:	d1 40       	sbci	r29, 0x01	; 1
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	f8 94       	cli
    3404:	de bf       	out	0x3e, r29	; 62
    3406:	0f be       	out	0x3f, r0	; 63
    3408:	cd bf       	out	0x3d, r28	; 61
    340a:	7c 01       	movw	r14, r24
	if(s->Line_1_Run_Status == false)
    340c:	dc 01       	movw	r26, r24
    340e:	18 96       	adiw	r26, 0x08	; 8
    3410:	8c 91       	ld	r24, X
    3412:	18 97       	sbiw	r26, 0x08	; 8
    3414:	88 23       	and	r24, r24
    3416:	09 f0       	breq	.+2      	; 0x341a <DeleteCurrentlyRunning+0x2e>
    3418:	59 c0       	rjmp	.+178    	; 0x34cc <DeleteCurrentlyRunning+0xe0>
	{
		char str[64];
		char StringToPrint[256];
		//Total - has Pass
		sprintf(str,"%d", (s->SP1->RunLength - s->SP1->ElapsedTime));
    341a:	52 96       	adiw	r26, 0x12	; 18
    341c:	ed 91       	ld	r30, X+
    341e:	fc 91       	ld	r31, X
    3420:	53 97       	sbiw	r26, 0x13	; 19
    3422:	00 d0       	rcall	.+0      	; 0x3424 <DeleteCurrentlyRunning+0x38>
    3424:	00 d0       	rcall	.+0      	; 0x3426 <DeleteCurrentlyRunning+0x3a>
    3426:	00 d0       	rcall	.+0      	; 0x3428 <DeleteCurrentlyRunning+0x3c>
    3428:	4d b7       	in	r20, 0x3d	; 61
    342a:	5e b7       	in	r21, 0x3e	; 62
    342c:	4f 5f       	subi	r20, 0xFF	; 255
    342e:	5f 4f       	sbci	r21, 0xFF	; 255
    3430:	ce 01       	movw	r24, r28
    3432:	01 96       	adiw	r24, 0x01	; 1
    3434:	ad b7       	in	r26, 0x3d	; 61
    3436:	be b7       	in	r27, 0x3e	; 62
    3438:	12 96       	adiw	r26, 0x02	; 2
    343a:	9c 93       	st	X, r25
    343c:	8e 93       	st	-X, r24
    343e:	11 97       	sbiw	r26, 0x01	; 1
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	91 e0       	ldi	r25, 0x01	; 1
    3444:	da 01       	movw	r26, r20
    3446:	13 96       	adiw	r26, 0x03	; 3
    3448:	9c 93       	st	X, r25
    344a:	8e 93       	st	-X, r24
    344c:	12 97       	sbiw	r26, 0x02	; 2
    344e:	26 81       	ldd	r18, Z+6	; 0x06
    3450:	37 81       	ldd	r19, Z+7	; 0x07
    3452:	84 81       	ldd	r24, Z+4	; 0x04
    3454:	95 81       	ldd	r25, Z+5	; 0x05
    3456:	28 1b       	sub	r18, r24
    3458:	39 0b       	sbc	r19, r25
    345a:	15 96       	adiw	r26, 0x05	; 5
    345c:	3c 93       	st	X, r19
    345e:	2e 93       	st	-X, r18
    3460:	14 97       	sbiw	r26, 0x04	; 4
    3462:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
		strcpy(StringToPrint, "Line 1: ");
    3466:	de 01       	movw	r26, r28
    3468:	af 5b       	subi	r26, 0xBF	; 191
    346a:	bf 4f       	sbci	r27, 0xFF	; 255
    346c:	ef ec       	ldi	r30, 0xCF	; 207
    346e:	f1 e0       	ldi	r31, 0x01	; 1
    3470:	89 e0       	ldi	r24, 0x09	; 9
    3472:	01 90       	ld	r0, Z+
    3474:	0d 92       	st	X+, r0
    3476:	81 50       	subi	r24, 0x01	; 1
    3478:	e1 f7       	brne	.-8      	; 0x3472 <DeleteCurrentlyRunning+0x86>
		strcat(StringToPrint, str);
    347a:	ed b7       	in	r30, 0x3d	; 61
    347c:	fe b7       	in	r31, 0x3e	; 62
    347e:	36 96       	adiw	r30, 0x06	; 6
    3480:	0f b6       	in	r0, 0x3f	; 63
    3482:	f8 94       	cli
    3484:	fe bf       	out	0x3e, r31	; 62
    3486:	0f be       	out	0x3f, r0	; 63
    3488:	ed bf       	out	0x3d, r30	; 61
    348a:	8e 01       	movw	r16, r28
    348c:	0f 5b       	subi	r16, 0xBF	; 191
    348e:	1f 4f       	sbci	r17, 0xFF	; 255
    3490:	c8 01       	movw	r24, r16
    3492:	be 01       	movw	r22, r28
    3494:	6f 5f       	subi	r22, 0xFF	; 255
    3496:	7f 4f       	sbci	r23, 0xFF	; 255
    3498:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
		strcat(StringToPrint, " Min Remaining");
    349c:	d8 01       	movw	r26, r16
    349e:	0d 90       	ld	r0, X+
    34a0:	00 20       	and	r0, r0
    34a2:	e9 f7       	brne	.-6      	; 0x349e <DeleteCurrentlyRunning+0xb2>
    34a4:	11 97       	sbiw	r26, 0x01	; 1
    34a6:	e8 ed       	ldi	r30, 0xD8	; 216
    34a8:	f1 e0       	ldi	r31, 0x01	; 1
    34aa:	8f e0       	ldi	r24, 0x0F	; 15
    34ac:	01 90       	ld	r0, Z+
    34ae:	0d 92       	st	X+, r0
    34b0:	81 50       	subi	r24, 0x01	; 1
    34b2:	e1 f7       	brne	.-8      	; 0x34ac <DeleteCurrentlyRunning+0xc0>
		drawString(1,325, StringToPrint ,HX8357_BLACK, 2);
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	65 e4       	ldi	r22, 0x45	; 69
    34ba:	71 e0       	ldi	r23, 0x01	; 1
    34bc:	ae 01       	movw	r20, r28
    34be:	4f 5b       	subi	r20, 0xBF	; 191
    34c0:	5f 4f       	sbci	r21, 0xFF	; 255
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	02 e0       	ldi	r16, 0x02	; 2
    34c8:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
	}
	
	if(s->Line_2_Run_Status == false)
    34cc:	d7 01       	movw	r26, r14
    34ce:	19 96       	adiw	r26, 0x09	; 9
    34d0:	8c 91       	ld	r24, X
    34d2:	19 97       	sbiw	r26, 0x09	; 9
    34d4:	88 23       	and	r24, r24
    34d6:	09 f0       	breq	.+2      	; 0x34da <DeleteCurrentlyRunning+0xee>
    34d8:	59 c0       	rjmp	.+178    	; 0x358c <DeleteCurrentlyRunning+0x1a0>
	{
		char str[64];
		char StringToPrint[256];
		//Total - has Pass
		sprintf(str,"%d", (s->SP2->RunLength - s->SP2->ElapsedTime));
    34da:	54 96       	adiw	r26, 0x14	; 20
    34dc:	ed 91       	ld	r30, X+
    34de:	fc 91       	ld	r31, X
    34e0:	55 97       	sbiw	r26, 0x15	; 21
    34e2:	00 d0       	rcall	.+0      	; 0x34e4 <DeleteCurrentlyRunning+0xf8>
    34e4:	00 d0       	rcall	.+0      	; 0x34e6 <DeleteCurrentlyRunning+0xfa>
    34e6:	00 d0       	rcall	.+0      	; 0x34e8 <DeleteCurrentlyRunning+0xfc>
    34e8:	4d b7       	in	r20, 0x3d	; 61
    34ea:	5e b7       	in	r21, 0x3e	; 62
    34ec:	4f 5f       	subi	r20, 0xFF	; 255
    34ee:	5f 4f       	sbci	r21, 0xFF	; 255
    34f0:	ce 01       	movw	r24, r28
    34f2:	01 96       	adiw	r24, 0x01	; 1
    34f4:	ad b7       	in	r26, 0x3d	; 61
    34f6:	be b7       	in	r27, 0x3e	; 62
    34f8:	12 96       	adiw	r26, 0x02	; 2
    34fa:	9c 93       	st	X, r25
    34fc:	8e 93       	st	-X, r24
    34fe:	11 97       	sbiw	r26, 0x01	; 1
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	91 e0       	ldi	r25, 0x01	; 1
    3504:	da 01       	movw	r26, r20
    3506:	13 96       	adiw	r26, 0x03	; 3
    3508:	9c 93       	st	X, r25
    350a:	8e 93       	st	-X, r24
    350c:	12 97       	sbiw	r26, 0x02	; 2
    350e:	86 81       	ldd	r24, Z+6	; 0x06
    3510:	97 81       	ldd	r25, Z+7	; 0x07
    3512:	24 81       	ldd	r18, Z+4	; 0x04
    3514:	35 81       	ldd	r19, Z+5	; 0x05
    3516:	82 1b       	sub	r24, r18
    3518:	93 0b       	sbc	r25, r19
    351a:	15 96       	adiw	r26, 0x05	; 5
    351c:	9c 93       	st	X, r25
    351e:	8e 93       	st	-X, r24
    3520:	14 97       	sbiw	r26, 0x04	; 4
    3522:	0e 94 ce 22 	call	0x459c	; 0x459c <sprintf>
		strcpy(StringToPrint, "Line 2: ");
    3526:	de 01       	movw	r26, r28
    3528:	af 5b       	subi	r26, 0xBF	; 191
    352a:	bf 4f       	sbci	r27, 0xFF	; 255
    352c:	e7 ee       	ldi	r30, 0xE7	; 231
    352e:	f1 e0       	ldi	r31, 0x01	; 1
    3530:	89 e0       	ldi	r24, 0x09	; 9
    3532:	01 90       	ld	r0, Z+
    3534:	0d 92       	st	X+, r0
    3536:	81 50       	subi	r24, 0x01	; 1
    3538:	e1 f7       	brne	.-8      	; 0x3532 <DeleteCurrentlyRunning+0x146>
		strcat(StringToPrint, str);
    353a:	ed b7       	in	r30, 0x3d	; 61
    353c:	fe b7       	in	r31, 0x3e	; 62
    353e:	36 96       	adiw	r30, 0x06	; 6
    3540:	0f b6       	in	r0, 0x3f	; 63
    3542:	f8 94       	cli
    3544:	fe bf       	out	0x3e, r31	; 62
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	ed bf       	out	0x3d, r30	; 61
    354a:	8e 01       	movw	r16, r28
    354c:	0f 5b       	subi	r16, 0xBF	; 191
    354e:	1f 4f       	sbci	r17, 0xFF	; 255
    3550:	c8 01       	movw	r24, r16
    3552:	be 01       	movw	r22, r28
    3554:	6f 5f       	subi	r22, 0xFF	; 255
    3556:	7f 4f       	sbci	r23, 0xFF	; 255
    3558:	0e 94 84 22 	call	0x4508	; 0x4508 <strcat>
		strcat(StringToPrint, " Min Remaining");
    355c:	d8 01       	movw	r26, r16
    355e:	0d 90       	ld	r0, X+
    3560:	00 20       	and	r0, r0
    3562:	e9 f7       	brne	.-6      	; 0x355e <DeleteCurrentlyRunning+0x172>
    3564:	11 97       	sbiw	r26, 0x01	; 1
    3566:	e8 ed       	ldi	r30, 0xD8	; 216
    3568:	f1 e0       	ldi	r31, 0x01	; 1
    356a:	8f e0       	ldi	r24, 0x0F	; 15
    356c:	01 90       	ld	r0, Z+
    356e:	0d 92       	st	X+, r0
    3570:	81 50       	subi	r24, 0x01	; 1
    3572:	e1 f7       	brne	.-8      	; 0x356c <DeleteCurrentlyRunning+0x180>
		drawString(1,350, StringToPrint ,HX8357_BLACK, 2);
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	6e e5       	ldi	r22, 0x5E	; 94
    357a:	71 e0       	ldi	r23, 0x01	; 1
    357c:	ae 01       	movw	r20, r28
    357e:	4f 5b       	subi	r20, 0xBF	; 191
    3580:	5f 4f       	sbci	r21, 0xFF	; 255
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	02 e0       	ldi	r16, 0x02	; 2
    3588:	0e 94 83 08 	call	0x1106	; 0x1106 <drawString>
	}
	
}
    358c:	c0 5c       	subi	r28, 0xC0	; 192
    358e:	de 4f       	sbci	r29, 0xFE	; 254
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	de bf       	out	0x3e, r29	; 62
    3596:	0f be       	out	0x3f, r0	; 63
    3598:	cd bf       	out	0x3d, r28	; 61
    359a:	df 91       	pop	r29
    359c:	cf 91       	pop	r28
    359e:	1f 91       	pop	r17
    35a0:	0f 91       	pop	r16
    35a2:	ff 90       	pop	r15
    35a4:	ef 90       	pop	r14
    35a6:	08 95       	ret

000035a8 <initMenu>:

void initMenu (system *s)
{
    35a8:	cf 93       	push	r28
    35aa:	df 93       	push	r29
    35ac:	ec 01       	movw	r28, r24
	fillScreen(HX8357_BLACK);
    35ae:	80 e0       	ldi	r24, 0x00	; 0
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	0e 94 da 07 	call	0xfb4	; 0xfb4 <fillScreen>
	PrintTime(s);
    35b6:	ce 01       	movw	r24, r28
    35b8:	0e 94 88 10 	call	0x2110	; 0x2110 <PrintTime>
	PrintTemp(s);
    35bc:	ce 01       	movw	r24, r28
    35be:	0e 94 23 11 	call	0x2246	; 0x2246 <PrintTemp>
	PrintHumid(s);
    35c2:	ce 01       	movw	r24, r28
    35c4:	0e 94 89 11 	call	0x2312	; 0x2312 <PrintHumid>
	
	PrintLineStart1(s);
    35c8:	ce 01       	movw	r24, r28
    35ca:	0e 94 50 13 	call	0x26a0	; 0x26a0 <PrintLineStart1>
	PrintLine1Run(s);
    35ce:	ce 01       	movw	r24, r28
    35d0:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <PrintLine1Run>
	PrintLineStatus1(s); 
    35d4:	ce 01       	movw	r24, r28
    35d6:	0e 94 53 14 	call	0x28a6	; 0x28a6 <PrintLineStatus1>
	
	PrintLineStart2(s);
    35da:	ce 01       	movw	r24, r28
    35dc:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <PrintLineStart2>
	PrintLine2Run(s);
    35e0:	ce 01       	movw	r24, r28
    35e2:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PrintLine2Run>
	PrintLineStatus2(s);
    35e6:	ce 01       	movw	r24, r28
    35e8:	0e 94 21 17 	call	0x2e42	; 0x2e42 <PrintLineStatus2>
	
	PrintMessages(s);
    35ec:	ce 01       	movw	r24, r28
    35ee:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <PrintMessages>
	PrintCurrentlyRunning(s);
    35f2:	ce 01       	movw	r24, r28
    35f4:	0e 94 18 19 	call	0x3230	; 0x3230 <PrintCurrentlyRunning>
	
}
    35f8:	df 91       	pop	r29
    35fa:	cf 91       	pop	r28
    35fc:	08 95       	ret

000035fe <increaseTime>:

//Change Functions
void increaseTime (system *s)
{
    35fe:	cf 93       	push	r28
    3600:	df 93       	push	r29
    3602:	ec 01       	movw	r28, r24
	DeleteTime(s);
    3604:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <DeleteTime>
	if(s->Minutes == 59)
    3608:	8d 81       	ldd	r24, Y+5	; 0x05
    360a:	8b 33       	cpi	r24, 0x3B	; 59
    360c:	49 f4       	brne	.+18     	; 0x3620 <increaseTime+0x22>
	{
		s->Minutes = 0;
    360e:	1d 82       	std	Y+5, r1	; 0x05
		if(s->Hours == 23)
    3610:	8c 81       	ldd	r24, Y+4	; 0x04
    3612:	87 31       	cpi	r24, 0x17	; 23
    3614:	11 f4       	brne	.+4      	; 0x361a <increaseTime+0x1c>
		{
			s->Hours = 0;
    3616:	1c 82       	std	Y+4, r1	; 0x04
    3618:	05 c0       	rjmp	.+10     	; 0x3624 <increaseTime+0x26>
		}
		else
		{
			s->Hours++;
    361a:	8f 5f       	subi	r24, 0xFF	; 255
    361c:	8c 83       	std	Y+4, r24	; 0x04
    361e:	02 c0       	rjmp	.+4      	; 0x3624 <increaseTime+0x26>
		}		
	}
	else
	{
		s->Minutes++;
    3620:	8f 5f       	subi	r24, 0xFF	; 255
    3622:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	PrintTime(s);
    3624:	ce 01       	movw	r24, r28
    3626:	0e 94 88 10 	call	0x2110	; 0x2110 <PrintTime>
	
	
}
    362a:	df 91       	pop	r29
    362c:	cf 91       	pop	r28
    362e:	08 95       	ret

00003630 <ChangeTime>:

int ChangeTime (system *s, int H, int M)
{
    3630:	ef 92       	push	r14
    3632:	ff 92       	push	r15
    3634:	0f 93       	push	r16
    3636:	1f 93       	push	r17
    3638:	cf 93       	push	r28
    363a:	df 93       	push	r29
    363c:	7c 01       	movw	r14, r24
    363e:	8b 01       	movw	r16, r22
    3640:	ea 01       	movw	r28, r20
	DeleteTime(s);
    3642:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <DeleteTime>
	int i = 0;
	if(M <= 59 && H <= 23)
    3646:	cc 33       	cpi	r28, 0x3C	; 60
    3648:	d1 05       	cpc	r29, r1
    364a:	4c f4       	brge	.+18     	; 0x365e <ChangeTime+0x2e>
    364c:	08 31       	cpi	r16, 0x18	; 24
    364e:	11 05       	cpc	r17, r1
    3650:	4c f4       	brge	.+18     	; 0x3664 <ChangeTime+0x34>
	{
		s->Minutes = M;
    3652:	f7 01       	movw	r30, r14
    3654:	c5 83       	std	Z+5, r28	; 0x05
		s->Hours = H;
    3656:	04 83       	std	Z+4, r16	; 0x04
		i = 1;
    3658:	c1 e0       	ldi	r28, 0x01	; 1
    365a:	d0 e0       	ldi	r29, 0x00	; 0
    365c:	05 c0       	rjmp	.+10     	; 0x3668 <ChangeTime+0x38>
}

int ChangeTime (system *s, int H, int M)
{
	DeleteTime(s);
	int i = 0;
    365e:	c0 e0       	ldi	r28, 0x00	; 0
    3660:	d0 e0       	ldi	r29, 0x00	; 0
    3662:	02 c0       	rjmp	.+4      	; 0x3668 <ChangeTime+0x38>
    3664:	c0 e0       	ldi	r28, 0x00	; 0
    3666:	d0 e0       	ldi	r29, 0x00	; 0
		s->Minutes = M;
		s->Hours = H;
		i = 1;
	}	
	
	PrintTime(s);
    3668:	c7 01       	movw	r24, r14
    366a:	0e 94 88 10 	call	0x2110	; 0x2110 <PrintTime>
	
	return i;
	
}
    366e:	8c 2f       	mov	r24, r28
    3670:	9d 2f       	mov	r25, r29
    3672:	df 91       	pop	r29
    3674:	cf 91       	pop	r28
    3676:	1f 91       	pop	r17
    3678:	0f 91       	pop	r16
    367a:	ff 90       	pop	r15
    367c:	ef 90       	pop	r14
    367e:	08 95       	ret

00003680 <ChangeHumidity>:

void ChangeHumidity (system *s, int NewHum)
{
    3680:	0f 93       	push	r16
    3682:	1f 93       	push	r17
    3684:	cf 93       	push	r28
    3686:	df 93       	push	r29
    3688:	ec 01       	movw	r28, r24
    368a:	8b 01       	movw	r16, r22
	DeleteHumid(s);
    368c:	0e 94 ed 12 	call	0x25da	; 0x25da <DeleteHumid>
	s->Humid = NewHum;
    3690:	1b 83       	std	Y+3, r17	; 0x03
    3692:	0a 83       	std	Y+2, r16	; 0x02
	PrintHumid(s);
    3694:	ce 01       	movw	r24, r28
    3696:	0e 94 89 11 	call	0x2312	; 0x2312 <PrintHumid>
}
    369a:	df 91       	pop	r29
    369c:	cf 91       	pop	r28
    369e:	1f 91       	pop	r17
    36a0:	0f 91       	pop	r16
    36a2:	08 95       	ret

000036a4 <ChangeTemp>:

void ChangeTemp (system *s, int NewTemp)
{
    36a4:	0f 93       	push	r16
    36a6:	1f 93       	push	r17
    36a8:	cf 93       	push	r28
    36aa:	df 93       	push	r29
    36ac:	ec 01       	movw	r28, r24
    36ae:	8b 01       	movw	r16, r22
	DeleteTemp(s);
    36b0:	0e 94 87 12 	call	0x250e	; 0x250e <DeleteTemp>
	s->Temp = NewTemp;
    36b4:	19 83       	std	Y+1, r17	; 0x01
    36b6:	08 83       	st	Y, r16
	PrintTemp(s);
    36b8:	ce 01       	movw	r24, r28
    36ba:	0e 94 23 11 	call	0x2246	; 0x2246 <PrintTemp>
}
    36be:	df 91       	pop	r29
    36c0:	cf 91       	pop	r28
    36c2:	1f 91       	pop	r17
    36c4:	0f 91       	pop	r16
    36c6:	08 95       	ret

000036c8 <ChangeLine1Run>:

int ChangeLine1Run ( system *s, unsigned char NewTime)
{
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	ec 01       	movw	r28, r24
    36d0:	16 2f       	mov	r17, r22
	int i = 0;
	if(NewTime < 20)
    36d2:	64 31       	cpi	r22, 0x14	; 20
    36d4:	50 f4       	brcc	.+20     	; 0x36ea <ChangeLine1Run+0x22>
	{
		DeleteLine1Run(s);
    36d6:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <DeleteLine1Run>
		s->Line_1_RunTime = NewTime;
    36da:	1e 87       	std	Y+14, r17	; 0x0e
    36dc:	1f 86       	std	Y+15, r1	; 0x0f
		PrintLine1Run(s);
    36de:	ce 01       	movw	r24, r28
    36e0:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <PrintLine1Run>
		i = 1;
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	02 c0       	rjmp	.+4      	; 0x36ee <ChangeLine1Run+0x26>
	PrintTemp(s);
}

int ChangeLine1Run ( system *s, unsigned char NewTime)
{
	int i = 0;
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	90 e0       	ldi	r25, 0x00	; 0
		PrintLine1Run(s);
		i = 1;
	}	
	
	return i;	
}
    36ee:	df 91       	pop	r29
    36f0:	cf 91       	pop	r28
    36f2:	1f 91       	pop	r17
    36f4:	08 95       	ret

000036f6 <ChangeLine2Run>:

int ChangeLine2Run ( system *s, unsigned char NewTime)
{
    36f6:	1f 93       	push	r17
    36f8:	cf 93       	push	r28
    36fa:	df 93       	push	r29
    36fc:	ec 01       	movw	r28, r24
    36fe:	16 2f       	mov	r17, r22
	int i = 0;
	if(NewTime < 20)
    3700:	64 31       	cpi	r22, 0x14	; 20
    3702:	50 f4       	brcc	.+20     	; 0x3718 <ChangeLine2Run+0x22>
	{
		DeleteLine2Run(s);
    3704:	0e 94 20 18 	call	0x3040	; 0x3040 <DeleteLine2Run>
		s->Line_2_RunTime = NewTime;
    3708:	18 8b       	std	Y+16, r17	; 0x10
    370a:	19 8a       	std	Y+17, r1	; 0x11
		PrintLine2Run(s);
    370c:	ce 01       	movw	r24, r28
    370e:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PrintLine2Run>
		i = 1;
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	02 c0       	rjmp	.+4      	; 0x371c <ChangeLine2Run+0x26>
	return i;	
}

int ChangeLine2Run ( system *s, unsigned char NewTime)
{
	int i = 0;
    3718:	80 e0       	ldi	r24, 0x00	; 0
    371a:	90 e0       	ldi	r25, 0x00	; 0
		PrintLine2Run(s);
		i = 1;
	}
	
	return i;
}
    371c:	df 91       	pop	r29
    371e:	cf 91       	pop	r28
    3720:	1f 91       	pop	r17
    3722:	08 95       	ret

00003724 <ChangeLine1Status>:

void ChangeLine1Status ( system *s, bool NewSat)
{
    3724:	1f 93       	push	r17
    3726:	cf 93       	push	r28
    3728:	df 93       	push	r29
    372a:	ec 01       	movw	r28, r24
    372c:	16 2f       	mov	r17, r22
	if(s->Line_1_Status != NewSat)
    372e:	8e 81       	ldd	r24, Y+6	; 0x06
    3730:	86 17       	cp	r24, r22
    3732:	39 f0       	breq	.+14     	; 0x3742 <ChangeLine1Status+0x1e>
	{
		DeleteLineStatus1(s);
    3734:	ce 01       	movw	r24, r28
    3736:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <DeleteLineStatus1>
		s->Line_1_Status = NewSat;
    373a:	1e 83       	std	Y+6, r17	; 0x06
		PrintLineStatus1(s);
    373c:	ce 01       	movw	r24, r28
    373e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <PrintLineStatus1>
	}		
}
    3742:	df 91       	pop	r29
    3744:	cf 91       	pop	r28
    3746:	1f 91       	pop	r17
    3748:	08 95       	ret

0000374a <ChangeLine2Status>:

void ChangeLine2Status ( system *s, bool NewSat)
{
    374a:	1f 93       	push	r17
    374c:	cf 93       	push	r28
    374e:	df 93       	push	r29
    3750:	ec 01       	movw	r28, r24
    3752:	16 2f       	mov	r17, r22
	if(s->Line_2_Status != NewSat)
    3754:	8f 81       	ldd	r24, Y+7	; 0x07
    3756:	86 17       	cp	r24, r22
    3758:	39 f0       	breq	.+14     	; 0x3768 <ChangeLine2Status+0x1e>
	{
		
		DeleteLineStatus2(s);
    375a:	ce 01       	movw	r24, r28
    375c:	0e 94 88 18 	call	0x3110	; 0x3110 <DeleteLineStatus2>
		s->Line_2_Status = NewSat;
    3760:	1f 83       	std	Y+7, r17	; 0x07
		PrintLineStatus2(s);
    3762:	ce 01       	movw	r24, r28
    3764:	0e 94 21 17 	call	0x2e42	; 0x2e42 <PrintLineStatus2>
	}		
}
    3768:	df 91       	pop	r29
    376a:	cf 91       	pop	r28
    376c:	1f 91       	pop	r17
    376e:	08 95       	ret

00003770 <ChangeLine1Start>:

int ChangeLine1Start (system *s, unsigned char NewHour, unsigned char NewMin)
{
    3770:	0f 93       	push	r16
    3772:	1f 93       	push	r17
    3774:	cf 93       	push	r28
    3776:	df 93       	push	r29
    3778:	ec 01       	movw	r28, r24
    377a:	16 2f       	mov	r17, r22
    377c:	04 2f       	mov	r16, r20
	int i = 0;
	if (NewHour <= 23 && NewMin <= 59)
    377e:	68 31       	cpi	r22, 0x18	; 24
    3780:	60 f4       	brcc	.+24     	; 0x379a <ChangeLine1Start+0x2a>
    3782:	4c 33       	cpi	r20, 0x3C	; 60
    3784:	68 f4       	brcc	.+26     	; 0x37a0 <ChangeLine1Start+0x30>
	{
		DeleteLineStart1(s);
    3786:	0e 94 b7 14 	call	0x296e	; 0x296e <DeleteLineStart1>
		s->L1_Start_Hours = NewHour;
    378a:	1b 87       	std	Y+11, r17	; 0x0b
		s->L1_Start_Minutes = NewMin;
    378c:	0a 87       	std	Y+10, r16	; 0x0a
		PrintLineStart1(s);
    378e:	ce 01       	movw	r24, r28
    3790:	0e 94 50 13 	call	0x26a0	; 0x26a0 <PrintLineStart1>
		i = 1;
    3794:	81 e0       	ldi	r24, 0x01	; 1
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	05 c0       	rjmp	.+10     	; 0x37a4 <ChangeLine1Start+0x34>
	}		
}

int ChangeLine1Start (system *s, unsigned char NewHour, unsigned char NewMin)
{
	int i = 0;
    379a:	80 e0       	ldi	r24, 0x00	; 0
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	02 c0       	rjmp	.+4      	; 0x37a4 <ChangeLine1Start+0x34>
    37a0:	80 e0       	ldi	r24, 0x00	; 0
    37a2:	90 e0       	ldi	r25, 0x00	; 0
		PrintLineStart1(s);
		i = 1;
	}
	
	return i;
}
    37a4:	df 91       	pop	r29
    37a6:	cf 91       	pop	r28
    37a8:	1f 91       	pop	r17
    37aa:	0f 91       	pop	r16
    37ac:	08 95       	ret

000037ae <ChangeLine2Start>:

int ChangeLine2Start (system *s, unsigned char NewHour, unsigned char NewMin)
{
    37ae:	0f 93       	push	r16
    37b0:	1f 93       	push	r17
    37b2:	cf 93       	push	r28
    37b4:	df 93       	push	r29
    37b6:	ec 01       	movw	r28, r24
    37b8:	16 2f       	mov	r17, r22
    37ba:	04 2f       	mov	r16, r20
	int i = 0;
	if (NewHour <= 23 && NewMin <= 59)
    37bc:	68 31       	cpi	r22, 0x18	; 24
    37be:	60 f4       	brcc	.+24     	; 0x37d8 <ChangeLine2Start+0x2a>
    37c0:	4c 33       	cpi	r20, 0x3C	; 60
    37c2:	68 f4       	brcc	.+26     	; 0x37de <ChangeLine2Start+0x30>
	{
		DeleteLineStart2(s);
    37c4:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <DeleteLineStart2>
		s->L2_Start_Hours = NewHour;
    37c8:	1d 87       	std	Y+13, r17	; 0x0d
		s->L2_Start_Minutes = NewMin;
    37ca:	0c 87       	std	Y+12, r16	; 0x0c
		PrintLineStart2(s);
    37cc:	ce 01       	movw	r24, r28
    37ce:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <PrintLineStart2>
		i = 1;
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	05 c0       	rjmp	.+10     	; 0x37e2 <ChangeLine2Start+0x34>
	return i;
}

int ChangeLine2Start (system *s, unsigned char NewHour, unsigned char NewMin)
{
	int i = 0;
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	02 c0       	rjmp	.+4      	; 0x37e2 <ChangeLine2Start+0x34>
    37de:	80 e0       	ldi	r24, 0x00	; 0
    37e0:	90 e0       	ldi	r25, 0x00	; 0
		s->L2_Start_Minutes = NewMin;
		PrintLineStart2(s);
		i = 1;
	}
	return i;
}
    37e2:	df 91       	pop	r29
    37e4:	cf 91       	pop	r28
    37e6:	1f 91       	pop	r17
    37e8:	0f 91       	pop	r16
    37ea:	08 95       	ret

000037ec <UpdateSprinklerLineValues>:

void UpdateSprinklerLineValues(system *s)
{
    37ec:	fc 01       	movw	r30, r24
		s->SP1->RunLength = s->Line_1_RunTime;
    37ee:	a2 89       	ldd	r26, Z+18	; 0x12
    37f0:	b3 89       	ldd	r27, Z+19	; 0x13
    37f2:	86 85       	ldd	r24, Z+14	; 0x0e
    37f4:	97 85       	ldd	r25, Z+15	; 0x0f
    37f6:	17 96       	adiw	r26, 0x07	; 7
    37f8:	9c 93       	st	X, r25
    37fa:	8e 93       	st	-X, r24
    37fc:	16 97       	sbiw	r26, 0x06	; 6
		s->SP1->StartMinutes = s->L1_Start_Minutes;
    37fe:	a2 89       	ldd	r26, Z+18	; 0x12
    3800:	b3 89       	ldd	r27, Z+19	; 0x13
    3802:	82 85       	ldd	r24, Z+10	; 0x0a
    3804:	18 96       	adiw	r26, 0x08	; 8
    3806:	8c 93       	st	X, r24
		s->SP1->StartHours = s->L1_Start_Hours;
    3808:	a2 89       	ldd	r26, Z+18	; 0x12
    380a:	b3 89       	ldd	r27, Z+19	; 0x13
    380c:	83 85       	ldd	r24, Z+11	; 0x0b
    380e:	19 96       	adiw	r26, 0x09	; 9
    3810:	8c 93       	st	X, r24
		s->SP1->RunStatus = s->Line_1_Run_Status;
    3812:	a2 89       	ldd	r26, Z+18	; 0x12
    3814:	b3 89       	ldd	r27, Z+19	; 0x13
    3816:	80 85       	ldd	r24, Z+8	; 0x08
    3818:	12 96       	adiw	r26, 0x02	; 2
    381a:	8c 93       	st	X, r24
		s->SP1->ErrorStatus =  s->Line_1_Status;
    381c:	a2 89       	ldd	r26, Z+18	; 0x12
    381e:	b3 89       	ldd	r27, Z+19	; 0x13
    3820:	86 81       	ldd	r24, Z+6	; 0x06
    3822:	13 96       	adiw	r26, 0x03	; 3
    3824:	8c 93       	st	X, r24
		
		s->SP2->RunLength = s->Line_2_RunTime;
    3826:	a4 89       	ldd	r26, Z+20	; 0x14
    3828:	b5 89       	ldd	r27, Z+21	; 0x15
    382a:	80 89       	ldd	r24, Z+16	; 0x10
    382c:	91 89       	ldd	r25, Z+17	; 0x11
    382e:	17 96       	adiw	r26, 0x07	; 7
    3830:	9c 93       	st	X, r25
    3832:	8e 93       	st	-X, r24
    3834:	16 97       	sbiw	r26, 0x06	; 6
		s->SP2->StartMinutes = s->L2_Start_Minutes;
    3836:	a4 89       	ldd	r26, Z+20	; 0x14
    3838:	b5 89       	ldd	r27, Z+21	; 0x15
    383a:	84 85       	ldd	r24, Z+12	; 0x0c
    383c:	18 96       	adiw	r26, 0x08	; 8
    383e:	8c 93       	st	X, r24
		s->SP2->StartHours = s->L2_Start_Hours;
    3840:	a4 89       	ldd	r26, Z+20	; 0x14
    3842:	b5 89       	ldd	r27, Z+21	; 0x15
    3844:	85 85       	ldd	r24, Z+13	; 0x0d
    3846:	19 96       	adiw	r26, 0x09	; 9
    3848:	8c 93       	st	X, r24
		s->SP2->RunStatus = s->Line_2_Run_Status;
    384a:	a4 89       	ldd	r26, Z+20	; 0x14
    384c:	b5 89       	ldd	r27, Z+21	; 0x15
    384e:	81 85       	ldd	r24, Z+9	; 0x09
    3850:	12 96       	adiw	r26, 0x02	; 2
    3852:	8c 93       	st	X, r24
		s->SP2->ErrorStatus =  s->Line_2_Status;
    3854:	a4 89       	ldd	r26, Z+20	; 0x14
    3856:	b5 89       	ldd	r27, Z+21	; 0x15
    3858:	87 81       	ldd	r24, Z+7	; 0x07
    385a:	13 96       	adiw	r26, 0x03	; 3
    385c:	8c 93       	st	X, r24
    385e:	13 97       	sbiw	r26, 0x03	; 3
    3860:	08 95       	ret

00003862 <SendString>:
#define RECEIVESTRING_H_

char Recieve_String [256];

void SendString (char * temp)
{
    3862:	0f 93       	push	r16
    3864:	1f 93       	push	r17
    3866:	cf 93       	push	r28
    3868:	df 93       	push	r29
    386a:	cd b7       	in	r28, 0x3d	; 61
    386c:	de b7       	in	r29, 0x3e	; 62
    386e:	c0 50       	subi	r28, 0x00	; 0
    3870:	d1 40       	sbci	r29, 0x01	; 1
    3872:	0f b6       	in	r0, 0x3f	; 63
    3874:	f8 94       	cli
    3876:	de bf       	out	0x3e, r29	; 62
    3878:	0f be       	out	0x3f, r0	; 63
    387a:	cd bf       	out	0x3d, r28	; 61
    387c:	bc 01       	movw	r22, r24
	char string [256];
	strcpy(string, temp);
    387e:	ce 01       	movw	r24, r28
    3880:	01 96       	adiw	r24, 0x01	; 1
    3882:	0e 94 98 22 	call	0x4530	; 0x4530 <strcpy>
	for (int i = 0; string[i] != '\0'; i++)
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	88 23       	and	r24, r24
    388a:	81 f0       	breq	.+32     	; 0x38ac <SendString+0x4a>
    388c:	8e 01       	movw	r16, r28
    388e:	0e 5f       	subi	r16, 0xFE	; 254
    3890:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		USART_Send(string[i],0);
    3892:	60 e0       	ldi	r22, 0x00	; 0
    3894:	0e 94 32 05 	call	0xa64	; 0xa64 <USART_Send>
		while (!USART_HasTransmitted(0));
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <USART_HasTransmitted>
    389e:	88 23       	and	r24, r24
    38a0:	d9 f3       	breq	.-10     	; 0x3898 <SendString+0x36>

void SendString (char * temp)
{
	char string [256];
	strcpy(string, temp);
	for (int i = 0; string[i] != '\0'; i++)
    38a2:	f8 01       	movw	r30, r16
    38a4:	81 91       	ld	r24, Z+
    38a6:	8f 01       	movw	r16, r30
    38a8:	88 23       	and	r24, r24
    38aa:	99 f7       	brne	.-26     	; 0x3892 <SendString+0x30>
	{
		USART_Send(string[i],0);
		while (!USART_HasTransmitted(0));
	}
	USART_Send('\n',0);
    38ac:	8a e0       	ldi	r24, 0x0A	; 10
    38ae:	60 e0       	ldi	r22, 0x00	; 0
    38b0:	0e 94 32 05 	call	0xa64	; 0xa64 <USART_Send>
}
    38b4:	c0 50       	subi	r28, 0x00	; 0
    38b6:	df 4f       	sbci	r29, 0xFF	; 255
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	f8 94       	cli
    38bc:	de bf       	out	0x3e, r29	; 62
    38be:	0f be       	out	0x3f, r0	; 63
    38c0:	cd bf       	out	0x3d, r28	; 61
    38c2:	df 91       	pop	r29
    38c4:	cf 91       	pop	r28
    38c6:	1f 91       	pop	r17
    38c8:	0f 91       	pop	r16
    38ca:	08 95       	ret

000038cc <RecieveString>:

int RecieveString ()
{
    38cc:	0f 93       	push	r16
    38ce:	1f 93       	push	r17
    38d0:	cf 93       	push	r28
    38d2:	df 93       	push	r29
	int i = 0;
	if (USART_HasReceived(0))
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	0e 94 07 05 	call	0xa0e	; 0xa0e <USART_HasReceived>
    38da:	88 23       	and	r24, r24
    38dc:	c9 f0       	breq	.+50     	; 0x3910 <RecieveString+0x44>
	{
		unsigned temp = USART_Receive(0);
    38de:	80 e0       	ldi	r24, 0x00	; 0
    38e0:	0e 94 44 05 	call	0xa88	; 0xa88 <USART_Receive>
    38e4:	90 e0       	ldi	r25, 0x00	; 0
		if(temp != '\n')
    38e6:	8a 30       	cpi	r24, 0x0A	; 10
    38e8:	91 05       	cpc	r25, r1
    38ea:	91 f0       	breq	.+36     	; 0x3910 <RecieveString+0x44>
    38ec:	04 e9       	ldi	r16, 0x94	; 148
    38ee:	13 e0       	ldi	r17, 0x03	; 3
    38f0:	c0 e0       	ldi	r28, 0x00	; 0
    38f2:	d0 e0       	ldi	r29, 0x00	; 0
		{
			while (temp != '\n')
			{
				//PORTA = temp;
				Recieve_String [i] = temp;
    38f4:	f8 01       	movw	r30, r16
    38f6:	81 93       	st	Z+, r24
    38f8:	8f 01       	movw	r16, r30
				i++;
    38fa:	21 96       	adiw	r28, 0x01	; 1
				temp = USART_Receive(0);
    38fc:	80 e0       	ldi	r24, 0x00	; 0
    38fe:	0e 94 44 05 	call	0xa88	; 0xa88 <USART_Receive>
    3902:	90 e0       	ldi	r25, 0x00	; 0
	if (USART_HasReceived(0))
	{
		unsigned temp = USART_Receive(0);
		if(temp != '\n')
		{
			while (temp != '\n')
    3904:	8a 30       	cpi	r24, 0x0A	; 10
    3906:	91 05       	cpc	r25, r1
    3908:	a9 f7       	brne	.-22     	; 0x38f4 <RecieveString+0x28>
				//PORTA = temp;
				Recieve_String [i] = temp;
				i++;
				temp = USART_Receive(0);
			}
			Recieve_String [i] = '\0';
    390a:	cc 56       	subi	r28, 0x6C	; 108
    390c:	dc 4f       	sbci	r29, 0xFC	; 252
    390e:	18 82       	st	Y, r1
		}
	}
	
	USART_Flush(0);
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	0e 94 11 05 	call	0xa22	; 0xa22 <USART_Flush>
}
    3916:	df 91       	pop	r29
    3918:	cf 91       	pop	r28
    391a:	1f 91       	pop	r17
    391c:	0f 91       	pop	r16
    391e:	08 95       	ret

00003920 <Control_tick>:
	
}


int Control_tick ()
{
    3920:	df 92       	push	r13
    3922:	ef 92       	push	r14
    3924:	ff 92       	push	r15
    3926:	0f 93       	push	r16
    3928:	1f 93       	push	r17
    392a:	cf 93       	push	r28
    392c:	df 93       	push	r29
    392e:	cd b7       	in	r28, 0x3d	; 61
    3930:	de b7       	in	r29, 0x3e	; 62
    3932:	c0 50       	subi	r28, 0x00	; 0
    3934:	d1 40       	sbci	r29, 0x01	; 1
    3936:	0f b6       	in	r0, 0x3f	; 63
    3938:	f8 94       	cli
    393a:	de bf       	out	0x3e, r29	; 62
    393c:	0f be       	out	0x3f, r0	; 63
    393e:	cd bf       	out	0x3d, r28	; 61
		RecieveString();
    3940:	0e 94 66 1c 	call	0x38cc	; 0x38cc <RecieveString>
		//PORTA = Recieve_String;	
		if(strlen(Recieve_String) < 2)
    3944:	a4 e9       	ldi	r26, 0x94	; 148
    3946:	b3 e0       	ldi	r27, 0x03	; 3
    3948:	fd 01       	movw	r30, r26
    394a:	01 90       	ld	r0, Z+
    394c:	00 20       	and	r0, r0
    394e:	e9 f7       	brne	.-6      	; 0x394a <Control_tick+0x2a>
    3950:	31 97       	sbiw	r30, 0x01	; 1
    3952:	ea 1b       	sub	r30, r26
    3954:	fb 0b       	sbc	r31, r27
    3956:	e2 30       	cpi	r30, 0x02	; 2
    3958:	f1 05       	cpc	r31, r1
    395a:	08 f4       	brcc	.+2      	; 0x395e <Control_tick+0x3e>
    395c:	76 c1       	rjmp	.+748    	; 0x3c4a <Control_tick+0x32a>
		{
			return 0;
		}			
			
		char Test[256];
		strcpy(Test, strtok (Recieve_String,":"));
    395e:	cd 01       	movw	r24, r26
    3960:	60 ef       	ldi	r22, 0xF0	; 240
    3962:	71 e0       	ldi	r23, 0x01	; 1
    3964:	0e 94 7f 22 	call	0x44fe	; 0x44fe <strtok>
    3968:	bc 01       	movw	r22, r24
    396a:	ce 01       	movw	r24, r28
    396c:	01 96       	adiw	r24, 0x01	; 1
    396e:	0e 94 98 22 	call	0x4530	; 0x4530 <strcpy>
		if (strcmp(Test, "SetTime") == 0)
    3972:	ce 01       	movw	r24, r28
    3974:	01 96       	adiw	r24, 0x01	; 1
    3976:	62 ef       	ldi	r22, 0xF2	; 242
    3978:	71 e0       	ldi	r23, 0x01	; 1
    397a:	0e 94 8f 22 	call	0x451e	; 0x451e <strcmp>
    397e:	28 2f       	mov	r18, r24
    3980:	39 2f       	mov	r19, r25
    3982:	21 15       	cp	r18, r1
    3984:	31 05       	cpc	r19, r1
    3986:	49 f5       	brne	.+82     	; 0x39da <Control_tick+0xba>
		{
			int Hour = atoi(strtok (NULL, ",:"));
    3988:	0a ef       	ldi	r16, 0xFA	; 250
    398a:	11 e0       	ldi	r17, 0x01	; 1
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	b8 01       	movw	r22, r16
    3992:	0e 94 7f 22 	call	0x44fe	; 0x44fe <strtok>
    3996:	0e 94 61 22 	call	0x44c2	; 0x44c2 <atoi>
    399a:	7c 01       	movw	r14, r24
			int Min = atoi(strtok (NULL, ",:"));
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	b8 01       	movw	r22, r16
    39a2:	0e 94 7f 22 	call	0x44fe	; 0x44fe <strtok>
    39a6:	0e 94 61 22 	call	0x44c2	; 0x44c2 <atoi>
    39aa:	ac 01       	movw	r20, r24
			if (ChangeTime(&MainSys, Hour, Min))
    39ac:	84 e9       	ldi	r24, 0x94	; 148
    39ae:	94 e0       	ldi	r25, 0x04	; 4
    39b0:	b7 01       	movw	r22, r14
    39b2:	0e 94 18 1b 	call	0x3630	; 0x3630 <ChangeTime>
    39b6:	00 97       	sbiw	r24, 0x00	; 0
    39b8:	29 f0       	breq	.+10     	; 0x39c4 <Control_tick+0xa4>
			{
				SendString("Time Has Been Set!");
    39ba:	8d ef       	ldi	r24, 0xFD	; 253
    39bc:	91 e0       	ldi	r25, 0x01	; 1
    39be:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
    39c2:	04 c0       	rjmp	.+8      	; 0x39cc <Control_tick+0xac>
			}
			else
			{
				SendString("Error Setting Time!");
    39c4:	80 e1       	ldi	r24, 0x10	; 16
    39c6:	92 e0       	ldi	r25, 0x02	; 2
    39c8:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
			}
			
			strcpy(Recieve_String, " "); 
    39cc:	80 e2       	ldi	r24, 0x20	; 32
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	90 93 95 03 	sts	0x0395, r25
    39d4:	80 93 94 03 	sts	0x0394, r24
    39d8:	34 c1       	rjmp	.+616    	; 0x3c42 <Control_tick+0x322>
		}
		else if(strcmp(Test, "SetStartTime") == 0)
    39da:	ce 01       	movw	r24, r28
    39dc:	01 96       	adiw	r24, 0x01	; 1
    39de:	64 e2       	ldi	r22, 0x24	; 36
    39e0:	72 e0       	ldi	r23, 0x02	; 2
    39e2:	0e 94 8f 22 	call	0x451e	; 0x451e <strcmp>
    39e6:	28 2f       	mov	r18, r24
    39e8:	39 2f       	mov	r19, r25
    39ea:	21 15       	cp	r18, r1
    39ec:	31 05       	cpc	r19, r1
    39ee:	09 f0       	breq	.+2      	; 0x39f2 <Control_tick+0xd2>
    39f0:	4f c0       	rjmp	.+158    	; 0x3a90 <Control_tick+0x170>
		{
			int Line = atoi(strtok (NULL, ",:"));
    39f2:	0a ef       	ldi	r16, 0xFA	; 250
    39f4:	11 e0       	ldi	r17, 0x01	; 1
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	b8 01       	movw	r22, r16
    39fc:	0e 94 7f 22 	call	0x44fe	; 0x44fe <strtok>
    3a00:	0e 94 61 22 	call	0x44c2	; 0x44c2 <atoi>
    3a04:	7c 01       	movw	r14, r24
			int Hour = atoi(strtok (NULL, ",:"));
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	b8 01       	movw	r22, r16
    3a0c:	0e 94 7f 22 	call	0x44fe	; 0x44fe <strtok>
    3a10:	0e 94 61 22 	call	0x44c2	; 0x44c2 <atoi>
    3a14:	d8 2e       	mov	r13, r24
			int Min = atoi(strtok (NULL, ",:"));
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	b8 01       	movw	r22, r16
    3a1c:	0e 94 7f 22 	call	0x44fe	; 0x44fe <strtok>
    3a20:	0e 94 61 22 	call	0x44c2	; 0x44c2 <atoi>
    3a24:	48 2f       	mov	r20, r24
			if(Line == 1)
    3a26:	81 e0       	ldi	r24, 0x01	; 1
    3a28:	e8 16       	cp	r14, r24
    3a2a:	f1 04       	cpc	r15, r1
    3a2c:	89 f4       	brne	.+34     	; 0x3a50 <Control_tick+0x130>
			{
				if(ChangeLine1Start(&MainSys, Hour, Min))
    3a2e:	84 e9       	ldi	r24, 0x94	; 148
    3a30:	94 e0       	ldi	r25, 0x04	; 4
    3a32:	6d 2d       	mov	r22, r13
    3a34:	0e 94 b8 1b 	call	0x3770	; 0x3770 <ChangeLine1Start>
    3a38:	00 97       	sbiw	r24, 0x00	; 0
    3a3a:	29 f0       	breq	.+10     	; 0x3a46 <Control_tick+0x126>
				{
					SendString("Start Time Has Been Set on Line 1!");
    3a3c:	81 e3       	ldi	r24, 0x31	; 49
    3a3e:	92 e0       	ldi	r25, 0x02	; 2
    3a40:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
    3a44:	1e c0       	rjmp	.+60     	; 0x3a82 <Control_tick+0x162>
				}
				else
				{
					SendString("Error Setting Start Time!");
    3a46:	84 e5       	ldi	r24, 0x54	; 84
    3a48:	92 e0       	ldi	r25, 0x02	; 2
    3a4a:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
    3a4e:	19 c0       	rjmp	.+50     	; 0x3a82 <Control_tick+0x162>
				}					
				
			}
			else if (Line == 2)
    3a50:	82 e0       	ldi	r24, 0x02	; 2
    3a52:	e8 16       	cp	r14, r24
    3a54:	f1 04       	cpc	r15, r1
    3a56:	89 f4       	brne	.+34     	; 0x3a7a <Control_tick+0x15a>
			{
				if(ChangeLine2Start(&MainSys, Hour, Min))
    3a58:	84 e9       	ldi	r24, 0x94	; 148
    3a5a:	94 e0       	ldi	r25, 0x04	; 4
    3a5c:	6d 2d       	mov	r22, r13
    3a5e:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <ChangeLine2Start>
    3a62:	00 97       	sbiw	r24, 0x00	; 0
    3a64:	29 f0       	breq	.+10     	; 0x3a70 <Control_tick+0x150>
				{
					SendString("Start Time Has Been Set on Line 2!");
    3a66:	8e e6       	ldi	r24, 0x6E	; 110
    3a68:	92 e0       	ldi	r25, 0x02	; 2
    3a6a:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
    3a6e:	09 c0       	rjmp	.+18     	; 0x3a82 <Control_tick+0x162>
				}
				else
				{
					SendString("Error Setting Start Time!");
    3a70:	84 e5       	ldi	r24, 0x54	; 84
    3a72:	92 e0       	ldi	r25, 0x02	; 2
    3a74:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
    3a78:	04 c0       	rjmp	.+8      	; 0x3a82 <Control_tick+0x162>
				}
			}
			else
			{
				SendString("Error Setting Start Time!");
    3a7a:	84 e5       	ldi	r24, 0x54	; 84
    3a7c:	92 e0       	ldi	r25, 0x02	; 2
    3a7e:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
			}
			
			strcpy(Recieve_String, " ");
    3a82:	80 e2       	ldi	r24, 0x20	; 32
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	90 93 95 03 	sts	0x0395, r25
    3a8a:	80 93 94 03 	sts	0x0394, r24
    3a8e:	d9 c0       	rjmp	.+434    	; 0x3c42 <Control_tick+0x322>
		}
		else if(strcmp(Test,"SetRun") == 0)
    3a90:	ce 01       	movw	r24, r28
    3a92:	01 96       	adiw	r24, 0x01	; 1
    3a94:	61 e9       	ldi	r22, 0x91	; 145
    3a96:	72 e0       	ldi	r23, 0x02	; 2
    3a98:	0e 94 8f 22 	call	0x451e	; 0x451e <strcmp>
    3a9c:	28 2f       	mov	r18, r24
    3a9e:	39 2f       	mov	r19, r25
    3aa0:	21 15       	cp	r18, r1
    3aa2:	31 05       	cpc	r19, r1
    3aa4:	09 f0       	breq	.+2      	; 0x3aa8 <Control_tick+0x188>
    3aa6:	45 c0       	rjmp	.+138    	; 0x3b32 <Control_tick+0x212>
		{
			//SendString("Here!");
			int Line = atoi(strtok (NULL, ",:"));
    3aa8:	0a ef       	ldi	r16, 0xFA	; 250
    3aaa:	11 e0       	ldi	r17, 0x01	; 1
    3aac:	80 e0       	ldi	r24, 0x00	; 0
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	b8 01       	movw	r22, r16
    3ab2:	0e 94 7f 22 	call	0x44fe	; 0x44fe <strtok>
    3ab6:	0e 94 61 22 	call	0x44c2	; 0x44c2 <atoi>
    3aba:	7c 01       	movw	r14, r24
			int Min = atoi(strtok (NULL, ",:"));
    3abc:	80 e0       	ldi	r24, 0x00	; 0
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	b8 01       	movw	r22, r16
    3ac2:	0e 94 7f 22 	call	0x44fe	; 0x44fe <strtok>
    3ac6:	0e 94 61 22 	call	0x44c2	; 0x44c2 <atoi>
    3aca:	68 2f       	mov	r22, r24
			
			if(Line == 1)
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	e8 16       	cp	r14, r24
    3ad0:	f1 04       	cpc	r15, r1
    3ad2:	81 f4       	brne	.+32     	; 0x3af4 <Control_tick+0x1d4>
			{
				if(ChangeLine1Run(&MainSys, Min))
    3ad4:	84 e9       	ldi	r24, 0x94	; 148
    3ad6:	94 e0       	ldi	r25, 0x04	; 4
    3ad8:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <ChangeLine1Run>
    3adc:	00 97       	sbiw	r24, 0x00	; 0
    3ade:	29 f0       	breq	.+10     	; 0x3aea <Control_tick+0x1ca>
				{
					SendString("Run Time Has Been Set on Line 1!");
    3ae0:	88 e9       	ldi	r24, 0x98	; 152
    3ae2:	92 e0       	ldi	r25, 0x02	; 2
    3ae4:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
    3ae8:	1d c0       	rjmp	.+58     	; 0x3b24 <Control_tick+0x204>
				}
				else
				{
					SendString("Error Setting Run Time!");
    3aea:	89 eb       	ldi	r24, 0xB9	; 185
    3aec:	92 e0       	ldi	r25, 0x02	; 2
    3aee:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
    3af2:	18 c0       	rjmp	.+48     	; 0x3b24 <Control_tick+0x204>
				}
				
			}
			else if (Line == 2)
    3af4:	82 e0       	ldi	r24, 0x02	; 2
    3af6:	e8 16       	cp	r14, r24
    3af8:	f1 04       	cpc	r15, r1
    3afa:	81 f4       	brne	.+32     	; 0x3b1c <Control_tick+0x1fc>
			{
				if(ChangeLine2Run(&MainSys, Min))
    3afc:	84 e9       	ldi	r24, 0x94	; 148
    3afe:	94 e0       	ldi	r25, 0x04	; 4
    3b00:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <ChangeLine2Run>
    3b04:	00 97       	sbiw	r24, 0x00	; 0
    3b06:	29 f0       	breq	.+10     	; 0x3b12 <Control_tick+0x1f2>
				{
					SendString("Run TIme Has Been Set on Line 2!");
    3b08:	81 ed       	ldi	r24, 0xD1	; 209
    3b0a:	92 e0       	ldi	r25, 0x02	; 2
    3b0c:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
    3b10:	09 c0       	rjmp	.+18     	; 0x3b24 <Control_tick+0x204>
				}
				else
				{
					SendString("Error Setting Run Time!");
    3b12:	89 eb       	ldi	r24, 0xB9	; 185
    3b14:	92 e0       	ldi	r25, 0x02	; 2
    3b16:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
    3b1a:	04 c0       	rjmp	.+8      	; 0x3b24 <Control_tick+0x204>
				}
			}
			else
			{
				SendString("Error Setting Run Time!");
    3b1c:	89 eb       	ldi	r24, 0xB9	; 185
    3b1e:	92 e0       	ldi	r25, 0x02	; 2
    3b20:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
			}
			
			strcpy(Recieve_String, " ");
    3b24:	80 e2       	ldi	r24, 0x20	; 32
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	90 93 95 03 	sts	0x0395, r25
    3b2c:	80 93 94 03 	sts	0x0394, r24
    3b30:	88 c0       	rjmp	.+272    	; 0x3c42 <Control_tick+0x322>
		}
		else if(strcmp(Test, "LineOn") == 0)
    3b32:	ce 01       	movw	r24, r28
    3b34:	01 96       	adiw	r24, 0x01	; 1
    3b36:	62 ef       	ldi	r22, 0xF2	; 242
    3b38:	72 e0       	ldi	r23, 0x02	; 2
    3b3a:	0e 94 8f 22 	call	0x451e	; 0x451e <strcmp>
    3b3e:	28 2f       	mov	r18, r24
    3b40:	39 2f       	mov	r19, r25
    3b42:	21 15       	cp	r18, r1
    3b44:	31 05       	cpc	r19, r1
    3b46:	a9 f5       	brne	.+106    	; 0x3bb2 <Control_tick+0x292>
		{
			int Line = atoi(strtok (NULL, ",:"));
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	6a ef       	ldi	r22, 0xFA	; 250
    3b4e:	71 e0       	ldi	r23, 0x01	; 1
    3b50:	0e 94 7f 22 	call	0x44fe	; 0x44fe <strtok>
    3b54:	0e 94 61 22 	call	0x44c2	; 0x44c2 <atoi>
			if(Line == 1 && MainSys.Line_1_Run_Status == false)
    3b58:	81 30       	cpi	r24, 0x01	; 1
    3b5a:	91 05       	cpc	r25, r1
    3b5c:	61 f4       	brne	.+24     	; 0x3b76 <Control_tick+0x256>
    3b5e:	80 91 9c 04 	lds	r24, 0x049C
    3b62:	88 23       	and	r24, r24
    3b64:	b9 f4       	brne	.+46     	; 0x3b94 <Control_tick+0x274>
			{
				MainSys.Line_1_Run_Status = true;
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	80 93 9c 04 	sts	0x049C, r24
				SendString("Line 1 On!");
    3b6c:	89 ef       	ldi	r24, 0xF9	; 249
    3b6e:	92 e0       	ldi	r25, 0x02	; 2
    3b70:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
    3b74:	13 c0       	rjmp	.+38     	; 0x3b9c <Control_tick+0x27c>
			}
			else if (Line == 2 && MainSys.Line_2_Run_Status == false)
    3b76:	82 30       	cpi	r24, 0x02	; 2
    3b78:	91 05       	cpc	r25, r1
    3b7a:	61 f4       	brne	.+24     	; 0x3b94 <Control_tick+0x274>
    3b7c:	80 91 9d 04 	lds	r24, 0x049D
    3b80:	88 23       	and	r24, r24
    3b82:	41 f4       	brne	.+16     	; 0x3b94 <Control_tick+0x274>
			{
				MainSys.Line_2_Run_Status = true;
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	80 93 9d 04 	sts	0x049D, r24
				SendString("Line 2 On!");
    3b8a:	84 e0       	ldi	r24, 0x04	; 4
    3b8c:	93 e0       	ldi	r25, 0x03	; 3
    3b8e:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
    3b92:	04 c0       	rjmp	.+8      	; 0x3b9c <Control_tick+0x27c>
			}
			else
			{
				SendString("Error Setting Line On!");
    3b94:	8f e0       	ldi	r24, 0x0F	; 15
    3b96:	93 e0       	ldi	r25, 0x03	; 3
    3b98:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
			}
			
			PrintCurrentlyRunning(&MainSys);
    3b9c:	84 e9       	ldi	r24, 0x94	; 148
    3b9e:	94 e0       	ldi	r25, 0x04	; 4
    3ba0:	0e 94 18 19 	call	0x3230	; 0x3230 <PrintCurrentlyRunning>
	
			strcpy(Recieve_String, " ");
    3ba4:	80 e2       	ldi	r24, 0x20	; 32
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	90 93 95 03 	sts	0x0395, r25
    3bac:	80 93 94 03 	sts	0x0394, r24
    3bb0:	48 c0       	rjmp	.+144    	; 0x3c42 <Control_tick+0x322>
		}	
		else if(strcmp(Test, "LineOff") == 0)
    3bb2:	ce 01       	movw	r24, r28
    3bb4:	01 96       	adiw	r24, 0x01	; 1
    3bb6:	66 e2       	ldi	r22, 0x26	; 38
    3bb8:	73 e0       	ldi	r23, 0x03	; 3
    3bba:	0e 94 8f 22 	call	0x451e	; 0x451e <strcmp>
    3bbe:	28 2f       	mov	r18, r24
    3bc0:	39 2f       	mov	r19, r25
    3bc2:	21 15       	cp	r18, r1
    3bc4:	31 05       	cpc	r19, r1
    3bc6:	99 f5       	brne	.+102    	; 0x3c2e <Control_tick+0x30e>
		{
			int Line = atoi(strtok (NULL, ",:"));
    3bc8:	80 e0       	ldi	r24, 0x00	; 0
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	6a ef       	ldi	r22, 0xFA	; 250
    3bce:	71 e0       	ldi	r23, 0x01	; 1
    3bd0:	0e 94 7f 22 	call	0x44fe	; 0x44fe <strtok>
    3bd4:	0e 94 61 22 	call	0x44c2	; 0x44c2 <atoi>
			if(Line == 1 && MainSys.Line_1_Run_Status == true)
    3bd8:	81 30       	cpi	r24, 0x01	; 1
    3bda:	91 05       	cpc	r25, r1
    3bdc:	59 f4       	brne	.+22     	; 0x3bf4 <Control_tick+0x2d4>
    3bde:	80 91 9c 04 	lds	r24, 0x049C
    3be2:	88 23       	and	r24, r24
    3be4:	a9 f0       	breq	.+42     	; 0x3c10 <Control_tick+0x2f0>
			{
				MainSys.Line_1_Run_Status = false;
    3be6:	10 92 9c 04 	sts	0x049C, r1
				SendString("Line 1 Off!");
    3bea:	8e e2       	ldi	r24, 0x2E	; 46
    3bec:	93 e0       	ldi	r25, 0x03	; 3
    3bee:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
    3bf2:	12 c0       	rjmp	.+36     	; 0x3c18 <Control_tick+0x2f8>
			}
			else if (Line == 2 && MainSys.Line_2_Run_Status == true)
    3bf4:	82 30       	cpi	r24, 0x02	; 2
    3bf6:	91 05       	cpc	r25, r1
    3bf8:	59 f4       	brne	.+22     	; 0x3c10 <Control_tick+0x2f0>
    3bfa:	80 91 9d 04 	lds	r24, 0x049D
    3bfe:	88 23       	and	r24, r24
    3c00:	39 f0       	breq	.+14     	; 0x3c10 <Control_tick+0x2f0>
			{
				MainSys.Line_2_Run_Status = false;
    3c02:	10 92 9d 04 	sts	0x049D, r1
				SendString("Line 2 Off!");
    3c06:	8a e3       	ldi	r24, 0x3A	; 58
    3c08:	93 e0       	ldi	r25, 0x03	; 3
    3c0a:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
    3c0e:	04 c0       	rjmp	.+8      	; 0x3c18 <Control_tick+0x2f8>
			}
			else
			{
				SendString("Error Setting Line Off!");
    3c10:	86 e4       	ldi	r24, 0x46	; 70
    3c12:	93 e0       	ldi	r25, 0x03	; 3
    3c14:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
			}
			
			DeleteCurrentlyRunning(&MainSys);
    3c18:	84 e9       	ldi	r24, 0x94	; 148
    3c1a:	94 e0       	ldi	r25, 0x04	; 4
    3c1c:	0e 94 f6 19 	call	0x33ec	; 0x33ec <DeleteCurrentlyRunning>
	
			strcpy(Recieve_String, " ");
    3c20:	80 e2       	ldi	r24, 0x20	; 32
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	90 93 95 03 	sts	0x0395, r25
    3c28:	80 93 94 03 	sts	0x0394, r24
    3c2c:	0a c0       	rjmp	.+20     	; 0x3c42 <Control_tick+0x322>
		}	
		else
		{
			SendString("Error With Command!");
    3c2e:	8e e5       	ldi	r24, 0x5E	; 94
    3c30:	93 e0       	ldi	r25, 0x03	; 3
    3c32:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
			strcpy(Recieve_String, " ");
    3c36:	80 e2       	ldi	r24, 0x20	; 32
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	90 93 95 03 	sts	0x0395, r25
    3c3e:	80 93 94 03 	sts	0x0394, r24
		}
		
		UpdateSprinklerLineValues(&MainSys);		
    3c42:	84 e9       	ldi	r24, 0x94	; 148
    3c44:	94 e0       	ldi	r25, 0x04	; 4
    3c46:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <UpdateSprinklerLineValues>
	
	return 0;
}
    3c4a:	80 e0       	ldi	r24, 0x00	; 0
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	c0 50       	subi	r28, 0x00	; 0
    3c50:	df 4f       	sbci	r29, 0xFF	; 255
    3c52:	0f b6       	in	r0, 0x3f	; 63
    3c54:	f8 94       	cli
    3c56:	de bf       	out	0x3e, r29	; 62
    3c58:	0f be       	out	0x3f, r0	; 63
    3c5a:	cd bf       	out	0x3d, r28	; 61
    3c5c:	df 91       	pop	r29
    3c5e:	cf 91       	pop	r28
    3c60:	1f 91       	pop	r17
    3c62:	0f 91       	pop	r16
    3c64:	ff 90       	pop	r15
    3c66:	ef 90       	pop	r14
    3c68:	df 90       	pop	r13
    3c6a:	08 95       	ret

00003c6c <WaterScheduler>:
	}
	
}

int WaterScheduler(system *s)
{
    3c6c:	0f 93       	push	r16
    3c6e:	1f 93       	push	r17
    3c70:	cf 93       	push	r28
    3c72:	df 93       	push	r29
    3c74:	ec 01       	movw	r28, r24
	unsigned char CurrentHour = s->Hours;
    3c76:	1c 81       	ldd	r17, Y+4	; 0x04
	unsigned char CurrentMin = s->Minutes;
    3c78:	0d 81       	ldd	r16, Y+5	; 0x05
	
	if(s->Line_1_Run_Status)
    3c7a:	88 85       	ldd	r24, Y+8	; 0x08
    3c7c:	88 23       	and	r24, r24
    3c7e:	89 f0       	breq	.+34     	; 0x3ca2 <WaterScheduler+0x36>
	{
		s->Line_1_Run_Status = false;
    3c80:	18 86       	std	Y+8, r1	; 0x08
		DeleteCurrentlyRunning(s);
    3c82:	ce 01       	movw	r24, r28
    3c84:	0e 94 f6 19 	call	0x33ec	; 0x33ec <DeleteCurrentlyRunning>
		s->SP1->ElapsedTime++;
    3c88:	ea 89       	ldd	r30, Y+18	; 0x12
    3c8a:	fb 89       	ldd	r31, Y+19	; 0x13
    3c8c:	84 81       	ldd	r24, Z+4	; 0x04
    3c8e:	95 81       	ldd	r25, Z+5	; 0x05
    3c90:	01 96       	adiw	r24, 0x01	; 1
    3c92:	95 83       	std	Z+5, r25	; 0x05
    3c94:	84 83       	std	Z+4, r24	; 0x04
		s->Line_1_Run_Status = true;
    3c96:	81 e0       	ldi	r24, 0x01	; 1
    3c98:	88 87       	std	Y+8, r24	; 0x08
		PrintCurrentlyRunning(s);
    3c9a:	ce 01       	movw	r24, r28
    3c9c:	0e 94 18 19 	call	0x3230	; 0x3230 <PrintCurrentlyRunning>
    3ca0:	04 c0       	rjmp	.+8      	; 0x3caa <WaterScheduler+0x3e>
	}
	else
	{
		s->SP1->ElapsedTime = 0;
    3ca2:	ea 89       	ldd	r30, Y+18	; 0x12
    3ca4:	fb 89       	ldd	r31, Y+19	; 0x13
    3ca6:	15 82       	std	Z+5, r1	; 0x05
    3ca8:	14 82       	std	Z+4, r1	; 0x04
	}
	
	if(s->Line_2_Run_Status)
    3caa:	89 85       	ldd	r24, Y+9	; 0x09
    3cac:	88 23       	and	r24, r24
    3cae:	89 f0       	breq	.+34     	; 0x3cd2 <WaterScheduler+0x66>
	{
		s->Line_2_Run_Status = false;
    3cb0:	19 86       	std	Y+9, r1	; 0x09
		DeleteCurrentlyRunning(s);
    3cb2:	ce 01       	movw	r24, r28
    3cb4:	0e 94 f6 19 	call	0x33ec	; 0x33ec <DeleteCurrentlyRunning>
		s->SP2->ElapsedTime++;
    3cb8:	ec 89       	ldd	r30, Y+20	; 0x14
    3cba:	fd 89       	ldd	r31, Y+21	; 0x15
    3cbc:	84 81       	ldd	r24, Z+4	; 0x04
    3cbe:	95 81       	ldd	r25, Z+5	; 0x05
    3cc0:	01 96       	adiw	r24, 0x01	; 1
    3cc2:	95 83       	std	Z+5, r25	; 0x05
    3cc4:	84 83       	std	Z+4, r24	; 0x04
		s->Line_2_Run_Status = true;
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	89 87       	std	Y+9, r24	; 0x09
		PrintCurrentlyRunning(s);
    3cca:	ce 01       	movw	r24, r28
    3ccc:	0e 94 18 19 	call	0x3230	; 0x3230 <PrintCurrentlyRunning>
    3cd0:	04 c0       	rjmp	.+8      	; 0x3cda <WaterScheduler+0x6e>
	}
	else
	{
		s->SP2->ElapsedTime = 0;
    3cd2:	ec 89       	ldd	r30, Y+20	; 0x14
    3cd4:	fd 89       	ldd	r31, Y+21	; 0x15
    3cd6:	15 82       	std	Z+5, r1	; 0x05
    3cd8:	14 82       	std	Z+4, r1	; 0x04
	}
	
	if(CurrentHour == s->SP1->StartHours && CurrentMin == s->SP1->StartMinutes)
    3cda:	ea 89       	ldd	r30, Y+18	; 0x12
    3cdc:	fb 89       	ldd	r31, Y+19	; 0x13
    3cde:	81 85       	ldd	r24, Z+9	; 0x09
    3ce0:	81 17       	cp	r24, r17
    3ce2:	61 f4       	brne	.+24     	; 0x3cfc <WaterScheduler+0x90>
    3ce4:	80 85       	ldd	r24, Z+8	; 0x08
    3ce6:	80 17       	cp	r24, r16
    3ce8:	49 f4       	brne	.+18     	; 0x3cfc <WaterScheduler+0x90>
	{
		s->Line_1_Run_Status = true;
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	88 87       	std	Y+8, r24	; 0x08
		SendString("Line 1 On!");
    3cee:	89 ef       	ldi	r24, 0xF9	; 249
    3cf0:	92 e0       	ldi	r25, 0x02	; 2
    3cf2:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
		PrintCurrentlyRunning(s);
    3cf6:	ce 01       	movw	r24, r28
    3cf8:	0e 94 18 19 	call	0x3230	; 0x3230 <PrintCurrentlyRunning>
	}
	
	if(CurrentHour == s->SP2->StartHours && CurrentMin == s->SP2->StartMinutes)
    3cfc:	ec 89       	ldd	r30, Y+20	; 0x14
    3cfe:	fd 89       	ldd	r31, Y+21	; 0x15
    3d00:	81 85       	ldd	r24, Z+9	; 0x09
    3d02:	81 17       	cp	r24, r17
    3d04:	61 f4       	brne	.+24     	; 0x3d1e <WaterScheduler+0xb2>
    3d06:	80 85       	ldd	r24, Z+8	; 0x08
    3d08:	80 17       	cp	r24, r16
    3d0a:	49 f4       	brne	.+18     	; 0x3d1e <WaterScheduler+0xb2>
	{
		s->Line_2_Run_Status = true;
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
    3d0e:	89 87       	std	Y+9, r24	; 0x09
		SendString("Line 2 On!");
    3d10:	84 e0       	ldi	r24, 0x04	; 4
    3d12:	93 e0       	ldi	r25, 0x03	; 3
    3d14:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
		PrintCurrentlyRunning(s);
    3d18:	ce 01       	movw	r24, r28
    3d1a:	0e 94 18 19 	call	0x3230	; 0x3230 <PrintCurrentlyRunning>
	}
	
	if((s->SP1->ElapsedTime >= s->SP1->RunLength ) && s->Line_1_Run_Status )
    3d1e:	ea 89       	ldd	r30, Y+18	; 0x12
    3d20:	fb 89       	ldd	r31, Y+19	; 0x13
    3d22:	84 81       	ldd	r24, Z+4	; 0x04
    3d24:	95 81       	ldd	r25, Z+5	; 0x05
    3d26:	26 81       	ldd	r18, Z+6	; 0x06
    3d28:	37 81       	ldd	r19, Z+7	; 0x07
    3d2a:	82 17       	cp	r24, r18
    3d2c:	93 07       	cpc	r25, r19
    3d2e:	5c f0       	brlt	.+22     	; 0x3d46 <WaterScheduler+0xda>
    3d30:	88 85       	ldd	r24, Y+8	; 0x08
    3d32:	88 23       	and	r24, r24
    3d34:	41 f0       	breq	.+16     	; 0x3d46 <WaterScheduler+0xda>
	{
		s->Line_1_Run_Status = false;
    3d36:	18 86       	std	Y+8, r1	; 0x08
		SendString("Line 1 Off!");
    3d38:	8e e2       	ldi	r24, 0x2E	; 46
    3d3a:	93 e0       	ldi	r25, 0x03	; 3
    3d3c:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
		DeleteCurrentlyRunning(s);
    3d40:	ce 01       	movw	r24, r28
    3d42:	0e 94 f6 19 	call	0x33ec	; 0x33ec <DeleteCurrentlyRunning>
	}
		
	if( (s->SP2->ElapsedTime >= s->SP2->RunLength ) && s->Line_2_Run_Status)
    3d46:	ec 89       	ldd	r30, Y+20	; 0x14
    3d48:	fd 89       	ldd	r31, Y+21	; 0x15
    3d4a:	84 81       	ldd	r24, Z+4	; 0x04
    3d4c:	95 81       	ldd	r25, Z+5	; 0x05
    3d4e:	26 81       	ldd	r18, Z+6	; 0x06
    3d50:	37 81       	ldd	r19, Z+7	; 0x07
    3d52:	82 17       	cp	r24, r18
    3d54:	93 07       	cpc	r25, r19
    3d56:	5c f0       	brlt	.+22     	; 0x3d6e <WaterScheduler+0x102>
    3d58:	89 85       	ldd	r24, Y+9	; 0x09
    3d5a:	88 23       	and	r24, r24
    3d5c:	41 f0       	breq	.+16     	; 0x3d6e <WaterScheduler+0x102>
	{
		s->Line_2_Run_Status = false;
    3d5e:	19 86       	std	Y+9, r1	; 0x09
		SendString("Line 2 Off!");
    3d60:	8a e3       	ldi	r24, 0x3A	; 58
    3d62:	93 e0       	ldi	r25, 0x03	; 3
    3d64:	0e 94 31 1c 	call	0x3862	; 0x3862 <SendString>
		DeleteCurrentlyRunning(s);
    3d68:	ce 01       	movw	r24, r28
    3d6a:	0e 94 f6 19 	call	0x33ec	; 0x33ec <DeleteCurrentlyRunning>
	}

	
	
}
    3d6e:	df 91       	pop	r29
    3d70:	cf 91       	pop	r28
    3d72:	1f 91       	pop	r17
    3d74:	0f 91       	pop	r16
    3d76:	08 95       	ret

00003d78 <TimeKeeper>:
	
	return 0;
}

int TimeKeeper ()
{
    3d78:	cf 93       	push	r28
    3d7a:	df 93       	push	r29
	if(CurrentTicks >= TickPerSecond)
    3d7c:	40 91 86 03 	lds	r20, 0x0386
    3d80:	50 91 87 03 	lds	r21, 0x0387
    3d84:	60 91 88 03 	lds	r22, 0x0388
    3d88:	70 91 89 03 	lds	r23, 0x0389
    3d8c:	80 91 72 03 	lds	r24, 0x0372
    3d90:	90 91 73 03 	lds	r25, 0x0373
    3d94:	a0 91 74 03 	lds	r26, 0x0374
    3d98:	b0 91 75 03 	lds	r27, 0x0375
    3d9c:	48 17       	cp	r20, r24
    3d9e:	59 07       	cpc	r21, r25
    3da0:	6a 07       	cpc	r22, r26
    3da2:	7b 07       	cpc	r23, r27
    3da4:	d8 f0       	brcs	.+54     	; 0x3ddc <TimeKeeper+0x64>
	{
		CurrentTicks = 0;
    3da6:	10 92 86 03 	sts	0x0386, r1
    3daa:	10 92 87 03 	sts	0x0387, r1
    3dae:	10 92 88 03 	sts	0x0388, r1
    3db2:	10 92 89 03 	sts	0x0389, r1
		CurrentSecs++;
    3db6:	80 91 82 03 	lds	r24, 0x0382
    3dba:	90 91 83 03 	lds	r25, 0x0383
    3dbe:	a0 91 84 03 	lds	r26, 0x0384
    3dc2:	b0 91 85 03 	lds	r27, 0x0385
    3dc6:	01 96       	adiw	r24, 0x01	; 1
    3dc8:	a1 1d       	adc	r26, r1
    3dca:	b1 1d       	adc	r27, r1
    3dcc:	80 93 82 03 	sts	0x0382, r24
    3dd0:	90 93 83 03 	sts	0x0383, r25
    3dd4:	a0 93 84 03 	sts	0x0384, r26
    3dd8:	b0 93 85 03 	sts	0x0385, r27
	}
	
	CurrentTicks++;
    3ddc:	80 91 86 03 	lds	r24, 0x0386
    3de0:	90 91 87 03 	lds	r25, 0x0387
    3de4:	a0 91 88 03 	lds	r26, 0x0388
    3de8:	b0 91 89 03 	lds	r27, 0x0389
    3dec:	01 96       	adiw	r24, 0x01	; 1
    3dee:	a1 1d       	adc	r26, r1
    3df0:	b1 1d       	adc	r27, r1
    3df2:	80 93 86 03 	sts	0x0386, r24
    3df6:	90 93 87 03 	sts	0x0387, r25
    3dfa:	a0 93 88 03 	sts	0x0388, r26
    3dfe:	b0 93 89 03 	sts	0x0389, r27
	
	if(CurrentSecs == 60)
    3e02:	80 91 82 03 	lds	r24, 0x0382
    3e06:	90 91 83 03 	lds	r25, 0x0383
    3e0a:	a0 91 84 03 	lds	r26, 0x0384
    3e0e:	b0 91 85 03 	lds	r27, 0x0385
    3e12:	8c 33       	cpi	r24, 0x3C	; 60
    3e14:	91 05       	cpc	r25, r1
    3e16:	a1 05       	cpc	r26, r1
    3e18:	b1 05       	cpc	r27, r1
    3e1a:	99 f4       	brne	.+38     	; 0x3e42 <TimeKeeper+0xca>
	{
		CurrentSecs = 0;
    3e1c:	10 92 82 03 	sts	0x0382, r1
    3e20:	10 92 83 03 	sts	0x0383, r1
    3e24:	10 92 84 03 	sts	0x0384, r1
    3e28:	10 92 85 03 	sts	0x0385, r1
		PORTA++;
    3e2c:	82 b1       	in	r24, 0x02	; 2
    3e2e:	8f 5f       	subi	r24, 0xFF	; 255
    3e30:	82 b9       	out	0x02, r24	; 2
		increaseTime(&MainSys);
    3e32:	c4 e9       	ldi	r28, 0x94	; 148
    3e34:	d4 e0       	ldi	r29, 0x04	; 4
    3e36:	ce 01       	movw	r24, r28
    3e38:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <increaseTime>
		WaterScheduler(&MainSys);
    3e3c:	ce 01       	movw	r24, r28
    3e3e:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <WaterScheduler>
	}
	
}
    3e42:	df 91       	pop	r29
    3e44:	cf 91       	pop	r28
    3e46:	08 95       	ret

00003e48 <main>:

system MainSys;

int main(void)
{
	DDRA = 0xFF; PORTA = 0x00;
    3e48:	8f ef       	ldi	r24, 0xFF	; 255
    3e4a:	81 b9       	out	0x01, r24	; 1
    3e4c:	12 b8       	out	0x02, r1	; 2
	//DDRC = 0x00; PORTC = 0x00;


	
	SPI_MasterInit();
    3e4e:	0e 94 56 05 	call	0xaac	; 0xaac <SPI_MasterInit>
	displayInit();
    3e52:	0e 94 8b 05 	call	0xb16	; 0xb16 <displayInit>
	initUSART(0);
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <initUSART>
	initUSART(1);
    3e5c:	81 e0       	ldi	r24, 0x01	; 1
    3e5e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <initUSART>
		
	sprinkler Sprinkler1;
	//MainSys.SP1 = &Sprinkler1;
	
	initSystem(&MainSys,2,30,6,58,58,10,0,0);
    3e62:	c4 e9       	ldi	r28, 0x94	; 148
    3e64:	d4 e0       	ldi	r29, 0x04	; 4
    3e66:	ce 01       	movw	r24, r28
    3e68:	62 e0       	ldi	r22, 0x02	; 2
    3e6a:	70 e0       	ldi	r23, 0x00	; 0
    3e6c:	4e e1       	ldi	r20, 0x1E	; 30
    3e6e:	50 e0       	ldi	r21, 0x00	; 0
    3e70:	26 e0       	ldi	r18, 0x06	; 6
    3e72:	0a e3       	ldi	r16, 0x3A	; 58
    3e74:	10 e0       	ldi	r17, 0x00	; 0
    3e76:	0f 2e       	mov	r0, r31
    3e78:	fa e3       	ldi	r31, 0x3A	; 58
    3e7a:	ef 2e       	mov	r14, r31
    3e7c:	ff 24       	eor	r15, r15
    3e7e:	f0 2d       	mov	r31, r0
    3e80:	0f 2e       	mov	r0, r31
    3e82:	fa e0       	ldi	r31, 0x0A	; 10
    3e84:	cf 2e       	mov	r12, r31
    3e86:	dd 24       	eor	r13, r13
    3e88:	f0 2d       	mov	r31, r0
    3e8a:	aa 24       	eor	r10, r10
    3e8c:	88 24       	eor	r8, r8
    3e8e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <initSystem>
	initMenu(&MainSys);
    3e92:	ce 01       	movw	r24, r28
    3e94:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <initMenu>
	
	while(1)
	{
		Control_tick ();	
		UpdateSprinklers(MainSys.SP1, MainSys.Line_1_Run_Status, MainSys.SP2, MainSys.Line_2_Run_Status);
    3e98:	62 96       	adiw	r28, 0x12	; 18
    3e9a:	8e 01       	movw	r16, r28
    3e9c:	0a 50       	subi	r16, 0x0A	; 10
    3e9e:	10 40       	sbci	r17, 0x00	; 0
    3ea0:	ee 24       	eor	r14, r14
    3ea2:	ff 24       	eor	r15, r15
    3ea4:	68 94       	set
    3ea6:	e1 f8       	bld	r14, 1
    3ea8:	ec 0e       	add	r14, r28
    3eaa:	fd 1e       	adc	r15, r29
    3eac:	0f 2e       	mov	r0, r31
    3eae:	f7 ef       	ldi	r31, 0xF7	; 247
    3eb0:	cf 2e       	mov	r12, r31
    3eb2:	ff ef       	ldi	r31, 0xFF	; 255
    3eb4:	df 2e       	mov	r13, r31
    3eb6:	f0 2d       	mov	r31, r0
    3eb8:	cc 0e       	add	r12, r28
    3eba:	dd 1e       	adc	r13, r29
	initSystem(&MainSys,2,30,6,58,58,10,0,0);
	initMenu(&MainSys);
	
	while(1)
	{
		Control_tick ();	
    3ebc:	0e 94 90 1c 	call	0x3920	; 0x3920 <Control_tick>
		UpdateSprinklers(MainSys.SP1, MainSys.Line_1_Run_Status, MainSys.SP2, MainSys.Line_2_Run_Status);
    3ec0:	f7 01       	movw	r30, r14
    3ec2:	40 81       	ld	r20, Z
    3ec4:	51 81       	ldd	r21, Z+1	; 0x01
    3ec6:	88 81       	ld	r24, Y
    3ec8:	99 81       	ldd	r25, Y+1	; 0x01
    3eca:	f8 01       	movw	r30, r16
    3ecc:	60 81       	ld	r22, Z
    3ece:	f6 01       	movw	r30, r12
    3ed0:	20 81       	ld	r18, Z
    3ed2:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <UpdateSprinklers>
		TimeKeeper();	
    3ed6:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <TimeKeeper>
    3eda:	f0 cf       	rjmp	.-32     	; 0x3ebc <main+0x74>

00003edc <__subsf3>:
    3edc:	50 58       	subi	r21, 0x80	; 128

00003ede <__addsf3>:
    3ede:	bb 27       	eor	r27, r27
    3ee0:	aa 27       	eor	r26, r26
    3ee2:	0e d0       	rcall	.+28     	; 0x3f00 <__addsf3x>
    3ee4:	e5 c0       	rjmp	.+458    	; 0x40b0 <__fp_round>
    3ee6:	d6 d0       	rcall	.+428    	; 0x4094 <__fp_pscA>
    3ee8:	30 f0       	brcs	.+12     	; 0x3ef6 <__addsf3+0x18>
    3eea:	db d0       	rcall	.+438    	; 0x40a2 <__fp_pscB>
    3eec:	20 f0       	brcs	.+8      	; 0x3ef6 <__addsf3+0x18>
    3eee:	31 f4       	brne	.+12     	; 0x3efc <__addsf3+0x1e>
    3ef0:	9f 3f       	cpi	r25, 0xFF	; 255
    3ef2:	11 f4       	brne	.+4      	; 0x3ef8 <__addsf3+0x1a>
    3ef4:	1e f4       	brtc	.+6      	; 0x3efc <__addsf3+0x1e>
    3ef6:	cb c0       	rjmp	.+406    	; 0x408e <__fp_nan>
    3ef8:	0e f4       	brtc	.+2      	; 0x3efc <__addsf3+0x1e>
    3efa:	e0 95       	com	r30
    3efc:	e7 fb       	bst	r30, 7
    3efe:	c1 c0       	rjmp	.+386    	; 0x4082 <__fp_inf>

00003f00 <__addsf3x>:
    3f00:	e9 2f       	mov	r30, r25
    3f02:	e7 d0       	rcall	.+462    	; 0x40d2 <__fp_split3>
    3f04:	80 f3       	brcs	.-32     	; 0x3ee6 <__addsf3+0x8>
    3f06:	ba 17       	cp	r27, r26
    3f08:	62 07       	cpc	r22, r18
    3f0a:	73 07       	cpc	r23, r19
    3f0c:	84 07       	cpc	r24, r20
    3f0e:	95 07       	cpc	r25, r21
    3f10:	18 f0       	brcs	.+6      	; 0x3f18 <__addsf3x+0x18>
    3f12:	71 f4       	brne	.+28     	; 0x3f30 <__addsf3x+0x30>
    3f14:	9e f5       	brtc	.+102    	; 0x3f7c <__addsf3x+0x7c>
    3f16:	ff c0       	rjmp	.+510    	; 0x4116 <__fp_zero>
    3f18:	0e f4       	brtc	.+2      	; 0x3f1c <__addsf3x+0x1c>
    3f1a:	e0 95       	com	r30
    3f1c:	0b 2e       	mov	r0, r27
    3f1e:	ba 2f       	mov	r27, r26
    3f20:	a0 2d       	mov	r26, r0
    3f22:	0b 01       	movw	r0, r22
    3f24:	b9 01       	movw	r22, r18
    3f26:	90 01       	movw	r18, r0
    3f28:	0c 01       	movw	r0, r24
    3f2a:	ca 01       	movw	r24, r20
    3f2c:	a0 01       	movw	r20, r0
    3f2e:	11 24       	eor	r1, r1
    3f30:	ff 27       	eor	r31, r31
    3f32:	59 1b       	sub	r21, r25
    3f34:	99 f0       	breq	.+38     	; 0x3f5c <__addsf3x+0x5c>
    3f36:	59 3f       	cpi	r21, 0xF9	; 249
    3f38:	50 f4       	brcc	.+20     	; 0x3f4e <__addsf3x+0x4e>
    3f3a:	50 3e       	cpi	r21, 0xE0	; 224
    3f3c:	68 f1       	brcs	.+90     	; 0x3f98 <__addsf3x+0x98>
    3f3e:	1a 16       	cp	r1, r26
    3f40:	f0 40       	sbci	r31, 0x00	; 0
    3f42:	a2 2f       	mov	r26, r18
    3f44:	23 2f       	mov	r18, r19
    3f46:	34 2f       	mov	r19, r20
    3f48:	44 27       	eor	r20, r20
    3f4a:	58 5f       	subi	r21, 0xF8	; 248
    3f4c:	f3 cf       	rjmp	.-26     	; 0x3f34 <__addsf3x+0x34>
    3f4e:	46 95       	lsr	r20
    3f50:	37 95       	ror	r19
    3f52:	27 95       	ror	r18
    3f54:	a7 95       	ror	r26
    3f56:	f0 40       	sbci	r31, 0x00	; 0
    3f58:	53 95       	inc	r21
    3f5a:	c9 f7       	brne	.-14     	; 0x3f4e <__addsf3x+0x4e>
    3f5c:	7e f4       	brtc	.+30     	; 0x3f7c <__addsf3x+0x7c>
    3f5e:	1f 16       	cp	r1, r31
    3f60:	ba 0b       	sbc	r27, r26
    3f62:	62 0b       	sbc	r22, r18
    3f64:	73 0b       	sbc	r23, r19
    3f66:	84 0b       	sbc	r24, r20
    3f68:	ba f0       	brmi	.+46     	; 0x3f98 <__addsf3x+0x98>
    3f6a:	91 50       	subi	r25, 0x01	; 1
    3f6c:	a1 f0       	breq	.+40     	; 0x3f96 <__addsf3x+0x96>
    3f6e:	ff 0f       	add	r31, r31
    3f70:	bb 1f       	adc	r27, r27
    3f72:	66 1f       	adc	r22, r22
    3f74:	77 1f       	adc	r23, r23
    3f76:	88 1f       	adc	r24, r24
    3f78:	c2 f7       	brpl	.-16     	; 0x3f6a <__addsf3x+0x6a>
    3f7a:	0e c0       	rjmp	.+28     	; 0x3f98 <__addsf3x+0x98>
    3f7c:	ba 0f       	add	r27, r26
    3f7e:	62 1f       	adc	r22, r18
    3f80:	73 1f       	adc	r23, r19
    3f82:	84 1f       	adc	r24, r20
    3f84:	48 f4       	brcc	.+18     	; 0x3f98 <__addsf3x+0x98>
    3f86:	87 95       	ror	r24
    3f88:	77 95       	ror	r23
    3f8a:	67 95       	ror	r22
    3f8c:	b7 95       	ror	r27
    3f8e:	f7 95       	ror	r31
    3f90:	9e 3f       	cpi	r25, 0xFE	; 254
    3f92:	08 f0       	brcs	.+2      	; 0x3f96 <__addsf3x+0x96>
    3f94:	b3 cf       	rjmp	.-154    	; 0x3efc <__addsf3+0x1e>
    3f96:	93 95       	inc	r25
    3f98:	88 0f       	add	r24, r24
    3f9a:	08 f0       	brcs	.+2      	; 0x3f9e <__addsf3x+0x9e>
    3f9c:	99 27       	eor	r25, r25
    3f9e:	ee 0f       	add	r30, r30
    3fa0:	97 95       	ror	r25
    3fa2:	87 95       	ror	r24
    3fa4:	08 95       	ret

00003fa6 <__fixsfsi>:
    3fa6:	04 d0       	rcall	.+8      	; 0x3fb0 <__fixunssfsi>
    3fa8:	68 94       	set
    3faa:	b1 11       	cpse	r27, r1
    3fac:	b5 c0       	rjmp	.+362    	; 0x4118 <__fp_szero>
    3fae:	08 95       	ret

00003fb0 <__fixunssfsi>:
    3fb0:	98 d0       	rcall	.+304    	; 0x40e2 <__fp_splitA>
    3fb2:	88 f0       	brcs	.+34     	; 0x3fd6 <__fixunssfsi+0x26>
    3fb4:	9f 57       	subi	r25, 0x7F	; 127
    3fb6:	90 f0       	brcs	.+36     	; 0x3fdc <__fixunssfsi+0x2c>
    3fb8:	b9 2f       	mov	r27, r25
    3fba:	99 27       	eor	r25, r25
    3fbc:	b7 51       	subi	r27, 0x17	; 23
    3fbe:	a0 f0       	brcs	.+40     	; 0x3fe8 <__fixunssfsi+0x38>
    3fc0:	d1 f0       	breq	.+52     	; 0x3ff6 <__fixunssfsi+0x46>
    3fc2:	66 0f       	add	r22, r22
    3fc4:	77 1f       	adc	r23, r23
    3fc6:	88 1f       	adc	r24, r24
    3fc8:	99 1f       	adc	r25, r25
    3fca:	1a f0       	brmi	.+6      	; 0x3fd2 <__fixunssfsi+0x22>
    3fcc:	ba 95       	dec	r27
    3fce:	c9 f7       	brne	.-14     	; 0x3fc2 <__fixunssfsi+0x12>
    3fd0:	12 c0       	rjmp	.+36     	; 0x3ff6 <__fixunssfsi+0x46>
    3fd2:	b1 30       	cpi	r27, 0x01	; 1
    3fd4:	81 f0       	breq	.+32     	; 0x3ff6 <__fixunssfsi+0x46>
    3fd6:	9f d0       	rcall	.+318    	; 0x4116 <__fp_zero>
    3fd8:	b1 e0       	ldi	r27, 0x01	; 1
    3fda:	08 95       	ret
    3fdc:	9c c0       	rjmp	.+312    	; 0x4116 <__fp_zero>
    3fde:	67 2f       	mov	r22, r23
    3fe0:	78 2f       	mov	r23, r24
    3fe2:	88 27       	eor	r24, r24
    3fe4:	b8 5f       	subi	r27, 0xF8	; 248
    3fe6:	39 f0       	breq	.+14     	; 0x3ff6 <__fixunssfsi+0x46>
    3fe8:	b9 3f       	cpi	r27, 0xF9	; 249
    3fea:	cc f3       	brlt	.-14     	; 0x3fde <__fixunssfsi+0x2e>
    3fec:	86 95       	lsr	r24
    3fee:	77 95       	ror	r23
    3ff0:	67 95       	ror	r22
    3ff2:	b3 95       	inc	r27
    3ff4:	d9 f7       	brne	.-10     	; 0x3fec <__fixunssfsi+0x3c>
    3ff6:	3e f4       	brtc	.+14     	; 0x4006 <__fixunssfsi+0x56>
    3ff8:	90 95       	com	r25
    3ffa:	80 95       	com	r24
    3ffc:	70 95       	com	r23
    3ffe:	61 95       	neg	r22
    4000:	7f 4f       	sbci	r23, 0xFF	; 255
    4002:	8f 4f       	sbci	r24, 0xFF	; 255
    4004:	9f 4f       	sbci	r25, 0xFF	; 255
    4006:	08 95       	ret

00004008 <__floatunsisf>:
    4008:	e8 94       	clt
    400a:	09 c0       	rjmp	.+18     	; 0x401e <__floatsisf+0x12>

0000400c <__floatsisf>:
    400c:	97 fb       	bst	r25, 7
    400e:	3e f4       	brtc	.+14     	; 0x401e <__floatsisf+0x12>
    4010:	90 95       	com	r25
    4012:	80 95       	com	r24
    4014:	70 95       	com	r23
    4016:	61 95       	neg	r22
    4018:	7f 4f       	sbci	r23, 0xFF	; 255
    401a:	8f 4f       	sbci	r24, 0xFF	; 255
    401c:	9f 4f       	sbci	r25, 0xFF	; 255
    401e:	99 23       	and	r25, r25
    4020:	a9 f0       	breq	.+42     	; 0x404c <__floatsisf+0x40>
    4022:	f9 2f       	mov	r31, r25
    4024:	96 e9       	ldi	r25, 0x96	; 150
    4026:	bb 27       	eor	r27, r27
    4028:	93 95       	inc	r25
    402a:	f6 95       	lsr	r31
    402c:	87 95       	ror	r24
    402e:	77 95       	ror	r23
    4030:	67 95       	ror	r22
    4032:	b7 95       	ror	r27
    4034:	f1 11       	cpse	r31, r1
    4036:	f8 cf       	rjmp	.-16     	; 0x4028 <__floatsisf+0x1c>
    4038:	fa f4       	brpl	.+62     	; 0x4078 <__floatsisf+0x6c>
    403a:	bb 0f       	add	r27, r27
    403c:	11 f4       	brne	.+4      	; 0x4042 <__floatsisf+0x36>
    403e:	60 ff       	sbrs	r22, 0
    4040:	1b c0       	rjmp	.+54     	; 0x4078 <__floatsisf+0x6c>
    4042:	6f 5f       	subi	r22, 0xFF	; 255
    4044:	7f 4f       	sbci	r23, 0xFF	; 255
    4046:	8f 4f       	sbci	r24, 0xFF	; 255
    4048:	9f 4f       	sbci	r25, 0xFF	; 255
    404a:	16 c0       	rjmp	.+44     	; 0x4078 <__floatsisf+0x6c>
    404c:	88 23       	and	r24, r24
    404e:	11 f0       	breq	.+4      	; 0x4054 <__floatsisf+0x48>
    4050:	96 e9       	ldi	r25, 0x96	; 150
    4052:	11 c0       	rjmp	.+34     	; 0x4076 <__floatsisf+0x6a>
    4054:	77 23       	and	r23, r23
    4056:	21 f0       	breq	.+8      	; 0x4060 <__floatsisf+0x54>
    4058:	9e e8       	ldi	r25, 0x8E	; 142
    405a:	87 2f       	mov	r24, r23
    405c:	76 2f       	mov	r23, r22
    405e:	05 c0       	rjmp	.+10     	; 0x406a <__floatsisf+0x5e>
    4060:	66 23       	and	r22, r22
    4062:	71 f0       	breq	.+28     	; 0x4080 <__floatsisf+0x74>
    4064:	96 e8       	ldi	r25, 0x86	; 134
    4066:	86 2f       	mov	r24, r22
    4068:	70 e0       	ldi	r23, 0x00	; 0
    406a:	60 e0       	ldi	r22, 0x00	; 0
    406c:	2a f0       	brmi	.+10     	; 0x4078 <__floatsisf+0x6c>
    406e:	9a 95       	dec	r25
    4070:	66 0f       	add	r22, r22
    4072:	77 1f       	adc	r23, r23
    4074:	88 1f       	adc	r24, r24
    4076:	da f7       	brpl	.-10     	; 0x406e <__floatsisf+0x62>
    4078:	88 0f       	add	r24, r24
    407a:	96 95       	lsr	r25
    407c:	87 95       	ror	r24
    407e:	97 f9       	bld	r25, 7
    4080:	08 95       	ret

00004082 <__fp_inf>:
    4082:	97 f9       	bld	r25, 7
    4084:	9f 67       	ori	r25, 0x7F	; 127
    4086:	80 e8       	ldi	r24, 0x80	; 128
    4088:	70 e0       	ldi	r23, 0x00	; 0
    408a:	60 e0       	ldi	r22, 0x00	; 0
    408c:	08 95       	ret

0000408e <__fp_nan>:
    408e:	9f ef       	ldi	r25, 0xFF	; 255
    4090:	80 ec       	ldi	r24, 0xC0	; 192
    4092:	08 95       	ret

00004094 <__fp_pscA>:
    4094:	00 24       	eor	r0, r0
    4096:	0a 94       	dec	r0
    4098:	16 16       	cp	r1, r22
    409a:	17 06       	cpc	r1, r23
    409c:	18 06       	cpc	r1, r24
    409e:	09 06       	cpc	r0, r25
    40a0:	08 95       	ret

000040a2 <__fp_pscB>:
    40a2:	00 24       	eor	r0, r0
    40a4:	0a 94       	dec	r0
    40a6:	12 16       	cp	r1, r18
    40a8:	13 06       	cpc	r1, r19
    40aa:	14 06       	cpc	r1, r20
    40ac:	05 06       	cpc	r0, r21
    40ae:	08 95       	ret

000040b0 <__fp_round>:
    40b0:	09 2e       	mov	r0, r25
    40b2:	03 94       	inc	r0
    40b4:	00 0c       	add	r0, r0
    40b6:	11 f4       	brne	.+4      	; 0x40bc <__fp_round+0xc>
    40b8:	88 23       	and	r24, r24
    40ba:	52 f0       	brmi	.+20     	; 0x40d0 <__fp_round+0x20>
    40bc:	bb 0f       	add	r27, r27
    40be:	40 f4       	brcc	.+16     	; 0x40d0 <__fp_round+0x20>
    40c0:	bf 2b       	or	r27, r31
    40c2:	11 f4       	brne	.+4      	; 0x40c8 <__fp_round+0x18>
    40c4:	60 ff       	sbrs	r22, 0
    40c6:	04 c0       	rjmp	.+8      	; 0x40d0 <__fp_round+0x20>
    40c8:	6f 5f       	subi	r22, 0xFF	; 255
    40ca:	7f 4f       	sbci	r23, 0xFF	; 255
    40cc:	8f 4f       	sbci	r24, 0xFF	; 255
    40ce:	9f 4f       	sbci	r25, 0xFF	; 255
    40d0:	08 95       	ret

000040d2 <__fp_split3>:
    40d2:	57 fd       	sbrc	r21, 7
    40d4:	90 58       	subi	r25, 0x80	; 128
    40d6:	44 0f       	add	r20, r20
    40d8:	55 1f       	adc	r21, r21
    40da:	59 f0       	breq	.+22     	; 0x40f2 <__fp_splitA+0x10>
    40dc:	5f 3f       	cpi	r21, 0xFF	; 255
    40de:	71 f0       	breq	.+28     	; 0x40fc <__fp_splitA+0x1a>
    40e0:	47 95       	ror	r20

000040e2 <__fp_splitA>:
    40e2:	88 0f       	add	r24, r24
    40e4:	97 fb       	bst	r25, 7
    40e6:	99 1f       	adc	r25, r25
    40e8:	61 f0       	breq	.+24     	; 0x4102 <__stack+0x3>
    40ea:	9f 3f       	cpi	r25, 0xFF	; 255
    40ec:	79 f0       	breq	.+30     	; 0x410c <__stack+0xd>
    40ee:	87 95       	ror	r24
    40f0:	08 95       	ret
    40f2:	12 16       	cp	r1, r18
    40f4:	13 06       	cpc	r1, r19
    40f6:	14 06       	cpc	r1, r20
    40f8:	55 1f       	adc	r21, r21
    40fa:	f2 cf       	rjmp	.-28     	; 0x40e0 <__fp_split3+0xe>
    40fc:	46 95       	lsr	r20
    40fe:	f1 df       	rcall	.-30     	; 0x40e2 <__fp_splitA>
    4100:	08 c0       	rjmp	.+16     	; 0x4112 <__stack+0x13>
    4102:	16 16       	cp	r1, r22
    4104:	17 06       	cpc	r1, r23
    4106:	18 06       	cpc	r1, r24
    4108:	99 1f       	adc	r25, r25
    410a:	f1 cf       	rjmp	.-30     	; 0x40ee <__fp_splitA+0xc>
    410c:	86 95       	lsr	r24
    410e:	71 05       	cpc	r23, r1
    4110:	61 05       	cpc	r22, r1
    4112:	08 94       	sec
    4114:	08 95       	ret

00004116 <__fp_zero>:
    4116:	e8 94       	clt

00004118 <__fp_szero>:
    4118:	bb 27       	eor	r27, r27
    411a:	66 27       	eor	r22, r22
    411c:	77 27       	eor	r23, r23
    411e:	cb 01       	movw	r24, r22
    4120:	97 f9       	bld	r25, 7
    4122:	08 95       	ret

00004124 <__mulsf3>:
    4124:	0b d0       	rcall	.+22     	; 0x413c <__mulsf3x>
    4126:	c4 cf       	rjmp	.-120    	; 0x40b0 <__fp_round>
    4128:	b5 df       	rcall	.-150    	; 0x4094 <__fp_pscA>
    412a:	28 f0       	brcs	.+10     	; 0x4136 <__mulsf3+0x12>
    412c:	ba df       	rcall	.-140    	; 0x40a2 <__fp_pscB>
    412e:	18 f0       	brcs	.+6      	; 0x4136 <__mulsf3+0x12>
    4130:	95 23       	and	r25, r21
    4132:	09 f0       	breq	.+2      	; 0x4136 <__mulsf3+0x12>
    4134:	a6 cf       	rjmp	.-180    	; 0x4082 <__fp_inf>
    4136:	ab cf       	rjmp	.-170    	; 0x408e <__fp_nan>
    4138:	11 24       	eor	r1, r1
    413a:	ee cf       	rjmp	.-36     	; 0x4118 <__fp_szero>

0000413c <__mulsf3x>:
    413c:	ca df       	rcall	.-108    	; 0x40d2 <__fp_split3>
    413e:	a0 f3       	brcs	.-24     	; 0x4128 <__mulsf3+0x4>

00004140 <__mulsf3_pse>:
    4140:	95 9f       	mul	r25, r21
    4142:	d1 f3       	breq	.-12     	; 0x4138 <__mulsf3+0x14>
    4144:	95 0f       	add	r25, r21
    4146:	50 e0       	ldi	r21, 0x00	; 0
    4148:	55 1f       	adc	r21, r21
    414a:	62 9f       	mul	r22, r18
    414c:	f0 01       	movw	r30, r0
    414e:	72 9f       	mul	r23, r18
    4150:	bb 27       	eor	r27, r27
    4152:	f0 0d       	add	r31, r0
    4154:	b1 1d       	adc	r27, r1
    4156:	63 9f       	mul	r22, r19
    4158:	aa 27       	eor	r26, r26
    415a:	f0 0d       	add	r31, r0
    415c:	b1 1d       	adc	r27, r1
    415e:	aa 1f       	adc	r26, r26
    4160:	64 9f       	mul	r22, r20
    4162:	66 27       	eor	r22, r22
    4164:	b0 0d       	add	r27, r0
    4166:	a1 1d       	adc	r26, r1
    4168:	66 1f       	adc	r22, r22
    416a:	82 9f       	mul	r24, r18
    416c:	22 27       	eor	r18, r18
    416e:	b0 0d       	add	r27, r0
    4170:	a1 1d       	adc	r26, r1
    4172:	62 1f       	adc	r22, r18
    4174:	73 9f       	mul	r23, r19
    4176:	b0 0d       	add	r27, r0
    4178:	a1 1d       	adc	r26, r1
    417a:	62 1f       	adc	r22, r18
    417c:	83 9f       	mul	r24, r19
    417e:	a0 0d       	add	r26, r0
    4180:	61 1d       	adc	r22, r1
    4182:	22 1f       	adc	r18, r18
    4184:	74 9f       	mul	r23, r20
    4186:	33 27       	eor	r19, r19
    4188:	a0 0d       	add	r26, r0
    418a:	61 1d       	adc	r22, r1
    418c:	23 1f       	adc	r18, r19
    418e:	84 9f       	mul	r24, r20
    4190:	60 0d       	add	r22, r0
    4192:	21 1d       	adc	r18, r1
    4194:	82 2f       	mov	r24, r18
    4196:	76 2f       	mov	r23, r22
    4198:	6a 2f       	mov	r22, r26
    419a:	11 24       	eor	r1, r1
    419c:	9f 57       	subi	r25, 0x7F	; 127
    419e:	50 40       	sbci	r21, 0x00	; 0
    41a0:	8a f0       	brmi	.+34     	; 0x41c4 <__mulsf3_pse+0x84>
    41a2:	e1 f0       	breq	.+56     	; 0x41dc <__mulsf3_pse+0x9c>
    41a4:	88 23       	and	r24, r24
    41a6:	4a f0       	brmi	.+18     	; 0x41ba <__mulsf3_pse+0x7a>
    41a8:	ee 0f       	add	r30, r30
    41aa:	ff 1f       	adc	r31, r31
    41ac:	bb 1f       	adc	r27, r27
    41ae:	66 1f       	adc	r22, r22
    41b0:	77 1f       	adc	r23, r23
    41b2:	88 1f       	adc	r24, r24
    41b4:	91 50       	subi	r25, 0x01	; 1
    41b6:	50 40       	sbci	r21, 0x00	; 0
    41b8:	a9 f7       	brne	.-22     	; 0x41a4 <__mulsf3_pse+0x64>
    41ba:	9e 3f       	cpi	r25, 0xFE	; 254
    41bc:	51 05       	cpc	r21, r1
    41be:	70 f0       	brcs	.+28     	; 0x41dc <__mulsf3_pse+0x9c>
    41c0:	60 cf       	rjmp	.-320    	; 0x4082 <__fp_inf>
    41c2:	aa cf       	rjmp	.-172    	; 0x4118 <__fp_szero>
    41c4:	5f 3f       	cpi	r21, 0xFF	; 255
    41c6:	ec f3       	brlt	.-6      	; 0x41c2 <__mulsf3_pse+0x82>
    41c8:	98 3e       	cpi	r25, 0xE8	; 232
    41ca:	dc f3       	brlt	.-10     	; 0x41c2 <__mulsf3_pse+0x82>
    41cc:	86 95       	lsr	r24
    41ce:	77 95       	ror	r23
    41d0:	67 95       	ror	r22
    41d2:	b7 95       	ror	r27
    41d4:	f7 95       	ror	r31
    41d6:	e7 95       	ror	r30
    41d8:	9f 5f       	subi	r25, 0xFF	; 255
    41da:	c1 f7       	brne	.-16     	; 0x41cc <__mulsf3_pse+0x8c>
    41dc:	fe 2b       	or	r31, r30
    41de:	88 0f       	add	r24, r24
    41e0:	91 1d       	adc	r25, r1
    41e2:	96 95       	lsr	r25
    41e4:	87 95       	ror	r24
    41e6:	97 f9       	bld	r25, 7
    41e8:	08 95       	ret

000041ea <__divmodsi4>:
    41ea:	97 fb       	bst	r25, 7
    41ec:	09 2e       	mov	r0, r25
    41ee:	05 26       	eor	r0, r21
    41f0:	0e d0       	rcall	.+28     	; 0x420e <__divmodsi4_neg1>
    41f2:	57 fd       	sbrc	r21, 7
    41f4:	04 d0       	rcall	.+8      	; 0x41fe <__divmodsi4_neg2>
    41f6:	14 d0       	rcall	.+40     	; 0x4220 <__udivmodsi4>
    41f8:	0a d0       	rcall	.+20     	; 0x420e <__divmodsi4_neg1>
    41fa:	00 1c       	adc	r0, r0
    41fc:	38 f4       	brcc	.+14     	; 0x420c <__divmodsi4_exit>

000041fe <__divmodsi4_neg2>:
    41fe:	50 95       	com	r21
    4200:	40 95       	com	r20
    4202:	30 95       	com	r19
    4204:	21 95       	neg	r18
    4206:	3f 4f       	sbci	r19, 0xFF	; 255
    4208:	4f 4f       	sbci	r20, 0xFF	; 255
    420a:	5f 4f       	sbci	r21, 0xFF	; 255

0000420c <__divmodsi4_exit>:
    420c:	08 95       	ret

0000420e <__divmodsi4_neg1>:
    420e:	f6 f7       	brtc	.-4      	; 0x420c <__divmodsi4_exit>
    4210:	90 95       	com	r25
    4212:	80 95       	com	r24
    4214:	70 95       	com	r23
    4216:	61 95       	neg	r22
    4218:	7f 4f       	sbci	r23, 0xFF	; 255
    421a:	8f 4f       	sbci	r24, 0xFF	; 255
    421c:	9f 4f       	sbci	r25, 0xFF	; 255
    421e:	08 95       	ret

00004220 <__udivmodsi4>:
    4220:	a1 e2       	ldi	r26, 0x21	; 33
    4222:	1a 2e       	mov	r1, r26
    4224:	aa 1b       	sub	r26, r26
    4226:	bb 1b       	sub	r27, r27
    4228:	fd 01       	movw	r30, r26
    422a:	0d c0       	rjmp	.+26     	; 0x4246 <__udivmodsi4_ep>

0000422c <__udivmodsi4_loop>:
    422c:	aa 1f       	adc	r26, r26
    422e:	bb 1f       	adc	r27, r27
    4230:	ee 1f       	adc	r30, r30
    4232:	ff 1f       	adc	r31, r31
    4234:	a2 17       	cp	r26, r18
    4236:	b3 07       	cpc	r27, r19
    4238:	e4 07       	cpc	r30, r20
    423a:	f5 07       	cpc	r31, r21
    423c:	20 f0       	brcs	.+8      	; 0x4246 <__udivmodsi4_ep>
    423e:	a2 1b       	sub	r26, r18
    4240:	b3 0b       	sbc	r27, r19
    4242:	e4 0b       	sbc	r30, r20
    4244:	f5 0b       	sbc	r31, r21

00004246 <__udivmodsi4_ep>:
    4246:	66 1f       	adc	r22, r22
    4248:	77 1f       	adc	r23, r23
    424a:	88 1f       	adc	r24, r24
    424c:	99 1f       	adc	r25, r25
    424e:	1a 94       	dec	r1
    4250:	69 f7       	brne	.-38     	; 0x422c <__udivmodsi4_loop>
    4252:	60 95       	com	r22
    4254:	70 95       	com	r23
    4256:	80 95       	com	r24
    4258:	90 95       	com	r25
    425a:	9b 01       	movw	r18, r22
    425c:	ac 01       	movw	r20, r24
    425e:	bd 01       	movw	r22, r26
    4260:	cf 01       	movw	r24, r30
    4262:	08 95       	ret

00004264 <malloc>:
    4264:	cf 93       	push	r28
    4266:	df 93       	push	r29
    4268:	ac 01       	movw	r20, r24
    426a:	82 30       	cpi	r24, 0x02	; 2
    426c:	91 05       	cpc	r25, r1
    426e:	10 f4       	brcc	.+4      	; 0x4274 <malloc+0x10>
    4270:	42 e0       	ldi	r20, 0x02	; 2
    4272:	50 e0       	ldi	r21, 0x00	; 0
    4274:	e0 91 ac 04 	lds	r30, 0x04AC
    4278:	f0 91 ad 04 	lds	r31, 0x04AD
    427c:	20 e0       	ldi	r18, 0x00	; 0
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	a0 e0       	ldi	r26, 0x00	; 0
    4282:	b0 e0       	ldi	r27, 0x00	; 0
    4284:	24 c0       	rjmp	.+72     	; 0x42ce <malloc+0x6a>
    4286:	80 81       	ld	r24, Z
    4288:	91 81       	ldd	r25, Z+1	; 0x01
    428a:	84 17       	cp	r24, r20
    428c:	95 07       	cpc	r25, r21
    428e:	d0 f0       	brcs	.+52     	; 0x42c4 <malloc+0x60>
    4290:	84 17       	cp	r24, r20
    4292:	95 07       	cpc	r25, r21
    4294:	71 f4       	brne	.+28     	; 0x42b2 <malloc+0x4e>
    4296:	82 81       	ldd	r24, Z+2	; 0x02
    4298:	93 81       	ldd	r25, Z+3	; 0x03
    429a:	10 97       	sbiw	r26, 0x00	; 0
    429c:	29 f0       	breq	.+10     	; 0x42a8 <malloc+0x44>
    429e:	13 96       	adiw	r26, 0x03	; 3
    42a0:	9c 93       	st	X, r25
    42a2:	8e 93       	st	-X, r24
    42a4:	12 97       	sbiw	r26, 0x02	; 2
    42a6:	2c c0       	rjmp	.+88     	; 0x4300 <malloc+0x9c>
    42a8:	90 93 ad 04 	sts	0x04AD, r25
    42ac:	80 93 ac 04 	sts	0x04AC, r24
    42b0:	27 c0       	rjmp	.+78     	; 0x4300 <malloc+0x9c>
    42b2:	21 15       	cp	r18, r1
    42b4:	31 05       	cpc	r19, r1
    42b6:	19 f0       	breq	.+6      	; 0x42be <malloc+0x5a>
    42b8:	82 17       	cp	r24, r18
    42ba:	93 07       	cpc	r25, r19
    42bc:	18 f4       	brcc	.+6      	; 0x42c4 <malloc+0x60>
    42be:	9c 01       	movw	r18, r24
    42c0:	bd 01       	movw	r22, r26
    42c2:	ef 01       	movw	r28, r30
    42c4:	92 81       	ldd	r25, Z+2	; 0x02
    42c6:	83 81       	ldd	r24, Z+3	; 0x03
    42c8:	df 01       	movw	r26, r30
    42ca:	e9 2f       	mov	r30, r25
    42cc:	f8 2f       	mov	r31, r24
    42ce:	30 97       	sbiw	r30, 0x00	; 0
    42d0:	d1 f6       	brne	.-76     	; 0x4286 <malloc+0x22>
    42d2:	21 15       	cp	r18, r1
    42d4:	31 05       	cpc	r19, r1
    42d6:	f9 f0       	breq	.+62     	; 0x4316 <malloc+0xb2>
    42d8:	c9 01       	movw	r24, r18
    42da:	84 1b       	sub	r24, r20
    42dc:	95 0b       	sbc	r25, r21
    42de:	84 30       	cpi	r24, 0x04	; 4
    42e0:	91 05       	cpc	r25, r1
    42e2:	80 f4       	brcc	.+32     	; 0x4304 <malloc+0xa0>
    42e4:	8a 81       	ldd	r24, Y+2	; 0x02
    42e6:	9b 81       	ldd	r25, Y+3	; 0x03
    42e8:	61 15       	cp	r22, r1
    42ea:	71 05       	cpc	r23, r1
    42ec:	21 f0       	breq	.+8      	; 0x42f6 <malloc+0x92>
    42ee:	fb 01       	movw	r30, r22
    42f0:	93 83       	std	Z+3, r25	; 0x03
    42f2:	82 83       	std	Z+2, r24	; 0x02
    42f4:	04 c0       	rjmp	.+8      	; 0x42fe <malloc+0x9a>
    42f6:	90 93 ad 04 	sts	0x04AD, r25
    42fa:	80 93 ac 04 	sts	0x04AC, r24
    42fe:	fe 01       	movw	r30, r28
    4300:	32 96       	adiw	r30, 0x02	; 2
    4302:	42 c0       	rjmp	.+132    	; 0x4388 <malloc+0x124>
    4304:	fe 01       	movw	r30, r28
    4306:	e8 0f       	add	r30, r24
    4308:	f9 1f       	adc	r31, r25
    430a:	41 93       	st	Z+, r20
    430c:	51 93       	st	Z+, r21
    430e:	02 97       	sbiw	r24, 0x02	; 2
    4310:	99 83       	std	Y+1, r25	; 0x01
    4312:	88 83       	st	Y, r24
    4314:	39 c0       	rjmp	.+114    	; 0x4388 <malloc+0x124>
    4316:	80 91 aa 04 	lds	r24, 0x04AA
    431a:	90 91 ab 04 	lds	r25, 0x04AB
    431e:	00 97       	sbiw	r24, 0x00	; 0
    4320:	41 f4       	brne	.+16     	; 0x4332 <malloc+0xce>
    4322:	80 91 7d 03 	lds	r24, 0x037D
    4326:	90 91 7e 03 	lds	r25, 0x037E
    432a:	90 93 ab 04 	sts	0x04AB, r25
    432e:	80 93 aa 04 	sts	0x04AA, r24
    4332:	20 91 7b 03 	lds	r18, 0x037B
    4336:	30 91 7c 03 	lds	r19, 0x037C
    433a:	21 15       	cp	r18, r1
    433c:	31 05       	cpc	r19, r1
    433e:	41 f4       	brne	.+16     	; 0x4350 <malloc+0xec>
    4340:	2d b7       	in	r18, 0x3d	; 61
    4342:	3e b7       	in	r19, 0x3e	; 62
    4344:	80 91 7f 03 	lds	r24, 0x037F
    4348:	90 91 80 03 	lds	r25, 0x0380
    434c:	28 1b       	sub	r18, r24
    434e:	39 0b       	sbc	r19, r25
    4350:	e0 91 aa 04 	lds	r30, 0x04AA
    4354:	f0 91 ab 04 	lds	r31, 0x04AB
    4358:	e2 17       	cp	r30, r18
    435a:	f3 07       	cpc	r31, r19
    435c:	98 f4       	brcc	.+38     	; 0x4384 <malloc+0x120>
    435e:	2e 1b       	sub	r18, r30
    4360:	3f 0b       	sbc	r19, r31
    4362:	24 17       	cp	r18, r20
    4364:	35 07       	cpc	r19, r21
    4366:	70 f0       	brcs	.+28     	; 0x4384 <malloc+0x120>
    4368:	ca 01       	movw	r24, r20
    436a:	02 96       	adiw	r24, 0x02	; 2
    436c:	28 17       	cp	r18, r24
    436e:	39 07       	cpc	r19, r25
    4370:	48 f0       	brcs	.+18     	; 0x4384 <malloc+0x120>
    4372:	8e 0f       	add	r24, r30
    4374:	9f 1f       	adc	r25, r31
    4376:	90 93 ab 04 	sts	0x04AB, r25
    437a:	80 93 aa 04 	sts	0x04AA, r24
    437e:	41 93       	st	Z+, r20
    4380:	51 93       	st	Z+, r21
    4382:	02 c0       	rjmp	.+4      	; 0x4388 <malloc+0x124>
    4384:	e0 e0       	ldi	r30, 0x00	; 0
    4386:	f0 e0       	ldi	r31, 0x00	; 0
    4388:	cf 01       	movw	r24, r30
    438a:	df 91       	pop	r29
    438c:	cf 91       	pop	r28
    438e:	08 95       	ret

00004390 <free>:
    4390:	0f 93       	push	r16
    4392:	1f 93       	push	r17
    4394:	cf 93       	push	r28
    4396:	df 93       	push	r29
    4398:	9c 01       	movw	r18, r24
    439a:	00 97       	sbiw	r24, 0x00	; 0
    439c:	09 f4       	brne	.+2      	; 0x43a0 <free+0x10>
    439e:	8c c0       	rjmp	.+280    	; 0x44b8 <free+0x128>
    43a0:	dc 01       	movw	r26, r24
    43a2:	12 97       	sbiw	r26, 0x02	; 2
    43a4:	13 96       	adiw	r26, 0x03	; 3
    43a6:	1c 92       	st	X, r1
    43a8:	1e 92       	st	-X, r1
    43aa:	12 97       	sbiw	r26, 0x02	; 2
    43ac:	60 91 ac 04 	lds	r22, 0x04AC
    43b0:	70 91 ad 04 	lds	r23, 0x04AD
    43b4:	61 15       	cp	r22, r1
    43b6:	71 05       	cpc	r23, r1
    43b8:	89 f4       	brne	.+34     	; 0x43dc <free+0x4c>
    43ba:	8d 91       	ld	r24, X+
    43bc:	9c 91       	ld	r25, X
    43be:	11 97       	sbiw	r26, 0x01	; 1
    43c0:	82 0f       	add	r24, r18
    43c2:	93 1f       	adc	r25, r19
    43c4:	20 91 aa 04 	lds	r18, 0x04AA
    43c8:	30 91 ab 04 	lds	r19, 0x04AB
    43cc:	28 17       	cp	r18, r24
    43ce:	39 07       	cpc	r19, r25
    43d0:	69 f5       	brne	.+90     	; 0x442c <free+0x9c>
    43d2:	b0 93 ab 04 	sts	0x04AB, r27
    43d6:	a0 93 aa 04 	sts	0x04AA, r26
    43da:	6e c0       	rjmp	.+220    	; 0x44b8 <free+0x128>
    43dc:	fb 01       	movw	r30, r22
    43de:	40 e0       	ldi	r20, 0x00	; 0
    43e0:	50 e0       	ldi	r21, 0x00	; 0
    43e2:	01 c0       	rjmp	.+2      	; 0x43e6 <free+0x56>
    43e4:	fc 01       	movw	r30, r24
    43e6:	ea 17       	cp	r30, r26
    43e8:	fb 07       	cpc	r31, r27
    43ea:	30 f4       	brcc	.+12     	; 0x43f8 <free+0x68>
    43ec:	82 81       	ldd	r24, Z+2	; 0x02
    43ee:	93 81       	ldd	r25, Z+3	; 0x03
    43f0:	af 01       	movw	r20, r30
    43f2:	00 97       	sbiw	r24, 0x00	; 0
    43f4:	b9 f7       	brne	.-18     	; 0x43e4 <free+0x54>
    43f6:	1f c0       	rjmp	.+62     	; 0x4436 <free+0xa6>
    43f8:	e9 01       	movw	r28, r18
    43fa:	22 97       	sbiw	r28, 0x02	; 2
    43fc:	fb 83       	std	Y+3, r31	; 0x03
    43fe:	ea 83       	std	Y+2, r30	; 0x02
    4400:	08 81       	ld	r16, Y
    4402:	19 81       	ldd	r17, Y+1	; 0x01
    4404:	c9 01       	movw	r24, r18
    4406:	80 0f       	add	r24, r16
    4408:	91 1f       	adc	r25, r17
    440a:	8e 17       	cp	r24, r30
    440c:	9f 07       	cpc	r25, r31
    440e:	59 f4       	brne	.+22     	; 0x4426 <free+0x96>
    4410:	80 81       	ld	r24, Z
    4412:	91 81       	ldd	r25, Z+1	; 0x01
    4414:	80 0f       	add	r24, r16
    4416:	91 1f       	adc	r25, r17
    4418:	02 96       	adiw	r24, 0x02	; 2
    441a:	99 83       	std	Y+1, r25	; 0x01
    441c:	88 83       	st	Y, r24
    441e:	82 81       	ldd	r24, Z+2	; 0x02
    4420:	93 81       	ldd	r25, Z+3	; 0x03
    4422:	9b 83       	std	Y+3, r25	; 0x03
    4424:	8a 83       	std	Y+2, r24	; 0x02
    4426:	41 15       	cp	r20, r1
    4428:	51 05       	cpc	r21, r1
    442a:	29 f4       	brne	.+10     	; 0x4436 <free+0xa6>
    442c:	b0 93 ad 04 	sts	0x04AD, r27
    4430:	a0 93 ac 04 	sts	0x04AC, r26
    4434:	41 c0       	rjmp	.+130    	; 0x44b8 <free+0x128>
    4436:	fa 01       	movw	r30, r20
    4438:	b3 83       	std	Z+3, r27	; 0x03
    443a:	a2 83       	std	Z+2, r26	; 0x02
    443c:	c1 91       	ld	r28, Z+
    443e:	d1 91       	ld	r29, Z+
    4440:	ec 0f       	add	r30, r28
    4442:	fd 1f       	adc	r31, r29
    4444:	ae 17       	cp	r26, r30
    4446:	bf 07       	cpc	r27, r31
    4448:	81 f4       	brne	.+32     	; 0x446a <free+0xda>
    444a:	f9 01       	movw	r30, r18
    444c:	92 91       	ld	r25, -Z
    444e:	82 91       	ld	r24, -Z
    4450:	8c 0f       	add	r24, r28
    4452:	9d 1f       	adc	r25, r29
    4454:	02 96       	adiw	r24, 0x02	; 2
    4456:	da 01       	movw	r26, r20
    4458:	11 96       	adiw	r26, 0x01	; 1
    445a:	9c 93       	st	X, r25
    445c:	8e 93       	st	-X, r24
    445e:	82 81       	ldd	r24, Z+2	; 0x02
    4460:	93 81       	ldd	r25, Z+3	; 0x03
    4462:	13 96       	adiw	r26, 0x03	; 3
    4464:	9c 93       	st	X, r25
    4466:	8e 93       	st	-X, r24
    4468:	12 97       	sbiw	r26, 0x02	; 2
    446a:	e0 e0       	ldi	r30, 0x00	; 0
    446c:	f0 e0       	ldi	r31, 0x00	; 0
    446e:	02 c0       	rjmp	.+4      	; 0x4474 <free+0xe4>
    4470:	fb 01       	movw	r30, r22
    4472:	bc 01       	movw	r22, r24
    4474:	db 01       	movw	r26, r22
    4476:	12 96       	adiw	r26, 0x02	; 2
    4478:	8d 91       	ld	r24, X+
    447a:	9c 91       	ld	r25, X
    447c:	13 97       	sbiw	r26, 0x03	; 3
    447e:	00 97       	sbiw	r24, 0x00	; 0
    4480:	b9 f7       	brne	.-18     	; 0x4470 <free+0xe0>
    4482:	cb 01       	movw	r24, r22
    4484:	02 96       	adiw	r24, 0x02	; 2
    4486:	2d 91       	ld	r18, X+
    4488:	3c 91       	ld	r19, X
    448a:	11 97       	sbiw	r26, 0x01	; 1
    448c:	82 0f       	add	r24, r18
    448e:	93 1f       	adc	r25, r19
    4490:	20 91 aa 04 	lds	r18, 0x04AA
    4494:	30 91 ab 04 	lds	r19, 0x04AB
    4498:	28 17       	cp	r18, r24
    449a:	39 07       	cpc	r19, r25
    449c:	69 f4       	brne	.+26     	; 0x44b8 <free+0x128>
    449e:	30 97       	sbiw	r30, 0x00	; 0
    44a0:	29 f4       	brne	.+10     	; 0x44ac <free+0x11c>
    44a2:	10 92 ad 04 	sts	0x04AD, r1
    44a6:	10 92 ac 04 	sts	0x04AC, r1
    44aa:	02 c0       	rjmp	.+4      	; 0x44b0 <free+0x120>
    44ac:	13 82       	std	Z+3, r1	; 0x03
    44ae:	12 82       	std	Z+2, r1	; 0x02
    44b0:	70 93 ab 04 	sts	0x04AB, r23
    44b4:	60 93 aa 04 	sts	0x04AA, r22
    44b8:	df 91       	pop	r29
    44ba:	cf 91       	pop	r28
    44bc:	1f 91       	pop	r17
    44be:	0f 91       	pop	r16
    44c0:	08 95       	ret

000044c2 <atoi>:
    44c2:	fc 01       	movw	r30, r24
    44c4:	88 27       	eor	r24, r24
    44c6:	99 27       	eor	r25, r25
    44c8:	e8 94       	clt
    44ca:	21 91       	ld	r18, Z+
    44cc:	20 32       	cpi	r18, 0x20	; 32
    44ce:	e9 f3       	breq	.-6      	; 0x44ca <atoi+0x8>
    44d0:	29 30       	cpi	r18, 0x09	; 9
    44d2:	10 f0       	brcs	.+4      	; 0x44d8 <atoi+0x16>
    44d4:	2e 30       	cpi	r18, 0x0E	; 14
    44d6:	c8 f3       	brcs	.-14     	; 0x44ca <atoi+0x8>
    44d8:	2b 32       	cpi	r18, 0x2B	; 43
    44da:	41 f0       	breq	.+16     	; 0x44ec <atoi+0x2a>
    44dc:	2d 32       	cpi	r18, 0x2D	; 45
    44de:	39 f4       	brne	.+14     	; 0x44ee <atoi+0x2c>
    44e0:	68 94       	set
    44e2:	04 c0       	rjmp	.+8      	; 0x44ec <atoi+0x2a>
    44e4:	0e 94 c6 22 	call	0x458c	; 0x458c <__mulhi_const_10>
    44e8:	82 0f       	add	r24, r18
    44ea:	91 1d       	adc	r25, r1
    44ec:	21 91       	ld	r18, Z+
    44ee:	20 53       	subi	r18, 0x30	; 48
    44f0:	2a 30       	cpi	r18, 0x0A	; 10
    44f2:	c0 f3       	brcs	.-16     	; 0x44e4 <atoi+0x22>
    44f4:	1e f4       	brtc	.+6      	; 0x44fc <atoi+0x3a>
    44f6:	90 95       	com	r25
    44f8:	81 95       	neg	r24
    44fa:	9f 4f       	sbci	r25, 0xFF	; 255
    44fc:	08 95       	ret

000044fe <strtok>:
    44fe:	42 e9       	ldi	r20, 0x92	; 146
    4500:	53 e0       	ldi	r21, 0x03	; 3
    4502:	0e 94 9f 22 	call	0x453e	; 0x453e <strtok_r>
    4506:	08 95       	ret

00004508 <strcat>:
    4508:	fb 01       	movw	r30, r22
    450a:	dc 01       	movw	r26, r24
    450c:	0d 90       	ld	r0, X+
    450e:	00 20       	and	r0, r0
    4510:	e9 f7       	brne	.-6      	; 0x450c <strcat+0x4>
    4512:	11 97       	sbiw	r26, 0x01	; 1
    4514:	01 90       	ld	r0, Z+
    4516:	0d 92       	st	X+, r0
    4518:	00 20       	and	r0, r0
    451a:	e1 f7       	brne	.-8      	; 0x4514 <strcat+0xc>
    451c:	08 95       	ret

0000451e <strcmp>:
    451e:	fb 01       	movw	r30, r22
    4520:	dc 01       	movw	r26, r24
    4522:	8d 91       	ld	r24, X+
    4524:	01 90       	ld	r0, Z+
    4526:	80 19       	sub	r24, r0
    4528:	01 10       	cpse	r0, r1
    452a:	d9 f3       	breq	.-10     	; 0x4522 <strcmp+0x4>
    452c:	99 0b       	sbc	r25, r25
    452e:	08 95       	ret

00004530 <strcpy>:
    4530:	fb 01       	movw	r30, r22
    4532:	dc 01       	movw	r26, r24
    4534:	01 90       	ld	r0, Z+
    4536:	0d 92       	st	X+, r0
    4538:	00 20       	and	r0, r0
    453a:	e1 f7       	brne	.-8      	; 0x4534 <strcpy+0x4>
    453c:	08 95       	ret

0000453e <strtok_r>:
    453e:	fa 01       	movw	r30, r20
    4540:	a1 91       	ld	r26, Z+
    4542:	b0 81       	ld	r27, Z
    4544:	00 97       	sbiw	r24, 0x00	; 0
    4546:	19 f4       	brne	.+6      	; 0x454e <strtok_r+0x10>
    4548:	10 97       	sbiw	r26, 0x00	; 0
    454a:	e1 f0       	breq	.+56     	; 0x4584 <strtok_r+0x46>
    454c:	cd 01       	movw	r24, r26
    454e:	dc 01       	movw	r26, r24
    4550:	cd 01       	movw	r24, r26
    4552:	0d 90       	ld	r0, X+
    4554:	00 20       	and	r0, r0
    4556:	11 f4       	brne	.+4      	; 0x455c <strtok_r+0x1e>
    4558:	c0 01       	movw	r24, r0
    455a:	13 c0       	rjmp	.+38     	; 0x4582 <strtok_r+0x44>
    455c:	fb 01       	movw	r30, r22
    455e:	21 91       	ld	r18, Z+
    4560:	22 23       	and	r18, r18
    4562:	19 f0       	breq	.+6      	; 0x456a <strtok_r+0x2c>
    4564:	20 15       	cp	r18, r0
    4566:	d9 f7       	brne	.-10     	; 0x455e <strtok_r+0x20>
    4568:	f3 cf       	rjmp	.-26     	; 0x4550 <strtok_r+0x12>
    456a:	fb 01       	movw	r30, r22
    456c:	21 91       	ld	r18, Z+
    456e:	20 15       	cp	r18, r0
    4570:	19 f4       	brne	.+6      	; 0x4578 <strtok_r+0x3a>
    4572:	1e 92       	st	-X, r1
    4574:	11 96       	adiw	r26, 0x01	; 1
    4576:	06 c0       	rjmp	.+12     	; 0x4584 <strtok_r+0x46>
    4578:	22 23       	and	r18, r18
    457a:	c1 f7       	brne	.-16     	; 0x456c <strtok_r+0x2e>
    457c:	0d 90       	ld	r0, X+
    457e:	00 20       	and	r0, r0
    4580:	a1 f7       	brne	.-24     	; 0x456a <strtok_r+0x2c>
    4582:	d0 01       	movw	r26, r0
    4584:	fa 01       	movw	r30, r20
    4586:	a1 93       	st	Z+, r26
    4588:	b0 83       	st	Z, r27
    458a:	08 95       	ret

0000458c <__mulhi_const_10>:
    458c:	7a e0       	ldi	r23, 0x0A	; 10
    458e:	97 9f       	mul	r25, r23
    4590:	90 2d       	mov	r25, r0
    4592:	87 9f       	mul	r24, r23
    4594:	80 2d       	mov	r24, r0
    4596:	91 0d       	add	r25, r1
    4598:	11 24       	eor	r1, r1
    459a:	08 95       	ret

0000459c <sprintf>:
    459c:	0f 93       	push	r16
    459e:	1f 93       	push	r17
    45a0:	cf 93       	push	r28
    45a2:	df 93       	push	r29
    45a4:	cd b7       	in	r28, 0x3d	; 61
    45a6:	de b7       	in	r29, 0x3e	; 62
    45a8:	2e 97       	sbiw	r28, 0x0e	; 14
    45aa:	0f b6       	in	r0, 0x3f	; 63
    45ac:	f8 94       	cli
    45ae:	de bf       	out	0x3e, r29	; 62
    45b0:	0f be       	out	0x3f, r0	; 63
    45b2:	cd bf       	out	0x3d, r28	; 61
    45b4:	0d 89       	ldd	r16, Y+21	; 0x15
    45b6:	1e 89       	ldd	r17, Y+22	; 0x16
    45b8:	86 e0       	ldi	r24, 0x06	; 6
    45ba:	8c 83       	std	Y+4, r24	; 0x04
    45bc:	1a 83       	std	Y+2, r17	; 0x02
    45be:	09 83       	std	Y+1, r16	; 0x01
    45c0:	8f ef       	ldi	r24, 0xFF	; 255
    45c2:	9f e7       	ldi	r25, 0x7F	; 127
    45c4:	9e 83       	std	Y+6, r25	; 0x06
    45c6:	8d 83       	std	Y+5, r24	; 0x05
    45c8:	ae 01       	movw	r20, r28
    45ca:	47 5e       	subi	r20, 0xE7	; 231
    45cc:	5f 4f       	sbci	r21, 0xFF	; 255
    45ce:	ce 01       	movw	r24, r28
    45d0:	01 96       	adiw	r24, 0x01	; 1
    45d2:	6f 89       	ldd	r22, Y+23	; 0x17
    45d4:	78 8d       	ldd	r23, Y+24	; 0x18
    45d6:	0e 94 fd 22 	call	0x45fa	; 0x45fa <vfprintf>
    45da:	ef 81       	ldd	r30, Y+7	; 0x07
    45dc:	f8 85       	ldd	r31, Y+8	; 0x08
    45de:	e0 0f       	add	r30, r16
    45e0:	f1 1f       	adc	r31, r17
    45e2:	10 82       	st	Z, r1
    45e4:	2e 96       	adiw	r28, 0x0e	; 14
    45e6:	0f b6       	in	r0, 0x3f	; 63
    45e8:	f8 94       	cli
    45ea:	de bf       	out	0x3e, r29	; 62
    45ec:	0f be       	out	0x3f, r0	; 63
    45ee:	cd bf       	out	0x3d, r28	; 61
    45f0:	df 91       	pop	r29
    45f2:	cf 91       	pop	r28
    45f4:	1f 91       	pop	r17
    45f6:	0f 91       	pop	r16
    45f8:	08 95       	ret

000045fa <vfprintf>:
    45fa:	2f 92       	push	r2
    45fc:	3f 92       	push	r3
    45fe:	4f 92       	push	r4
    4600:	5f 92       	push	r5
    4602:	6f 92       	push	r6
    4604:	7f 92       	push	r7
    4606:	8f 92       	push	r8
    4608:	9f 92       	push	r9
    460a:	af 92       	push	r10
    460c:	bf 92       	push	r11
    460e:	cf 92       	push	r12
    4610:	df 92       	push	r13
    4612:	ef 92       	push	r14
    4614:	ff 92       	push	r15
    4616:	0f 93       	push	r16
    4618:	1f 93       	push	r17
    461a:	cf 93       	push	r28
    461c:	df 93       	push	r29
    461e:	cd b7       	in	r28, 0x3d	; 61
    4620:	de b7       	in	r29, 0x3e	; 62
    4622:	2d 97       	sbiw	r28, 0x0d	; 13
    4624:	0f b6       	in	r0, 0x3f	; 63
    4626:	f8 94       	cli
    4628:	de bf       	out	0x3e, r29	; 62
    462a:	0f be       	out	0x3f, r0	; 63
    462c:	cd bf       	out	0x3d, r28	; 61
    462e:	3c 01       	movw	r6, r24
    4630:	7d 87       	std	Y+13, r23	; 0x0d
    4632:	6c 87       	std	Y+12, r22	; 0x0c
    4634:	5a 01       	movw	r10, r20
    4636:	fc 01       	movw	r30, r24
    4638:	17 82       	std	Z+7, r1	; 0x07
    463a:	16 82       	std	Z+6, r1	; 0x06
    463c:	83 81       	ldd	r24, Z+3	; 0x03
    463e:	81 ff       	sbrs	r24, 1
    4640:	c8 c1       	rjmp	.+912    	; 0x49d2 <vfprintf+0x3d8>
    4642:	2e 01       	movw	r4, r28
    4644:	08 94       	sec
    4646:	41 1c       	adc	r4, r1
    4648:	51 1c       	adc	r5, r1
    464a:	f3 01       	movw	r30, r6
    464c:	93 81       	ldd	r25, Z+3	; 0x03
    464e:	ec 85       	ldd	r30, Y+12	; 0x0c
    4650:	fd 85       	ldd	r31, Y+13	; 0x0d
    4652:	93 fd       	sbrc	r25, 3
    4654:	85 91       	lpm	r24, Z+
    4656:	93 ff       	sbrs	r25, 3
    4658:	81 91       	ld	r24, Z+
    465a:	fd 87       	std	Y+13, r31	; 0x0d
    465c:	ec 87       	std	Y+12, r30	; 0x0c
    465e:	88 23       	and	r24, r24
    4660:	09 f4       	brne	.+2      	; 0x4664 <vfprintf+0x6a>
    4662:	b3 c1       	rjmp	.+870    	; 0x49ca <vfprintf+0x3d0>
    4664:	85 32       	cpi	r24, 0x25	; 37
    4666:	41 f4       	brne	.+16     	; 0x4678 <vfprintf+0x7e>
    4668:	93 fd       	sbrc	r25, 3
    466a:	85 91       	lpm	r24, Z+
    466c:	93 ff       	sbrs	r25, 3
    466e:	81 91       	ld	r24, Z+
    4670:	fd 87       	std	Y+13, r31	; 0x0d
    4672:	ec 87       	std	Y+12, r30	; 0x0c
    4674:	85 32       	cpi	r24, 0x25	; 37
    4676:	29 f4       	brne	.+10     	; 0x4682 <vfprintf+0x88>
    4678:	90 e0       	ldi	r25, 0x00	; 0
    467a:	b3 01       	movw	r22, r6
    467c:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <fputc>
    4680:	e4 cf       	rjmp	.-56     	; 0x464a <vfprintf+0x50>
    4682:	ff 24       	eor	r15, r15
    4684:	ee 24       	eor	r14, r14
    4686:	10 e0       	ldi	r17, 0x00	; 0
    4688:	10 32       	cpi	r17, 0x20	; 32
    468a:	b0 f4       	brcc	.+44     	; 0x46b8 <vfprintf+0xbe>
    468c:	8b 32       	cpi	r24, 0x2B	; 43
    468e:	69 f0       	breq	.+26     	; 0x46aa <vfprintf+0xb0>
    4690:	8c 32       	cpi	r24, 0x2C	; 44
    4692:	28 f4       	brcc	.+10     	; 0x469e <vfprintf+0xa4>
    4694:	80 32       	cpi	r24, 0x20	; 32
    4696:	51 f0       	breq	.+20     	; 0x46ac <vfprintf+0xb2>
    4698:	83 32       	cpi	r24, 0x23	; 35
    469a:	71 f4       	brne	.+28     	; 0x46b8 <vfprintf+0xbe>
    469c:	0b c0       	rjmp	.+22     	; 0x46b4 <vfprintf+0xba>
    469e:	8d 32       	cpi	r24, 0x2D	; 45
    46a0:	39 f0       	breq	.+14     	; 0x46b0 <vfprintf+0xb6>
    46a2:	80 33       	cpi	r24, 0x30	; 48
    46a4:	49 f4       	brne	.+18     	; 0x46b8 <vfprintf+0xbe>
    46a6:	11 60       	ori	r17, 0x01	; 1
    46a8:	2c c0       	rjmp	.+88     	; 0x4702 <vfprintf+0x108>
    46aa:	12 60       	ori	r17, 0x02	; 2
    46ac:	14 60       	ori	r17, 0x04	; 4
    46ae:	29 c0       	rjmp	.+82     	; 0x4702 <vfprintf+0x108>
    46b0:	18 60       	ori	r17, 0x08	; 8
    46b2:	27 c0       	rjmp	.+78     	; 0x4702 <vfprintf+0x108>
    46b4:	10 61       	ori	r17, 0x10	; 16
    46b6:	25 c0       	rjmp	.+74     	; 0x4702 <vfprintf+0x108>
    46b8:	17 fd       	sbrc	r17, 7
    46ba:	2e c0       	rjmp	.+92     	; 0x4718 <vfprintf+0x11e>
    46bc:	28 2f       	mov	r18, r24
    46be:	20 53       	subi	r18, 0x30	; 48
    46c0:	2a 30       	cpi	r18, 0x0A	; 10
    46c2:	98 f4       	brcc	.+38     	; 0x46ea <vfprintf+0xf0>
    46c4:	16 ff       	sbrs	r17, 6
    46c6:	08 c0       	rjmp	.+16     	; 0x46d8 <vfprintf+0xde>
    46c8:	8f 2d       	mov	r24, r15
    46ca:	88 0f       	add	r24, r24
    46cc:	f8 2e       	mov	r15, r24
    46ce:	ff 0c       	add	r15, r15
    46d0:	ff 0c       	add	r15, r15
    46d2:	f8 0e       	add	r15, r24
    46d4:	f2 0e       	add	r15, r18
    46d6:	15 c0       	rjmp	.+42     	; 0x4702 <vfprintf+0x108>
    46d8:	8e 2d       	mov	r24, r14
    46da:	88 0f       	add	r24, r24
    46dc:	e8 2e       	mov	r14, r24
    46de:	ee 0c       	add	r14, r14
    46e0:	ee 0c       	add	r14, r14
    46e2:	e8 0e       	add	r14, r24
    46e4:	e2 0e       	add	r14, r18
    46e6:	10 62       	ori	r17, 0x20	; 32
    46e8:	0c c0       	rjmp	.+24     	; 0x4702 <vfprintf+0x108>
    46ea:	8e 32       	cpi	r24, 0x2E	; 46
    46ec:	21 f4       	brne	.+8      	; 0x46f6 <vfprintf+0xfc>
    46ee:	16 fd       	sbrc	r17, 6
    46f0:	6c c1       	rjmp	.+728    	; 0x49ca <vfprintf+0x3d0>
    46f2:	10 64       	ori	r17, 0x40	; 64
    46f4:	06 c0       	rjmp	.+12     	; 0x4702 <vfprintf+0x108>
    46f6:	8c 36       	cpi	r24, 0x6C	; 108
    46f8:	11 f4       	brne	.+4      	; 0x46fe <vfprintf+0x104>
    46fa:	10 68       	ori	r17, 0x80	; 128
    46fc:	02 c0       	rjmp	.+4      	; 0x4702 <vfprintf+0x108>
    46fe:	88 36       	cpi	r24, 0x68	; 104
    4700:	59 f4       	brne	.+22     	; 0x4718 <vfprintf+0x11e>
    4702:	ec 85       	ldd	r30, Y+12	; 0x0c
    4704:	fd 85       	ldd	r31, Y+13	; 0x0d
    4706:	93 fd       	sbrc	r25, 3
    4708:	85 91       	lpm	r24, Z+
    470a:	93 ff       	sbrs	r25, 3
    470c:	81 91       	ld	r24, Z+
    470e:	fd 87       	std	Y+13, r31	; 0x0d
    4710:	ec 87       	std	Y+12, r30	; 0x0c
    4712:	88 23       	and	r24, r24
    4714:	09 f0       	breq	.+2      	; 0x4718 <vfprintf+0x11e>
    4716:	b8 cf       	rjmp	.-144    	; 0x4688 <vfprintf+0x8e>
    4718:	98 2f       	mov	r25, r24
    471a:	95 54       	subi	r25, 0x45	; 69
    471c:	93 30       	cpi	r25, 0x03	; 3
    471e:	18 f0       	brcs	.+6      	; 0x4726 <vfprintf+0x12c>
    4720:	90 52       	subi	r25, 0x20	; 32
    4722:	93 30       	cpi	r25, 0x03	; 3
    4724:	38 f4       	brcc	.+14     	; 0x4734 <vfprintf+0x13a>
    4726:	24 e0       	ldi	r18, 0x04	; 4
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	a2 0e       	add	r10, r18
    472c:	b3 1e       	adc	r11, r19
    472e:	3f e3       	ldi	r19, 0x3F	; 63
    4730:	39 83       	std	Y+1, r19	; 0x01
    4732:	0f c0       	rjmp	.+30     	; 0x4752 <vfprintf+0x158>
    4734:	83 36       	cpi	r24, 0x63	; 99
    4736:	31 f0       	breq	.+12     	; 0x4744 <vfprintf+0x14a>
    4738:	83 37       	cpi	r24, 0x73	; 115
    473a:	81 f0       	breq	.+32     	; 0x475c <vfprintf+0x162>
    473c:	83 35       	cpi	r24, 0x53	; 83
    473e:	09 f0       	breq	.+2      	; 0x4742 <vfprintf+0x148>
    4740:	5a c0       	rjmp	.+180    	; 0x47f6 <vfprintf+0x1fc>
    4742:	22 c0       	rjmp	.+68     	; 0x4788 <vfprintf+0x18e>
    4744:	f5 01       	movw	r30, r10
    4746:	80 81       	ld	r24, Z
    4748:	89 83       	std	Y+1, r24	; 0x01
    474a:	22 e0       	ldi	r18, 0x02	; 2
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	a2 0e       	add	r10, r18
    4750:	b3 1e       	adc	r11, r19
    4752:	21 e0       	ldi	r18, 0x01	; 1
    4754:	c2 2e       	mov	r12, r18
    4756:	d1 2c       	mov	r13, r1
    4758:	42 01       	movw	r8, r4
    475a:	14 c0       	rjmp	.+40     	; 0x4784 <vfprintf+0x18a>
    475c:	92 e0       	ldi	r25, 0x02	; 2
    475e:	29 2e       	mov	r2, r25
    4760:	31 2c       	mov	r3, r1
    4762:	2a 0c       	add	r2, r10
    4764:	3b 1c       	adc	r3, r11
    4766:	f5 01       	movw	r30, r10
    4768:	80 80       	ld	r8, Z
    476a:	91 80       	ldd	r9, Z+1	; 0x01
    476c:	16 ff       	sbrs	r17, 6
    476e:	03 c0       	rjmp	.+6      	; 0x4776 <vfprintf+0x17c>
    4770:	6f 2d       	mov	r22, r15
    4772:	70 e0       	ldi	r23, 0x00	; 0
    4774:	02 c0       	rjmp	.+4      	; 0x477a <vfprintf+0x180>
    4776:	6f ef       	ldi	r22, 0xFF	; 255
    4778:	7f ef       	ldi	r23, 0xFF	; 255
    477a:	c4 01       	movw	r24, r8
    477c:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <strnlen>
    4780:	6c 01       	movw	r12, r24
    4782:	51 01       	movw	r10, r2
    4784:	1f 77       	andi	r17, 0x7F	; 127
    4786:	15 c0       	rjmp	.+42     	; 0x47b2 <vfprintf+0x1b8>
    4788:	82 e0       	ldi	r24, 0x02	; 2
    478a:	28 2e       	mov	r2, r24
    478c:	31 2c       	mov	r3, r1
    478e:	2a 0c       	add	r2, r10
    4790:	3b 1c       	adc	r3, r11
    4792:	f5 01       	movw	r30, r10
    4794:	80 80       	ld	r8, Z
    4796:	91 80       	ldd	r9, Z+1	; 0x01
    4798:	16 ff       	sbrs	r17, 6
    479a:	03 c0       	rjmp	.+6      	; 0x47a2 <vfprintf+0x1a8>
    479c:	6f 2d       	mov	r22, r15
    479e:	70 e0       	ldi	r23, 0x00	; 0
    47a0:	02 c0       	rjmp	.+4      	; 0x47a6 <vfprintf+0x1ac>
    47a2:	6f ef       	ldi	r22, 0xFF	; 255
    47a4:	7f ef       	ldi	r23, 0xFF	; 255
    47a6:	c4 01       	movw	r24, r8
    47a8:	0e 94 04 25 	call	0x4a08	; 0x4a08 <strnlen_P>
    47ac:	6c 01       	movw	r12, r24
    47ae:	10 68       	ori	r17, 0x80	; 128
    47b0:	51 01       	movw	r10, r2
    47b2:	13 fd       	sbrc	r17, 3
    47b4:	1c c0       	rjmp	.+56     	; 0x47ee <vfprintf+0x1f4>
    47b6:	06 c0       	rjmp	.+12     	; 0x47c4 <vfprintf+0x1ca>
    47b8:	80 e2       	ldi	r24, 0x20	; 32
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	b3 01       	movw	r22, r6
    47be:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <fputc>
    47c2:	ea 94       	dec	r14
    47c4:	8e 2d       	mov	r24, r14
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	c8 16       	cp	r12, r24
    47ca:	d9 06       	cpc	r13, r25
    47cc:	a8 f3       	brcs	.-22     	; 0x47b8 <vfprintf+0x1be>
    47ce:	0f c0       	rjmp	.+30     	; 0x47ee <vfprintf+0x1f4>
    47d0:	f4 01       	movw	r30, r8
    47d2:	17 fd       	sbrc	r17, 7
    47d4:	85 91       	lpm	r24, Z+
    47d6:	17 ff       	sbrs	r17, 7
    47d8:	81 91       	ld	r24, Z+
    47da:	4f 01       	movw	r8, r30
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	b3 01       	movw	r22, r6
    47e0:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <fputc>
    47e4:	e1 10       	cpse	r14, r1
    47e6:	ea 94       	dec	r14
    47e8:	08 94       	sec
    47ea:	c1 08       	sbc	r12, r1
    47ec:	d1 08       	sbc	r13, r1
    47ee:	c1 14       	cp	r12, r1
    47f0:	d1 04       	cpc	r13, r1
    47f2:	71 f7       	brne	.-36     	; 0x47d0 <vfprintf+0x1d6>
    47f4:	e7 c0       	rjmp	.+462    	; 0x49c4 <vfprintf+0x3ca>
    47f6:	84 36       	cpi	r24, 0x64	; 100
    47f8:	11 f0       	breq	.+4      	; 0x47fe <vfprintf+0x204>
    47fa:	89 36       	cpi	r24, 0x69	; 105
    47fc:	51 f5       	brne	.+84     	; 0x4852 <vfprintf+0x258>
    47fe:	f5 01       	movw	r30, r10
    4800:	17 ff       	sbrs	r17, 7
    4802:	07 c0       	rjmp	.+14     	; 0x4812 <vfprintf+0x218>
    4804:	80 81       	ld	r24, Z
    4806:	91 81       	ldd	r25, Z+1	; 0x01
    4808:	a2 81       	ldd	r26, Z+2	; 0x02
    480a:	b3 81       	ldd	r27, Z+3	; 0x03
    480c:	24 e0       	ldi	r18, 0x04	; 4
    480e:	30 e0       	ldi	r19, 0x00	; 0
    4810:	08 c0       	rjmp	.+16     	; 0x4822 <vfprintf+0x228>
    4812:	80 81       	ld	r24, Z
    4814:	91 81       	ldd	r25, Z+1	; 0x01
    4816:	aa 27       	eor	r26, r26
    4818:	97 fd       	sbrc	r25, 7
    481a:	a0 95       	com	r26
    481c:	ba 2f       	mov	r27, r26
    481e:	22 e0       	ldi	r18, 0x02	; 2
    4820:	30 e0       	ldi	r19, 0x00	; 0
    4822:	a2 0e       	add	r10, r18
    4824:	b3 1e       	adc	r11, r19
    4826:	01 2f       	mov	r16, r17
    4828:	0f 76       	andi	r16, 0x6F	; 111
    482a:	b7 ff       	sbrs	r27, 7
    482c:	08 c0       	rjmp	.+16     	; 0x483e <vfprintf+0x244>
    482e:	b0 95       	com	r27
    4830:	a0 95       	com	r26
    4832:	90 95       	com	r25
    4834:	81 95       	neg	r24
    4836:	9f 4f       	sbci	r25, 0xFF	; 255
    4838:	af 4f       	sbci	r26, 0xFF	; 255
    483a:	bf 4f       	sbci	r27, 0xFF	; 255
    483c:	00 68       	ori	r16, 0x80	; 128
    483e:	bc 01       	movw	r22, r24
    4840:	cd 01       	movw	r24, r26
    4842:	a2 01       	movw	r20, r4
    4844:	2a e0       	ldi	r18, 0x0A	; 10
    4846:	30 e0       	ldi	r19, 0x00	; 0
    4848:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <__ultoa_invert>
    484c:	d8 2e       	mov	r13, r24
    484e:	d4 18       	sub	r13, r4
    4850:	3f c0       	rjmp	.+126    	; 0x48d0 <vfprintf+0x2d6>
    4852:	85 37       	cpi	r24, 0x75	; 117
    4854:	21 f4       	brne	.+8      	; 0x485e <vfprintf+0x264>
    4856:	1f 7e       	andi	r17, 0xEF	; 239
    4858:	2a e0       	ldi	r18, 0x0A	; 10
    485a:	30 e0       	ldi	r19, 0x00	; 0
    485c:	20 c0       	rjmp	.+64     	; 0x489e <vfprintf+0x2a4>
    485e:	19 7f       	andi	r17, 0xF9	; 249
    4860:	8f 36       	cpi	r24, 0x6F	; 111
    4862:	a9 f0       	breq	.+42     	; 0x488e <vfprintf+0x294>
    4864:	80 37       	cpi	r24, 0x70	; 112
    4866:	20 f4       	brcc	.+8      	; 0x4870 <vfprintf+0x276>
    4868:	88 35       	cpi	r24, 0x58	; 88
    486a:	09 f0       	breq	.+2      	; 0x486e <vfprintf+0x274>
    486c:	ae c0       	rjmp	.+348    	; 0x49ca <vfprintf+0x3d0>
    486e:	0b c0       	rjmp	.+22     	; 0x4886 <vfprintf+0x28c>
    4870:	80 37       	cpi	r24, 0x70	; 112
    4872:	21 f0       	breq	.+8      	; 0x487c <vfprintf+0x282>
    4874:	88 37       	cpi	r24, 0x78	; 120
    4876:	09 f0       	breq	.+2      	; 0x487a <vfprintf+0x280>
    4878:	a8 c0       	rjmp	.+336    	; 0x49ca <vfprintf+0x3d0>
    487a:	01 c0       	rjmp	.+2      	; 0x487e <vfprintf+0x284>
    487c:	10 61       	ori	r17, 0x10	; 16
    487e:	14 ff       	sbrs	r17, 4
    4880:	09 c0       	rjmp	.+18     	; 0x4894 <vfprintf+0x29a>
    4882:	14 60       	ori	r17, 0x04	; 4
    4884:	07 c0       	rjmp	.+14     	; 0x4894 <vfprintf+0x29a>
    4886:	14 ff       	sbrs	r17, 4
    4888:	08 c0       	rjmp	.+16     	; 0x489a <vfprintf+0x2a0>
    488a:	16 60       	ori	r17, 0x06	; 6
    488c:	06 c0       	rjmp	.+12     	; 0x489a <vfprintf+0x2a0>
    488e:	28 e0       	ldi	r18, 0x08	; 8
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	05 c0       	rjmp	.+10     	; 0x489e <vfprintf+0x2a4>
    4894:	20 e1       	ldi	r18, 0x10	; 16
    4896:	30 e0       	ldi	r19, 0x00	; 0
    4898:	02 c0       	rjmp	.+4      	; 0x489e <vfprintf+0x2a4>
    489a:	20 e1       	ldi	r18, 0x10	; 16
    489c:	32 e0       	ldi	r19, 0x02	; 2
    489e:	f5 01       	movw	r30, r10
    48a0:	17 ff       	sbrs	r17, 7
    48a2:	07 c0       	rjmp	.+14     	; 0x48b2 <vfprintf+0x2b8>
    48a4:	60 81       	ld	r22, Z
    48a6:	71 81       	ldd	r23, Z+1	; 0x01
    48a8:	82 81       	ldd	r24, Z+2	; 0x02
    48aa:	93 81       	ldd	r25, Z+3	; 0x03
    48ac:	44 e0       	ldi	r20, 0x04	; 4
    48ae:	50 e0       	ldi	r21, 0x00	; 0
    48b0:	06 c0       	rjmp	.+12     	; 0x48be <vfprintf+0x2c4>
    48b2:	60 81       	ld	r22, Z
    48b4:	71 81       	ldd	r23, Z+1	; 0x01
    48b6:	80 e0       	ldi	r24, 0x00	; 0
    48b8:	90 e0       	ldi	r25, 0x00	; 0
    48ba:	42 e0       	ldi	r20, 0x02	; 2
    48bc:	50 e0       	ldi	r21, 0x00	; 0
    48be:	a4 0e       	add	r10, r20
    48c0:	b5 1e       	adc	r11, r21
    48c2:	a2 01       	movw	r20, r4
    48c4:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <__ultoa_invert>
    48c8:	d8 2e       	mov	r13, r24
    48ca:	d4 18       	sub	r13, r4
    48cc:	01 2f       	mov	r16, r17
    48ce:	0f 77       	andi	r16, 0x7F	; 127
    48d0:	06 ff       	sbrs	r16, 6
    48d2:	09 c0       	rjmp	.+18     	; 0x48e6 <vfprintf+0x2ec>
    48d4:	0e 7f       	andi	r16, 0xFE	; 254
    48d6:	df 14       	cp	r13, r15
    48d8:	30 f4       	brcc	.+12     	; 0x48e6 <vfprintf+0x2ec>
    48da:	04 ff       	sbrs	r16, 4
    48dc:	06 c0       	rjmp	.+12     	; 0x48ea <vfprintf+0x2f0>
    48de:	02 fd       	sbrc	r16, 2
    48e0:	04 c0       	rjmp	.+8      	; 0x48ea <vfprintf+0x2f0>
    48e2:	0f 7e       	andi	r16, 0xEF	; 239
    48e4:	02 c0       	rjmp	.+4      	; 0x48ea <vfprintf+0x2f0>
    48e6:	1d 2d       	mov	r17, r13
    48e8:	01 c0       	rjmp	.+2      	; 0x48ec <vfprintf+0x2f2>
    48ea:	1f 2d       	mov	r17, r15
    48ec:	80 2f       	mov	r24, r16
    48ee:	90 e0       	ldi	r25, 0x00	; 0
    48f0:	04 ff       	sbrs	r16, 4
    48f2:	0c c0       	rjmp	.+24     	; 0x490c <vfprintf+0x312>
    48f4:	fe 01       	movw	r30, r28
    48f6:	ed 0d       	add	r30, r13
    48f8:	f1 1d       	adc	r31, r1
    48fa:	20 81       	ld	r18, Z
    48fc:	20 33       	cpi	r18, 0x30	; 48
    48fe:	11 f4       	brne	.+4      	; 0x4904 <vfprintf+0x30a>
    4900:	09 7e       	andi	r16, 0xE9	; 233
    4902:	09 c0       	rjmp	.+18     	; 0x4916 <vfprintf+0x31c>
    4904:	02 ff       	sbrs	r16, 2
    4906:	06 c0       	rjmp	.+12     	; 0x4914 <vfprintf+0x31a>
    4908:	1e 5f       	subi	r17, 0xFE	; 254
    490a:	05 c0       	rjmp	.+10     	; 0x4916 <vfprintf+0x31c>
    490c:	86 78       	andi	r24, 0x86	; 134
    490e:	90 70       	andi	r25, 0x00	; 0
    4910:	00 97       	sbiw	r24, 0x00	; 0
    4912:	09 f0       	breq	.+2      	; 0x4916 <vfprintf+0x31c>
    4914:	1f 5f       	subi	r17, 0xFF	; 255
    4916:	80 2e       	mov	r8, r16
    4918:	99 24       	eor	r9, r9
    491a:	03 fd       	sbrc	r16, 3
    491c:	12 c0       	rjmp	.+36     	; 0x4942 <vfprintf+0x348>
    491e:	00 ff       	sbrs	r16, 0
    4920:	0d c0       	rjmp	.+26     	; 0x493c <vfprintf+0x342>
    4922:	fd 2c       	mov	r15, r13
    4924:	1e 15       	cp	r17, r14
    4926:	50 f4       	brcc	.+20     	; 0x493c <vfprintf+0x342>
    4928:	fe 0c       	add	r15, r14
    492a:	f1 1a       	sub	r15, r17
    492c:	1e 2d       	mov	r17, r14
    492e:	06 c0       	rjmp	.+12     	; 0x493c <vfprintf+0x342>
    4930:	80 e2       	ldi	r24, 0x20	; 32
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	b3 01       	movw	r22, r6
    4936:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <fputc>
    493a:	1f 5f       	subi	r17, 0xFF	; 255
    493c:	1e 15       	cp	r17, r14
    493e:	c0 f3       	brcs	.-16     	; 0x4930 <vfprintf+0x336>
    4940:	04 c0       	rjmp	.+8      	; 0x494a <vfprintf+0x350>
    4942:	1e 15       	cp	r17, r14
    4944:	10 f4       	brcc	.+4      	; 0x494a <vfprintf+0x350>
    4946:	e1 1a       	sub	r14, r17
    4948:	01 c0       	rjmp	.+2      	; 0x494c <vfprintf+0x352>
    494a:	ee 24       	eor	r14, r14
    494c:	84 fe       	sbrs	r8, 4
    494e:	0f c0       	rjmp	.+30     	; 0x496e <vfprintf+0x374>
    4950:	80 e3       	ldi	r24, 0x30	; 48
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	b3 01       	movw	r22, r6
    4956:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <fputc>
    495a:	82 fe       	sbrs	r8, 2
    495c:	1f c0       	rjmp	.+62     	; 0x499c <vfprintf+0x3a2>
    495e:	81 fe       	sbrs	r8, 1
    4960:	03 c0       	rjmp	.+6      	; 0x4968 <vfprintf+0x36e>
    4962:	88 e5       	ldi	r24, 0x58	; 88
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	10 c0       	rjmp	.+32     	; 0x4988 <vfprintf+0x38e>
    4968:	88 e7       	ldi	r24, 0x78	; 120
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	0d c0       	rjmp	.+26     	; 0x4988 <vfprintf+0x38e>
    496e:	c4 01       	movw	r24, r8
    4970:	86 78       	andi	r24, 0x86	; 134
    4972:	90 70       	andi	r25, 0x00	; 0
    4974:	00 97       	sbiw	r24, 0x00	; 0
    4976:	91 f0       	breq	.+36     	; 0x499c <vfprintf+0x3a2>
    4978:	81 fc       	sbrc	r8, 1
    497a:	02 c0       	rjmp	.+4      	; 0x4980 <vfprintf+0x386>
    497c:	80 e2       	ldi	r24, 0x20	; 32
    497e:	01 c0       	rjmp	.+2      	; 0x4982 <vfprintf+0x388>
    4980:	8b e2       	ldi	r24, 0x2B	; 43
    4982:	07 fd       	sbrc	r16, 7
    4984:	8d e2       	ldi	r24, 0x2D	; 45
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	b3 01       	movw	r22, r6
    498a:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <fputc>
    498e:	06 c0       	rjmp	.+12     	; 0x499c <vfprintf+0x3a2>
    4990:	80 e3       	ldi	r24, 0x30	; 48
    4992:	90 e0       	ldi	r25, 0x00	; 0
    4994:	b3 01       	movw	r22, r6
    4996:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <fputc>
    499a:	fa 94       	dec	r15
    499c:	df 14       	cp	r13, r15
    499e:	c0 f3       	brcs	.-16     	; 0x4990 <vfprintf+0x396>
    49a0:	da 94       	dec	r13
    49a2:	f2 01       	movw	r30, r4
    49a4:	ed 0d       	add	r30, r13
    49a6:	f1 1d       	adc	r31, r1
    49a8:	80 81       	ld	r24, Z
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	b3 01       	movw	r22, r6
    49ae:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <fputc>
    49b2:	dd 20       	and	r13, r13
    49b4:	a9 f7       	brne	.-22     	; 0x49a0 <vfprintf+0x3a6>
    49b6:	06 c0       	rjmp	.+12     	; 0x49c4 <vfprintf+0x3ca>
    49b8:	80 e2       	ldi	r24, 0x20	; 32
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	b3 01       	movw	r22, r6
    49be:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <fputc>
    49c2:	ea 94       	dec	r14
    49c4:	ee 20       	and	r14, r14
    49c6:	c1 f7       	brne	.-16     	; 0x49b8 <vfprintf+0x3be>
    49c8:	40 ce       	rjmp	.-896    	; 0x464a <vfprintf+0x50>
    49ca:	f3 01       	movw	r30, r6
    49cc:	86 81       	ldd	r24, Z+6	; 0x06
    49ce:	97 81       	ldd	r25, Z+7	; 0x07
    49d0:	02 c0       	rjmp	.+4      	; 0x49d6 <vfprintf+0x3dc>
    49d2:	8f ef       	ldi	r24, 0xFF	; 255
    49d4:	9f ef       	ldi	r25, 0xFF	; 255
    49d6:	2d 96       	adiw	r28, 0x0d	; 13
    49d8:	0f b6       	in	r0, 0x3f	; 63
    49da:	f8 94       	cli
    49dc:	de bf       	out	0x3e, r29	; 62
    49de:	0f be       	out	0x3f, r0	; 63
    49e0:	cd bf       	out	0x3d, r28	; 61
    49e2:	df 91       	pop	r29
    49e4:	cf 91       	pop	r28
    49e6:	1f 91       	pop	r17
    49e8:	0f 91       	pop	r16
    49ea:	ff 90       	pop	r15
    49ec:	ef 90       	pop	r14
    49ee:	df 90       	pop	r13
    49f0:	cf 90       	pop	r12
    49f2:	bf 90       	pop	r11
    49f4:	af 90       	pop	r10
    49f6:	9f 90       	pop	r9
    49f8:	8f 90       	pop	r8
    49fa:	7f 90       	pop	r7
    49fc:	6f 90       	pop	r6
    49fe:	5f 90       	pop	r5
    4a00:	4f 90       	pop	r4
    4a02:	3f 90       	pop	r3
    4a04:	2f 90       	pop	r2
    4a06:	08 95       	ret

00004a08 <strnlen_P>:
    4a08:	fc 01       	movw	r30, r24
    4a0a:	05 90       	lpm	r0, Z+
    4a0c:	61 50       	subi	r22, 0x01	; 1
    4a0e:	70 40       	sbci	r23, 0x00	; 0
    4a10:	01 10       	cpse	r0, r1
    4a12:	d8 f7       	brcc	.-10     	; 0x4a0a <strnlen_P+0x2>
    4a14:	80 95       	com	r24
    4a16:	90 95       	com	r25
    4a18:	8e 0f       	add	r24, r30
    4a1a:	9f 1f       	adc	r25, r31
    4a1c:	08 95       	ret

00004a1e <strnlen>:
    4a1e:	fc 01       	movw	r30, r24
    4a20:	61 50       	subi	r22, 0x01	; 1
    4a22:	70 40       	sbci	r23, 0x00	; 0
    4a24:	01 90       	ld	r0, Z+
    4a26:	01 10       	cpse	r0, r1
    4a28:	d8 f7       	brcc	.-10     	; 0x4a20 <strnlen+0x2>
    4a2a:	80 95       	com	r24
    4a2c:	90 95       	com	r25
    4a2e:	8e 0f       	add	r24, r30
    4a30:	9f 1f       	adc	r25, r31
    4a32:	08 95       	ret

00004a34 <fputc>:
    4a34:	0f 93       	push	r16
    4a36:	1f 93       	push	r17
    4a38:	cf 93       	push	r28
    4a3a:	df 93       	push	r29
    4a3c:	8c 01       	movw	r16, r24
    4a3e:	eb 01       	movw	r28, r22
    4a40:	8b 81       	ldd	r24, Y+3	; 0x03
    4a42:	81 ff       	sbrs	r24, 1
    4a44:	1b c0       	rjmp	.+54     	; 0x4a7c <fputc+0x48>
    4a46:	82 ff       	sbrs	r24, 2
    4a48:	0d c0       	rjmp	.+26     	; 0x4a64 <fputc+0x30>
    4a4a:	2e 81       	ldd	r18, Y+6	; 0x06
    4a4c:	3f 81       	ldd	r19, Y+7	; 0x07
    4a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    4a50:	9d 81       	ldd	r25, Y+5	; 0x05
    4a52:	28 17       	cp	r18, r24
    4a54:	39 07       	cpc	r19, r25
    4a56:	64 f4       	brge	.+24     	; 0x4a70 <fputc+0x3c>
    4a58:	e8 81       	ld	r30, Y
    4a5a:	f9 81       	ldd	r31, Y+1	; 0x01
    4a5c:	01 93       	st	Z+, r16
    4a5e:	f9 83       	std	Y+1, r31	; 0x01
    4a60:	e8 83       	st	Y, r30
    4a62:	06 c0       	rjmp	.+12     	; 0x4a70 <fputc+0x3c>
    4a64:	e8 85       	ldd	r30, Y+8	; 0x08
    4a66:	f9 85       	ldd	r31, Y+9	; 0x09
    4a68:	80 2f       	mov	r24, r16
    4a6a:	09 95       	icall
    4a6c:	00 97       	sbiw	r24, 0x00	; 0
    4a6e:	31 f4       	brne	.+12     	; 0x4a7c <fputc+0x48>
    4a70:	8e 81       	ldd	r24, Y+6	; 0x06
    4a72:	9f 81       	ldd	r25, Y+7	; 0x07
    4a74:	01 96       	adiw	r24, 0x01	; 1
    4a76:	9f 83       	std	Y+7, r25	; 0x07
    4a78:	8e 83       	std	Y+6, r24	; 0x06
    4a7a:	02 c0       	rjmp	.+4      	; 0x4a80 <fputc+0x4c>
    4a7c:	0f ef       	ldi	r16, 0xFF	; 255
    4a7e:	1f ef       	ldi	r17, 0xFF	; 255
    4a80:	c8 01       	movw	r24, r16
    4a82:	df 91       	pop	r29
    4a84:	cf 91       	pop	r28
    4a86:	1f 91       	pop	r17
    4a88:	0f 91       	pop	r16
    4a8a:	08 95       	ret

00004a8c <__ultoa_invert>:
    4a8c:	fa 01       	movw	r30, r20
    4a8e:	aa 27       	eor	r26, r26
    4a90:	28 30       	cpi	r18, 0x08	; 8
    4a92:	51 f1       	breq	.+84     	; 0x4ae8 <__ultoa_invert+0x5c>
    4a94:	20 31       	cpi	r18, 0x10	; 16
    4a96:	81 f1       	breq	.+96     	; 0x4af8 <__ultoa_invert+0x6c>
    4a98:	e8 94       	clt
    4a9a:	6f 93       	push	r22
    4a9c:	6e 7f       	andi	r22, 0xFE	; 254
    4a9e:	6e 5f       	subi	r22, 0xFE	; 254
    4aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    4aa2:	8f 4f       	sbci	r24, 0xFF	; 255
    4aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    4aa6:	af 4f       	sbci	r26, 0xFF	; 255
    4aa8:	b1 e0       	ldi	r27, 0x01	; 1
    4aaa:	3e d0       	rcall	.+124    	; 0x4b28 <__ultoa_invert+0x9c>
    4aac:	b4 e0       	ldi	r27, 0x04	; 4
    4aae:	3c d0       	rcall	.+120    	; 0x4b28 <__ultoa_invert+0x9c>
    4ab0:	67 0f       	add	r22, r23
    4ab2:	78 1f       	adc	r23, r24
    4ab4:	89 1f       	adc	r24, r25
    4ab6:	9a 1f       	adc	r25, r26
    4ab8:	a1 1d       	adc	r26, r1
    4aba:	68 0f       	add	r22, r24
    4abc:	79 1f       	adc	r23, r25
    4abe:	8a 1f       	adc	r24, r26
    4ac0:	91 1d       	adc	r25, r1
    4ac2:	a1 1d       	adc	r26, r1
    4ac4:	6a 0f       	add	r22, r26
    4ac6:	71 1d       	adc	r23, r1
    4ac8:	81 1d       	adc	r24, r1
    4aca:	91 1d       	adc	r25, r1
    4acc:	a1 1d       	adc	r26, r1
    4ace:	20 d0       	rcall	.+64     	; 0x4b10 <__ultoa_invert+0x84>
    4ad0:	09 f4       	brne	.+2      	; 0x4ad4 <__ultoa_invert+0x48>
    4ad2:	68 94       	set
    4ad4:	3f 91       	pop	r19
    4ad6:	2a e0       	ldi	r18, 0x0A	; 10
    4ad8:	26 9f       	mul	r18, r22
    4ada:	11 24       	eor	r1, r1
    4adc:	30 19       	sub	r19, r0
    4ade:	30 5d       	subi	r19, 0xD0	; 208
    4ae0:	31 93       	st	Z+, r19
    4ae2:	de f6       	brtc	.-74     	; 0x4a9a <__ultoa_invert+0xe>
    4ae4:	cf 01       	movw	r24, r30
    4ae6:	08 95       	ret
    4ae8:	46 2f       	mov	r20, r22
    4aea:	47 70       	andi	r20, 0x07	; 7
    4aec:	40 5d       	subi	r20, 0xD0	; 208
    4aee:	41 93       	st	Z+, r20
    4af0:	b3 e0       	ldi	r27, 0x03	; 3
    4af2:	0f d0       	rcall	.+30     	; 0x4b12 <__ultoa_invert+0x86>
    4af4:	c9 f7       	brne	.-14     	; 0x4ae8 <__ultoa_invert+0x5c>
    4af6:	f6 cf       	rjmp	.-20     	; 0x4ae4 <__ultoa_invert+0x58>
    4af8:	46 2f       	mov	r20, r22
    4afa:	4f 70       	andi	r20, 0x0F	; 15
    4afc:	40 5d       	subi	r20, 0xD0	; 208
    4afe:	4a 33       	cpi	r20, 0x3A	; 58
    4b00:	18 f0       	brcs	.+6      	; 0x4b08 <__ultoa_invert+0x7c>
    4b02:	49 5d       	subi	r20, 0xD9	; 217
    4b04:	31 fd       	sbrc	r19, 1
    4b06:	40 52       	subi	r20, 0x20	; 32
    4b08:	41 93       	st	Z+, r20
    4b0a:	02 d0       	rcall	.+4      	; 0x4b10 <__ultoa_invert+0x84>
    4b0c:	a9 f7       	brne	.-22     	; 0x4af8 <__ultoa_invert+0x6c>
    4b0e:	ea cf       	rjmp	.-44     	; 0x4ae4 <__ultoa_invert+0x58>
    4b10:	b4 e0       	ldi	r27, 0x04	; 4
    4b12:	a6 95       	lsr	r26
    4b14:	97 95       	ror	r25
    4b16:	87 95       	ror	r24
    4b18:	77 95       	ror	r23
    4b1a:	67 95       	ror	r22
    4b1c:	ba 95       	dec	r27
    4b1e:	c9 f7       	brne	.-14     	; 0x4b12 <__ultoa_invert+0x86>
    4b20:	00 97       	sbiw	r24, 0x00	; 0
    4b22:	61 05       	cpc	r22, r1
    4b24:	71 05       	cpc	r23, r1
    4b26:	08 95       	ret
    4b28:	9b 01       	movw	r18, r22
    4b2a:	ac 01       	movw	r20, r24
    4b2c:	0a 2e       	mov	r0, r26
    4b2e:	06 94       	lsr	r0
    4b30:	57 95       	ror	r21
    4b32:	47 95       	ror	r20
    4b34:	37 95       	ror	r19
    4b36:	27 95       	ror	r18
    4b38:	ba 95       	dec	r27
    4b3a:	c9 f7       	brne	.-14     	; 0x4b2e <__ultoa_invert+0xa2>
    4b3c:	62 0f       	add	r22, r18
    4b3e:	73 1f       	adc	r23, r19
    4b40:	84 1f       	adc	r24, r20
    4b42:	95 1f       	adc	r25, r21
    4b44:	a0 1d       	adc	r26, r0
    4b46:	08 95       	ret

00004b48 <_exit>:
    4b48:	f8 94       	cli

00004b4a <__stop_program>:
    4b4a:	ff cf       	rjmp	.-2      	; 0x4b4a <__stop_program>
